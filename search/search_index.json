{"config":{
  "lang":["en"],
  "prebuild_index":false,
  "separator":"[\\s\\-]+"
},
"docs":[
{
"location": "/about.html",
"lang": "en",
"title": "About",
"content": "\n\n\n\nLibreMesh is a community and an open project, so anyone friendly is welcome.\nWe encourage anyone using the LibreMesh to become part of this community.\nThe software is maintained by some of its founders together with a wide community.\n\n\nTable 1. List of LibreMesh founders\n\n\n\n\n\n\nName\nContact\n\n\n\n\nGioacchino Mazzurco\ngio[at]eigenlab[dot]org\n\n\nGui\n-\n\n\nNico\n-\n\n\nPau\np4u[at]dabax[dot]net\n\n\n\n\n\n\n\nFigure 1. List of contributors to LibreMesh development, detailed list available at this link.\n\n\nDonations\n\n\nDonations to the project are managed via OpenCollective, thanks!\n\n\n\n\n\n\n\n"}
,{
"location": "/communication.html",
"lang": "en",
"title": "Communication",
"content": "\nMailing Lists\n\n\nThe project communicate on the following mailing list\n\n\n\n\nlibremesh at krutt.org -\nThis list is used for project organisational purposes, user support, and development discussions. Any language is welcome.\n\n\n\n\nYou can see the mailing list archive here and search in it using this form:\n\n\n\n\n\n\n\n\n\nSubject\n\nAuthor\n\nDate\n\n12345678910111213141516171819202122232425262728293031JanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember2022202320242025\n\n\n\n\nOld mailing list archives can be consulted at:\n\n\n\n\nlime-dev https://listas.altermundi.net/archives/list/lime-dev@lists.libremesh.org/latest\n\n\nlime-users https://listas.altermundi.net/archives/list/lime-users@lists.libremesh.org/latest\n\n\n\n\n\n\nChatroom\n\n\nThe chatroom can be accessed through Element app, desktop software or web client (click here for checking out these chat clients) and entering the libremesh-dev:matrix.guifi.net chatroom. To write in the chatroom you&#8217;ll need to register a user on any of the Matrix nodes (the default on element.io will also work). Other options for connecting can be found /#libremesh-dev:matrix.guifi.net\">clicking here.\n\n\n\n\nSocial networks\n\n\nThe LibreMesh project has an official PeerTube account on: @libremesh@media.exo.cat.\n\n\n\n\nOnline meetings\n\n\nWe decided to meet the \"first Saturday of the month, every two months\", with additional meetings in weekdays, so:\n\n\n\n\nFriday the 3rd of January 2025 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nSaturday the 1st of February 2025 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nSaturday the 5th of April 2025 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nSaturday the 7th of June 2025 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nSaturday the 2nd of August 2025 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nWednesday the 24th of September 2025 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nSaturday the 4th of October 2025 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nSaturday the 6th of December 2025 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\n\n\nYou can freely partecipate as listener, but.. the link of the meeting pass in chat and via mailinglist just at the end of the month before.\n\n\nYou can also add topics at the meeting, but we prefer that inform us before brings them.\n\n\nDuring the meetings we use this format:\n\n\n\n\nwe prefer have a list of the topics to discuss before the meeting,\n\n\nwe do report for the people that can&#8217;t be present in the assembly,\n\n\nwe use a pad for a collaborative reporting of discussion and decisions,\n\n\nwe take the time of the speakers to not have unique long speeches\n\n\nwe decide at the begin of every meeting the languages that we use, so sometimes our assembly are in different languages because people understand more than what they speak (italoportish) and sometimes we use english.\n\n\nwe not decide for majority and for do-cracy, we try to reach consensus and we are friendly in the conversations, but to be honest we are not already established a written \"decision making workflow\".\n\n\n\n\n\n\nReport of our meetings\n\n\n\n\n2023\n\n\n2022\n\n\n2021\n\n\n\n\n"}
,{
"location": "/development-kernel_vermagic.html",
"lang": "en",
"title": "Kernel vermagic",
"content": "\nCompiling firmware compatible with OpenWrt repository Kernel vermagic\n\n\nReference\n\n\nThis page is an optional expansion to the normal compilation procedure suggested in the development page and is an expansion of this explorative email.\nBeware that these additional steps result in a more time and disk space consuming compilation.\n\n\n\n\nThe problem\n\n\nOpenWrt offers the amazing possibility to add more software to the firmware both at compilation time or subsequently.\nThe former possibility always works: if you can, always select the packages you need in the menuconfig at compilation time.\nThe latter possibility can show some compatibility issues between the custom installed image and the packages available on OpenWrt repositories, and that&#8217;s what this page tries to fix.\n\n\nThis compatibility issue arises just with packages depending on some kernel module, for example the tc package. These packages require a specific kernel version to be present. And in OpenWrt the kernel version includes the hash of the configuration used for compiling it, which is a part of the general compilation configuration, so that the kernel version will include a vermagic which looks like:\n\n\n\n# opkg info kernel\nVersion: 4.14.195-1-b84a5a29b1d5ae1dc33ccf9ba292ca1d\n\n\n\nSo, in order to be able to install some specific packages using OPKG, you need to have compiled the kernel exactly in the same way as the one used in the official OpenWrt repositories.\n\n\n\n\nGeneric instructions\n\n\nThese are the minimal instructions to follow, check in the section below whether additional selections are needed for the target/subtarget of your device.\n\n\nIn the menuconfig, at LibreMesh compilation time:\n\n\n\n\nSelect: Advanced configuration options\n\n\nSelect: Global build settings &#8594; Select all kernel module packages by default\n\n\nDeselect: Global build settings &#8594; Kernel build options &#8594; Compile the kernel with symbol table information\n\n\nFill with builder: Global build settings &#8594; Kernel build options &#8594; Custom Kernel Build User Name\n\n\nFill with buildhost: Global build settings &#8594; Kernel build options &#8594; Custom Kernel Build Domain Name\n\n\n\n\nthen check if your device requires additional selections in the following table and finally continue with the normal procedure.\n\n\n\n\nAdditional target/subtarget specific selections\n\n\nMake sure to do all the 5 selections/deselections/filling listed in the previous section.\nIf you don&#8217;t know the target and subtarget of your router, check out OpenWrt table of hardware.\n\n\nTable 1. Additional steps to perform in the menuconfig for specific subtargets\n\n\n\n\n\n\n\nTarget\nSubtarget\nAdditional things to select\n\n\n\n\nAtheros ATH79 (DTS)\nGeneric\n&#8201;&#8212;&#8201;\n\n\nMediaTek Ralink MIPS\nMT7620 based boards\n&#8201;&#8212;&#8201;\n\n\nMediaTek Ralink MIPS\nMT7621 based boards\n&#8201;&#8212;&#8201;\n\n\nAtheros AR7xxx/AR9xxx (ar71xx)\nGeneric\n&#8201;&#8212;&#8201;\n\n\nx86\nx86_64\n&#8201;&#8212;&#8201;\n\n\n\n\n\n\nMy target/subtarget is not present in the table\n\n\nFirst, make sure that the \"Generic instructions\" aren&#8217;t enough!\nIf after compiling and flashing an image following the \"Generic instructions\" you still get errors like:\n\n\n\n# opkg install tc\n&gt;&gt;&gt;&gt; Collected errors:\n&gt;&gt;&gt;&gt;  * satisfy_dependencies_for: Cannot satisfy the following dependencies\n&gt;&gt;&gt;&gt; for tc:\n&gt;&gt;&gt;&gt;  * \tkernel (= 4.9.214-1-2b8f9dfe583e5c09aadd9474da55137f)\n&gt;&gt;&gt;&gt;  * opkg_install_cmd: Cannot install package tc.\n\n\n\nyou can try to find out which kernel modules you&#8217;re missing (you don&#8217;t actually need them, it&#8217;s just for having the kernel version matching exactly the one required by the packages on OpenWrt repositories) following this procedure:\n\n\n\n\ncheck the kernel version you need, included the vermagic hash, this can be found in various ways, for example in the kmods subdirectory (in the downloads.openwrt.org website) at the bottom of the web page where you would download the OpenWrt images. This page is specific for the OpenWrt version you&#8217;re using, the target and the subtarget: the complete URL would be something like: https://downloads.openwrt.org/releases/\\[release_version\\]/targets/[target_system]/[subtarget]/kmods and this will contain another subdirectory named as the complete kernel version. For example, for OpenWrt19.07.10/ATH79/generic you can find it here;\n\n\ndownload the config.buildinfo file for the target/subtarget of your device, you can find it in the same directory from where you download the official OpenWrt images, at the bottom of the page. The complete direction is something like: https://downloads.openwrt.org/releases/\\[release_version\\]/targets/[target_system]/[subtarget]/config.buildinfo for example, for OpenWrt19.07.10/ATH79/generic you can find it here;\n\n\nmake a backup copy of the original config.buildinfo;\n\n\nmodify the config.buildinfo file removing some lines;\n\nDo not remove the following lines:\n\n\n\nCONFIG_TARGET_name_of_wanted_target=y\nCONFIG_ALL_KMODS=y\nCONFIG_DEVEL=y\n# CONFIG_KERNEL_KALLSYMS is not set\nCONFIG_KERNEL_BUILD_DOMAIN=\"buildhost\"\nCONFIG_KERNEL_BUILD_USER=\"builder\"\n\n\n\nneither the CONFIG_KERNEL_KALLSYMS one which is needed even if it is commented out. All these options are the ones mentioned in the \"General instructions\" above.\n\n\n\nCopy it into your OpenWrt buildroot compilation directory and rename the copy as .config (overwrite if necessary) which is the hidden file containing the configuration for the compilation, which will get modified from menuconfig.\n\n\nRun make defconfig to generate the rest of the .config file (you can do the same using make menuconfig).\n\n\nRun make target/linux/compile to compile the minimum amount of stuff needed to obtain the kernel vermagic hash (even if the compilation got an error and did not reach completion).\n\n\nCheck the kernel vermagic which will be in a file in your OpenWrt buildroot like this: ./build_dir/target-mips_24kc_musl/linux-ath79_generic/linux-4.14.195/.vermagic you can try with the command:\n\n\ncat ./build_dir/target-*/linux-*/linux-*/.vermagic\n\n\n\n\nIf the string matches the kernel vermagic hash from point 1, good! Otherwise, repeat from point 4 removing more lines, compiling again and checking again if the hash matches.\n\n\nThe minimum set of lines needed to have a matching hash are enough, but if you want to take it down to the single kernel configuration you can check which lines appears in the ./build_dir/target-mips_24kc_musl/linux-ath79_generic/linux-4.14.195/.config.set file (adapt the path to your target) due to the new content of the .config file.\n\n\nConfirm that this works compiling a full image (continuing with the compilation guide), flashing it on your device and installing some package depending on a kernel module (e.g. the tc package) using opkg install command.\n\n\nIf you had to keep the lines of some profiles (devices) in order to obtain the good vermagic, please check which kernel modules they depend upon, you can find this information in the menuconfig using the \"Help\" function when you are on the selected profile: all the packages starting with kmod- are kernel modules, most of them are selected by default but there will be some that are not. Note them down and check which are not selected when running the menuconfig after deleting the .config file.\n\n\nIf you go through all of this craziness, please report to this page your discoveries! You can file a pull request on the website repository using the \"Edit this page\" button at the top right of this page or contacting us. Thanks!\n\n\n\n\n"}
,{
"location": "/development-network_profiles.html",
"lang": "en",
"title": "Network Profiles",
"content": "\nWhat is a Network Profile?\n\n\nNetwork profiles are the most convenient way for a community to organize its configuration files. During the compilation process, the users can select the desired network profile, which will automatically select all the needed software and include the configuration files for this community.\n\n\nThey are organized in folders with some content in the network-profiles repository.\n\n\n\n\nHow to create a Network Profile\n\n\nPractically, each community can create a folder in the network-profiles repository with the community&#8217;s name, and, inside this, create one or more profiles (for example you can have different profiles for nodes of the backbone or for access points, or for nodes with large or small flash or RAM memory).\n\n\nYou will need to create a Github user, fork the network-profiles repository, clone your fork on a computer, create the directories, create a Makefile (see below), add some content in the root/ folder (see below), commit the changes, push them to your forked repository and finally open a pull request from your repository to the official network-profiles one.\n\n\nCloning your fork\n\nHere we will skip the explanation on most of the git and Github-related steps, please search on the internet how to perform them or ask us on the project&#8217;s communication channels.\n\n\nOnce you forked the network-profiles repository with your user, clone your fork:\n\n\n\ngit clone git@github.com:your_username/network-profiles.git\n\n\n\n\nCreating the directories\n\nEach community will have to create its directory.\n\n\n\ncd network-profiles\nmkdir MyMesh.iscool\n\n\n\nAnd inside that directory, you&#8217;ll have to create a directory for each different profile you want to have. Most communities will have only one profile.\n\n\n\ncd MyMesh.iscool\nmkdir standard\nmkdir lowmem\nmkdir gateway\n\n\n\n\nCreating a Makefile\n\nThe Network Profiles get converted to packages which, as mentioned above, will include some files but can also select some new software to be installed as a dependency. In order to compile them as packages, a Makefile is needed.\n\n\nIn the Makefile you can indicate a description and include a list of the dependencies, which are the packages that gets selected by selecting your network-profile.\n\n\nThe Makefile for the network-profiles repository has to be inside the profile directory, for example network-profiles/MyMesh.iscool/standard/Makefile, and it will look like this:\n\n\n\ninclude $(TOPDIR)/rules.mk\n\nPROFILE_DESCRIPTION:=Standard profile for MyMesh community\nPROFILE_DEPENDS:=+lime-proto-babeld +lime-proto-batadv +lime-proto-anygw\n\ninclude ../../profile.mk\n\n# call BuildPackage - OpenWrt buildroot signature\n\n\n\nand the lines you should customize are only the PROFILE_DESCRIPTION and PROFILE_DEPENDS ones. In the list of the PROFILE_DEPENDS, please note that each package&#8217;s name is preceeded by a +. There is no need to specify the lime-system package as it is already included.\n\n\n\nAdding files to the \"root\" folder\n\nFor including custom files in the compiled image, you can create a root/ folder in the profile folder, for example network-profiles/MyMesh.iscool/standard/root/. In this directory, you will have to create the folders structure and the files you want to have in the compiled firmware.\n\n\nWhat is always interesting to include, is a lime-community file, which is the file containing the configuration options for your community. This file will need to appear in the firmware image in the /etc/config/lime-community, so that you will need to create it here in network-profiles/MyMesh.iscool/standard/root/etc/config/lime-community.\n\n\nThe options that are not set in the lime-community file, are taken from the lime-defaults one. For more information on this, please read the documentation on the website.\n\n\n\nAlternative to the usage of Network Profiles\n\nUsing a network profile is a convenient way to share the files over the internet with all the other members of your community; but it can be exhaggerated if you just want to test adding a file from time to time.\n\n\nIn the buildroot (which is the system that you can use for compiling LibreMesh as described in the development page) you can create a directory named files, and the content of this directory will, in the final LibreMesh image, overwrite every file with the same path and name, including the ones from the selected Network Profile.\n\n\nFor example:\n\n\n\ncd openwrt\nmkdir files\nrsync -aPh --delete ~/network-profiles/valsamoggia.ninux.org/vs-ninux-generic/root/ files/\n\n\n\n\n"}
,{
"location": "/development.html",
"lang": "en",
"title": "Development",
"content": "\nThe Source Code\n\n\nThe code is stored inside a git tree which contains all branches and releases.\n\n\nAll repositories can be browsed online through GitHub.\n\n\nMost of the development happens in the lime-packages git repository which can be browsed on GitHub or downloaded using git:\n\n\n\ngit clone https://github.com/libremesh/lime-packages.git\ncd lime-packages\n\n\n\n\n\nCompiling LibreMesh from source code\n\n\nThis procedure has been tested on GNU/Linux, on other systems it could require some modifications or it can be run in a Linux virtual machine. Generally, the first compilation takes a few hours and requires at least 10 GB of disk space.\n\n\nFirst of all you need to install a few packages to your system.\nBuilding OpenWrt requires a bunch of installed software.\n\n\nIf you are unsure about your system having all the dependencies installed, you can just go on with the OpenWrt compilation (see below) and, if it fails, check out the error messages.\n\n\nOn an Ubuntu system, the following command will install the minimum compilation dependencies:\n\n\n\nsudo apt update\nsudo apt install --no-install-recommends git ca-certificates subversion wget make gcc g++ libncurses5-dev gawk unzip file patch python3-distutils python3-minimal python2-minimal libpython2-stdlib\n\n\n\nFor other Linux distributions the packets list could be slightly different, check out the OpenWrt build system installation page.\n\n\nThen you need to get the OpenWrt source code.\nMake sure to git clone the source code as normal user (i.e. do not use root): the compilation will refuse to run if the administrator user root is being used.\n\n\nDownload OpenWrt source code\nLibreMesh can be built on top of OpenWrt version 23.05.5.\n\n\nFor compiling LibreMesh on top of the stable version of OpenWrt, first download the OpenWrt BuildRoot code:\n\n\n\ngit clone -b v23.05.5 --single-branch https://git.openwrt.org/openwrt/openwrt.git\n\n\n\nEnter OpenWrt build root\n\ncd openwrt\n\n\n\nTake default OpenWrt repositories feeds\n\ncp feeds.conf.default feeds.conf\n\n\n\nAnd add LibreMesh repositories to the OpenWrt feeds\n\ncat &lt;&lt; EOF &gt;&gt; feeds.conf\n\nsrc-git libremesh https://github.com/libremesh/lime-packages.git;v2024.1\nsrc-git profiles https://github.com/libremesh/network-profiles.git\nEOF\n\n\n\nWith the lines above, you will compile the LibreMesh 2024.1 release. This is indicated by the ;v2024.1 suffix. Without this suffix, the master branch would be used, but the master branch is not compatible with OpenWrt 23.05.5. Instead, it is being developed for supporting the yet-to-be-released OpenWrt 24.10 version.\n\n\nUpdate the packages from the feeds\n\nscripts/feeds update -a\nscripts/feeds install -a\n\n\n\nRun the configuration menu\n\nmake menuconfig\n\n\n\nCheck out the target (e.g. ATH79), subtarget (e.g. generic) and profile (e.g. tl-wdr3600-v1) of your router on OpenWrt table of hardware.\n\n\nSelect the Target System, Subtarget and Target Profile accordingly.\n\n\nDeselect erroneous feeds locations:\n\n\n\n\nImage configuration → Separate feed repositories → Enable feed libremesh\n\n\nImage configuration → Separate feed repositories → Enable feed profiles\n\n\n\n\nDeselect problematic packages:\n\n\n\n\nBase system &#8594; dnsmasq\n\n\nNetwork &#8594; odhcpd-ipv6only\n\n\n\n\nOptionally, deselect unused packages:\n- Network &#8594; ppp\n\n\nIf you local community has a profile in the network-profiles repository, you can select it in:\n\n\n\n\nLibreMesh &#8594; network-profile &#8594; profile-your_community-your_profile\n\n\n\n\n\n\n\n\n\n\n\nNetwork profiles are the specific configuration from the communities, and are stored in this collective\nrepository, but they can also be kept locally, depending on how every community network manages itself. For more instructions on how to create a profile or how to use a local one, check out the network profiles page.\n\n\n\n\n\n\nSelect (press space until when an asterisk appears, like &lt;*&gt;) LibreMesh packages:\n\n\n\n\nLibreMesh → Offline Documentation → lime-docs-minimal (LibreMesh minimal documentation)\n\n\nLibreMesh → lime-app (LibreMeshApp)\n\n\nLibreMesh → lime-hwd-openwrt-wan (Respect openwrt wan interface as default)\n\n\nLibreMesh → lime-proto-anygw (LibreMesh anygw proto support)\n\n\nLibreMesh → lime-proto-babeld (LibreMesh babeld proto support)\n\n\nLibreMesh → lime-proto-batadv (LibreMesh batman-adv proto support)\n\n\nLibreMesh → shared-state\n\n\n\nshared-state-babeld_hosts (babeld-hosts module for shared-state)\n\n\nshared-state-bat_hosts (bat-hosts module for shared-state)\n\n\nshared-state-nodes_and_links (nodes_and_links module for shared-state)\n\n\n\n\n\nLibreMesh &#8594; babeld-auto-gw-mode\n\n\n\n\n\n\n\n\n\n\n\nIf after the compilation you don&#8217;t see the compiled image in the bin/targets/&#8230;&#8203;/&#8230;&#8203;/ folder, it is possible that your router has such a small flash memory that the aforementioed packages don&#8217;t fit in it (it can happen also with routers having 8 MB of flash memory when selecting huge packages to be included). In this case, you can remove the .config generated packages list and repeat the packages selection without including lime-app. If the compiled image is still too large, try selecting only lime-proto-anygw, lime-proto-batadv and lime-proto-babeld or following this guide.\n\n\n\n\n\n\nSome more packages are recommended but not mandatory for a working LibreMesh network. Consider avoiding to select the following packages only if the created image is too large and does not fit in the router memory.\n\n\n\n\nLibreMesh &#8594; check-date-http (Keep local date under NTP too far away skew)\n\n\nLibreMesh &#8594; Offline Documentation &#8594; lime-docs (LibreMesh full documentation)\n\n\nLibreMesh &#8594; lime-debug (libremesh debug utils)\n\n\n\n\nAdditionally and optionally, httpS for the web interface can be enabled selecting (beware that the web interace will be shown as not trusted):\n\n\n\n\nUtilities &#8594; Encryption &#8594; px5g-standalone\n\n\n\n\nFinally, also the 802.11s mesh connections can be password protected, this will require a specific configuration and this package to be selected:\n\n\n\n\nNetwork &#8594; WirelessAPD &#8594; wpad-mesh-openssl\n\n\n\n\nand this to be de-selected:\n\n\n\n\nNetwork &#8594; WirelessAPD &#8594; wpad-basic-mbedtls\n\n\n\n\n\n\n\n\n\n\n\nIn order to have additional packages, the easiest way is to select them in menuconfig. More packages can be installed afterwards via opkg, but some of these require a specific kernel configuration to be in place. This can be achieved following these additional instructions dealing with kernel vermagic. Beware that this will increase noticeably the time and storage space required for the compilation.\n\n\n\n\n\n\nSave and exit.\n\n\nAt this stage there is the possibility to include custom files in the compiled firmware image. For this, you will have to create, inside the openwrt/ directory, a files/ directory containing the directory structure and files you want to add. For example, if you want to have a /etc/config/lime-community file you need to do the following:\n\n\n\nmkdir -p files/etc/config/\ntouch files/etc/config/lime-community\n\n\n\nand then edit the newly created lime-community file including your custom content. If a file from a package has the same name and path as a file in this directory, it will be overwritten. This is a quick way to include a custom configuration file, without the need to create an online network profile.\n\n\nFinally, compile the images\n\nmake -j$(nproc)\n\n\n\nIf everything goes well you should find the produced binaries inside the bin/ directory.\n\n\n\n\nEmulating on your computer with qemu\n\n\nIts possible to emulate a image compiled for x86_64 architecture. See script qemu_dev_start.sh and qemu_dev_stop.sh scripts.\n\n\n\n\n\n\n\n\n\nYou will be running something like:\n\n\n\nsudo ./qemu_dev_start openwrt-x86-64-combined-ext4.img openwrt-x86-64-ramfs.bzImage\n\n\n\nMore information here\n\n\n\n\n\n\n\n\nSubmitting Patches\n\n\nWe accept pull requests via GitHub. But patches can also be submitted via the libremesh mailing list.\n\n\n\n\nThe Web Presence\n\n\nThe pages you&#8217;re reading are generated from text files using the\nAsciiDoc suite plus Jekyll.\n\n\nAny changes made to the website repository will be reflected on our libremesh.org website.\n\n\nIn order to generate these pages locally:\n\n\n\ngit clone https://github.com/libremesh/libremesh.github.io.git\ncd libremesh.github.io &amp;&amp; bundle install\nbundle exec jekyll serve\n\n\n\nFor more details, check the README on Github.\n\n\nIf you would like to contribute to the documentation then please send patches to our mailing list or open a pull request on GitHub. An easy way to edit and file a pull request is clicking the \"Edit this page\" button at the top right of each page.\n\n\nPlease use the AsciiDoc syntax for contributions on the web page.\n\n\n"}
,{
"location": "/docs/en_change_wifi_behavior.html",
"lang": "en",
"title": "Change WiFi config",
"content": "\nLibreMesh interface-specific WiFi configuration\n\n\nIf no specific WiFi interface configuration is present, the general WiFi configuration section is used for all the interfaces.\n\n\nFor more information about the general LibreMesh config file options see The config file page.\n\n\nFor more examples and offline documentation check out /docs/lime-example.txt on the router or, still on the router, on http://thisnode.info/docs/lime-example.txt, or lime-example.txt file online.\n\n\n\n\nSpecific wireless interface configuration\n\n\nTo create an interface-specific configuration you must create a new wifi section named radioN, where N is the radio index (to see WiFi devices list execute: wifi status).\n\n\nIn the following example radio0 is used only for wireless client, radio1 is used only for Access Point with a custom ESSID name, and radio2 just for meshing.\n\n\nWiFi interface-specific options (override general option), multiple allowed\n\nconfig wifi radio0\n\tlist modes 'client'\n\toption channel 'auto'\n\toption client_ssid 'SomeWiFiNetwork'\n\toption client_key 'SomeWPApskPassword'\n\toption client_encryption 'psk2'\n\nconfig net wirelessclientWAN\n\toption linux_name 'wlan0-sta'\n\tlist protocols 'wan'\n\nconfig wifi radio1\n\tlist modes 'apname'\n\toption apname_ssid 'MyHouse'\n\nconfig wifi radio2\n\tlist modes 'ieee80211s'\n\toption ieee80211s_mesh_fwding '0'\n\toption ieee80211s_mesh_id 'LiMe'\n\n\n\nThe first section configures one radio interface to be only a wireless client (station associated to a wireless access point).\nThe second section configures the just created client interface for obtaining an IP from the access point DHCP server. The employed name wlan0-sta has to match the name of the interface created by the first section.\n\n\nThe specific-interface configuration sections must be appended in file /etc/config/lime-node in addition to the already existing generic configuration.\n\n\nIn the third section, radio1 is configured for just being an access point with custom ESSID name, each specified option overrides the respective general WiFi option (listed in The config file page), all the non-specified options (like distance or channel) are taken from the general wifi section.\nSpecifying an entry of a list, replaces the entire list (for example, setting the apname entry to the modes list means that for this interface, apname will be the only active mode).\n\n\nTo apply the changes run lime-config and reboot.\n\n\n\n\n\n\n\n\ninterface names\n\nIn the just reported example, radio0 has to exist (check with wifi status) and also wlan0-sta has to be created by the first section in order to be used in the second section (after running lime-config, check with ip link show).\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork interface specific options\n\nAvailable protocols: bmx6, bmx7, batadv, olsr, olsr6, olsr2, bgp, wan, lan, manual, static, babeld, apbb, client\n\n\nNote that some of these protocols will require the relative lime-proto-&#8230;&#8203; package being installed, otherwise the protocol entry will be ignored.\n\n\nproto:vlan_number works too (something like bmx6:13 is supported). If VLAN is 0, no VLAN will be used.\n\n\nVLAN type defaults to 802.1ad, but it can be set to 80.1q adding another option proto:vlan_number:8021q.\n\n\nIf you use manual do not specify other protocols, may result in an unpredictable behavior/configuration.\n\n\n\n\n\n\n"}
,{
"location": "/docs/en_changing_network_behavior.html",
"lang": "en",
"title": "Change Ethernet config",
"content": "\nWAN port configuration\n\n\nThe recommended lime-hwd-openwrt-wan package detects the WAN port and configures it for getting connectivity to the internet.\n\n\nConnecting via SSH also from the WAN port\n\nIf the OpenWrt&#8217;s firewall is present, it will block incoming connections on the WAN port, for security reasons.\nIf you need to connect via SSH from the WAN port (likely from the internet), you can allow the incoming connection to the port 22 (the default port for SSH) adding these lines in /etc/config/firewall and rebooting your router:\n\n\n\nconfig rule\n\toption name 'Allow-SSH'\n\toption src 'wan'\n\toption proto 'tcp'\n\toption dest_port '22'\n\toption target 'ACCEPT'\n\n\n\n\nUsing the WAN port for connecting with another cloud\n\nWhen two neighboring LibreMesh networks want to interconnect without flooding each other with local broadcast traffic, they use two different WiFi access point names ap_name. But if they want to do the same via cable, they can do so with a WAN-WAN connection, connecting two border nodes via their WAN ports. This is absolutely not the intended use for a WAN port but works.\n\n\nImportant: if you have the OpenWrt firewall installed, you will need to allow all the incoming connections on the WAN port of both border routers. For doing this, edit the /etc/config/firewall file like this and reboot your routers:\n\n\n\nconfig zone\n\toption name\t\twan\n\tlist   network\t\t'wan'\n\tlist   network\t\t'wan6'\n\toption input\t\tREJECT --&gt; change to ACCEPT\n\toption output\t\tACCEPT\n\toption forward\t\tREJECT --&gt; change to ACCEPT\n\toption masq\t\t1\n\toption mtu_fix\t\t1\n\n\n\n\n\n\nLibreMesh interface-specific network configuration\n\n\nIf no interface-specific network configuration is present, the general network configuration section is used for all the interfaces.\n\n\nFor more information about the general LibreMesh config file options see The config file page.\n\n\nFor more examples and offline documentation check out /docs/lime-example.txt or http://thisnode.info/docs/lime-example.txt on the router or lime-example file online.\n\n\n\n\nSpecific ethernet interface configuration\n\n\nIf we want to change the default behavior of just one network interface of the many that are present in a router, we can define a specific configuration.\n\n\nPlease make sure to check out how OpenWrt names the physical ports of your router model, for this read the router page accessible from OpenWrt table of hardware.\n\n\nEthernet specific options, multiple allowed\n\nconfig net port5\n\toption linux_name 'eth1.5'\n\tlist protocols 'wan'\n\n\n\nIn this case the eth1.5 interface will be used as WAN (so the DHCP client will be enabled).\n\n\n\n\n\n\n\n\nconfig net\n\nDo not put any \".\" in the section name (e.g. port5).\n\n\nAs linux_name, use the actual name of the interface as the system shows (check with ip link show).\n\n\nSome of the available protocols require the relative package, for example lime-proto-wan, to be installed.\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork interface specific options\n\nAvailable protocols: bmx6, bmx7, batadv, olsr, olsr6, olsr2, bgp, wan, lan, manual, static, babeld, apbb, client\n\n\nNote that some of these protocols will require the relative lime-proto-&#8230;&#8203; package being installed, otherwise the protocol entry will be ignored.\n\n\nproto:vlan_number works too (something like bmx6:13 is supported). If VLAN is 0, no VLAN will be used.\n\n\nVLAN type defaults to 802.1ad, but it can be set to 80.1q adding another option proto:vlan_number:8021q.\n\n\nIf you use manual do not specify other protocols, may result in an unpredictable behavior/configuration.\n\n\n\n\n\n\n\n\n\n\n\n\nWAN autoconfiguration\n\nIf the LibreMesh package lime-hwd-openwrt-wan is installed and your node have two or more ethernet ports,\nLibreMesh might autoconfigure as WAN one of these network ethernet device.\n\n\nIn this case you will find a new specific configuration section like this one:\n\n\n\nconfig net 'lm_hwd_openwrt_wan'\n\toption autogenerated 'true'\n\t...\n\n\n\nIf we want to change the behavior of this specific network interface and stop the automatic rewrite of its configuration, we must set the autogenerated option to false.\n\n\n\n\n\n\n\n\nGround routing configuration\n\n\nFor more information on ground routing concept, check out these resources.\n\n\nGround routing specific sections\n\nconfig hwd_gr link1\n\toption net_dev 'eth0'\n\toption vlan '5'\n\toption switch_dev 'switch0'\n\toption switch_cpu_port '0'\n\tlist switch_ports '4'\n\n\n\n\n\n\n\n\n\nconfig hwd_gr\n\n\n\nnet_dev: Plain ethernet device on top of which 802.1q VLAN will be constructed.\n\n\nvlan: VLAN ID to use for this ground routing link, use little one because cheap switch doesn&#8217;t supports big IDs, this will be used also as 802.1q VID.\n\n\nswitch_dev: These options regarding switch need to be set only if your ethernet device is connected to a switch chip. If the switch exists you can read its name (like switch0) in /etc/config/network file.\n\n\nswitch_cpu_port: Refer to switch port map of your device on OpenWrt ToH to know CPU port index.\n\n\nswitch_ports: List switch ports on which you want the VLAN being passed, refer to OpenWrt ToH for correspondence with physical ports.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne section for each ground routing link.\nWith ground routing we mean setups having LibreMesh on a router which is connected via cable(s), eventually through a switch, to some wireless routers running the original firmware in WDS (transparent bridge) Ap/Sta mode.\nLikely you want to configure as many sections of ground routing with different VLAN numbers or different switch ports as many connected devices in WDS mode.\n\n\n\n\n\n\n\n\nBGP configuration\n\n\nProto BGP specific sections (one section for each BGP peer)\n\nconfig bgp_peer peer1\n\toption remoteIP '192.0.2.6'\n\toption remoteAS '65550'\n\nconfig bgp_peer peer2\n\toption remoteIP '2001:db8::c001'\n\toption remoteAS '65549'\n\n\n\nFor documentation on BGP configuration see this thesis.\n\n\n"}
,{
"location": "/docs/quick_start_guide/en_cli_configuration.html",
"lang": "en",
"title": "CLI configuration",
"content": "\nUntil here we went through the installation, connection and configuration procedures using the LibreMesh web interface.\n\n\nAs in every Linux-based system there&#8217;s the availability of a textual console interface for advanced configuration and hardcore users.\n\n\nThis part of the guide should not be needed for normal LibreMesh use.\n\n\nFlashing Via the Console Interface\n\n\nThis is possible just if you&#8217;re upgrading an existing OpenWrt or LibreMesh installation, not from stock firmware.\n\n\nCopy the downloaded firmware image to the /tmp directory on your target router using the scp command.\n\n\n\n\n\n\n\n\n\nDo not try to copy the firmware image to directories different from /tmp. They have limited memory access.\n\n\n\n\n\n\nIn case the router already has LibreMesh you can do this with\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@thisnode.info:/tmp/\n\n\n\n\n\n\n\n\n\n\nYou could get an error like this:\n/usr/libexec/sftp-server: not found\nConnection closed\nIn this case, you just have to add a -O option to the ssh command, like this:\nscp -O /LOCAL/PATH/TO/BUILD.bin root@thisnode.info:/tmp/\n\n\n\n\n\n\nOtherwise (upgrading from OpenWrt) you will need to insert the router IP address (often 192.168.1.1) in (see above for solving the /usr/libexec/sftp-server: not found error):\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@ROUTERIPADDRESS:/tmp/\n\n\n\nNow connect to the console interface using ssh, if LibreMesh is already running with ssh root@thisnode.info or with ssh root@ROUTERIPADDRESS if OpenWrt is running.\n\n\nThen enter the /tmp directory where the firmware is present with cd /tmp, check the presence of the file with ls and install it with\n\n\n\nsysupgrade -n openwrt-ROUTERMODEL-squashfs-sysupgrade.bin\n\n\n\n\n\n\n\n\n\n\nThe -n option for sysupgrade command is needed for discarding the previous configuration files. Omitting the -n option is never a good idea when flashing LibreMesh.\n\n\n\n\n\n\nFor more information on the sysupgrade process, see these OpenWrt instructions.\n\n\n\n\nConfiguring Via the Console Interface (optional)\n\n\nRather than using the web interface, modifying directly /etc/config/lime-node file allows to access more advanced options but increases the risk of writing broken configuration.\n\n\nYou can use the vim text editor (a short vim guide here) for editing /etc/config/lime-node, the settings in this file will override the community ones in /etc/config/lime-community and the default ones in /etc/config/lime-defaults.\n\n\nYou can find examples and documentation in the /docs/lime-example.txt file (you can find it online here) as well as in /docs/en_config.html[LibreMesh config file] page on this website.\n\n\nAfter saving the edits to the /etc/config/lime-node file, apply the changes to system configuration files launching the lime-config command. Next, reboot the router with reboot &amp;&amp; exit to apply the new settings.\n\n\n"}
,{
"location": "/docs/en_config.html",
"lang": "en",
"title": "Configuration",
"content": "\nIntroduction to the configuration\n\n\nLibreMesh has a configuration system based on the following principles:\n\n\n\n\nBe simple to configure and understand what configurations are in use in each node\n\n\nBased on the idea of shared configurations at Community level with possible customizations per Node\n\n\nMaintainable over time, by firmware updates, adding new nodes in the community, etc.\n\n\nTo be able to make complex configurations.\n\n\n\n\nThe configuration system is fundamental to understand the internal functioning of LibreMesh,\nhowever it is not necessary to understand it before starting a LibreMesh network!\n\n\n\n\nGeek free configuration using the FirstBootWizard\n\n\nIf your community wants to deploy a free geek network it is advisable to do so using the lime-app\nusing the FirstBootWizard. This application simplifies the initial configuration of the nodes and\nallows new nodes to join an existing network, all through a user-friendly interface\nwhich does not require prior knowledge of networks.\n\n\nTo use the FirstBootWizard simply follow the steps on the screen when\nenter http://thisnode.info\n\n\n\n\n\nHowever, if your community is a geek community, then you may not want to use the FirstBootWizard.\n\n\nOnce the network is started using the FBW, the participants can perform some\nconfiguration changes through the lime-app.\nAs needs arise in the community that are not currently met by the\nlime-app network participants will be able to learn how to make these changes through ssh\nor other tools and following the documentation below.\n\n\n\n\nConfiguration for network administrators\n\n\nLibreMesh uses UCI as its configuration, so does OpenWrt.\nUCI is a database that is easily modified both from the command line and by editing the configuration files directly.\nAll UCI configuration files are located in the /etc/config/ directory.\nThe LibreMesh configuration files that can be edited for are: /etc/config/lime-node and /etc/config/lime-community\nAll other configuration files should not be modified.\n\n\n\n\nConfiguration levels Community and Node\n\n\nTo help the community maintain its configs, the configuration of the network nodes\nis structured hierarchically on 3 levels:\n\n\n\n\nNode, /etc/config/lime-node file\n\n\nCommunity, /etc/config/lime-community file\n\n\nDefault, /etc/config/lime-defaults file\n\n\n\n\nWhere the configuration made at the Node level takes priority over the Community and the latter has\npriority over the Default.\nThis way, when most of the nodes share a certain characteristic, it is convenient\nbe configured at the community level and only modified at the Node level in the nodes where that configuration differs.\nThe Default level contains all configuration values at their default value.\n\n\nExample\n\nLet&#8217;s suppose that we want to set the maximum wireless distance from the 2.4GHz nodes in the community\nin 300 meters but in two of the nodes A and B configure it in 1000m. We could do it in the following way:\n\n\nIn the lime-community of all the nodes we would have\n\n\n\nconfig lime 'wifi'\n\t# other options\n\toption distance_2ghz '300'\n\n\n\nAnd in the lime-node files of nodes A and B:\n\n\n\nconfig lime 'wifi'\n\toption distance_2ghz '1000'\n\n\n\n\nOperation\n\nWhen running the lime-config command the first thing that happens is that the Node levels are processed, Community and Default and the /etc/config/lime-autogen file is generated.\nThis file is the one that contains the configuration that is really going to be used by libremesh to configure the system.\n\n\nThe resulting configuration files are then written for each package based on /etc/config/lime-autogen.\nFor the settings to be applied, it is recommended to run reboot after lime-config. While there are faster ways of applying the modifications in certain cases, running reboot is the only way to ensure that all changes were applied.\n\n\n\nList of sections and options\n\nThe configuration is divided into three main sections: system, network and wifi.\n\n\nFor detailed and updated information on all options see the updated reference\nin /docs/lime-example.\n\n\nSystem options\nThe following options in the system section are the most relevant:\n\n\n\nconfig lime system\n\toption hostname 'LiMe-%M4%M5%M6'\n\toption domain 'thisnode.info'\n\n\n\nWe suggest you change the domain thisnode.info to a new subdomain of your community site, for example option domain 'mesh.altermundi.net'. This domain ('mesh.altermundi.net') should be a domain that does not already exist outside the network (i.e. it is a bad idea to use 'altermundi.net'). All clients that get an IP address by DHCP and all network nodes will be assigned a fully qualified domain (e.g. 'lime-ddeeff.mesh.altermundi.net')\n\n\nGeneral network configurations\nOf all the network options, the following are the most relevant\n\n\n\nconfig lime network\n\toption primary_interface 'eth0'\n\toption main_ipv4_address '10.%N1.0.0/16'\n\toption main_ipv6_address '2a00:1508:0a%N1:%N200::/64'\n\tlist protocols ieee80211s\n\tlist protocols lan\n\tlist protocols anygw\n\tlist protocols batadv:%N1\n\n\n\n\n\n\n\n\n\nIPv4 configuration: main_ipv4_address\n\nThere are four possibilities:\n. set a static IP and subnet, e.g. '192.0.2.1/16'\n. parameterize with %Mn and %Nn, and configure the subnet, for example '192.%N1.%M5.%M6/16'.\n. configure a network address (not a specific IP) to obtain an auto-complete IP\nwithin the network from the bits of the MAC. This also works with masks other than\n/24 or /16 as in '192.0.128.0/17'.\n. set two different parameters, the first for the subnet and the second for the IP setting,\nfor example '192.0.128.0/16/17', resulting in a /16 subnet with broadcast domain (192.0.0.0/16) but with the IP of the node\ncalculated in a /17 range (from 192.0.128.0 to 192.0.255.254).\n\n\n\n\n\n\n\n\n\n\n\n\nIPv6 configuration: main_ipv6_address\n\nThe configuration is similar to the max_ipv4_address. If autocompletion is used as a maximum, it completes\nthe last 24 bits, so in this case it is not useful to use a range greater than /104.\n\n\n\n\n\n\n\n\n\n\n\n\nList of protocols\n\nList of protocols configured by LibreMesh. Some of these require the installation of your related package lime-proto&#8230;&#8203;.\nNote that because of the way the list (ICU lists) work, configuring some protocols causes the list to be rewritten\nThe complete set of protocols that is in the values for Default.\nDon&#8217;t worry if there are more protocols defined than you really need: only the protocols corresponding to\ninstalled packages will be used. So for example if the package lime-proto-olsr is not installed then by more\nthat the protocol olsr is listed, it will not be used.\n\n\n\n\n\n\nGeneral WiFi settings\nOf all the network options, the following are the most relevant\n\n\n\nconfig lime wifi\n\toption channel_2ghz '11'\n\tlist channel_5ghz '48'\n\tlist channel_5ghz '157'\n\toption distance_2ghz '100'\n\toption distance_5ghz '1000'\n\tlist modes 'ap'\n\tlist modes 'apname'\n\tlist modes 'ieee80211s'\n\toption ap_ssid 'LibreMesh.org'\n\toption apname_ssid 'LibreMesh.org/%H'\n\toption country 'ES'\n\n\n\n\n\n\n\n\n\nCountry setting: country code\n\nThe default country code is not specified (so the default is usually US),\nbut we strongly recommend that you set it up. If the network is in Spain then the configuration is\noption country 'ES', which also allows the use of channel 13 (permitted in Spain) which is otherwise restricted.\n\n\n\n\n\n\n\n\n\n\n\n\ndistance\n\nThe distance parameter indicates the maximum distance the other nodes or clients can be.\nA very large value decreases the performance but a lower value than necessary results in a\nconnection with a very very bad performance (you often see duplicate packets (DUPs) when pinging).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi options\n\nAny options in the form &lt;mode&gt;_&lt;option&gt; are copied directly to /etc/config/wireless (without the &lt;mode&gt;_ prefix).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi Access point password\n\nTo secure the AP and APname interfaces with WPA2-PSK, add the key 'MySecurePassword' and\nencryption 'psk2' options. For an example see in /docs/lime-example.\n\n\n\n\n\n\n\nSpecific interface configurations\n\nChanging the above options allows us to have a configuration of the whole system.\n\n\nIn cases where different network interfaces must have different configurations, see /docs/lime-example.\n\n\n\nParameterisable options\n\nSome options are parameterizable using a set of special characters that will be\nreplaced by node-specific information.\n\n\n\n\nMAC bytes %Mn refers to the n byte of the MAC address of the main interface.\nFor example from the MAC CA:FF:EE:BA:BB:EE %M1 will be replaced by CA (the first byte of the MAC)\nand %M4 by BA (the fourth byte of the MAC).\n\n\nNetwork Identifier %Nn refers to the n byte of the cloud identifier which is a hash that is calculated\nfrom the SSID of the AP (taken from the content of option ap_ssid &#8230;&#8203;).\n\n\nHostname %H refers to the hostname of the node.\n\n\n\n\n\n\n\nSetting up things not foreseen in LibreMesh\n\n\nIf you want to make a configuration for which LibreMesh does not have an option then\nit is necessary to use generic configs and _lime-assets.\n\n\ngeneric_uci_config\n\nOther files can be configured in /etc/config/ from the lime configuration files using\ngeneric configurations.\n\n\nExample to configure the location of /etc/config/libremap from /etc/config/lime-community:\n\n\n\nconfig generic_uci_config libremap\n    list uci_set \"libremap.settings=libremap\"\n    list uci_set \"libremap.settings.community=our.libre.org\"\n    list uci_set \"libremap.settings.community_lat=-200.123\"\n    list uci_set \"libremap.settings.community_lon=500.9\"\n\n\n\n\nlime-assets\n\nThe lime-assets are files that allow you to make special configurations. These files\nare divided into two groups, those of the node and those of the community. The idea is that the assets of the community\nare shared by all the nodes and allow configurations that are necessary in all the nodes.\nOn the other hand, the files (assets) of the node are designed to make specific configurations in the node.\n\n\ncopy_asset\n\nIf a file is required to be present on the file system you can use the copy_asset directive.\ncopy_asset copies a file from the assets directory to a path defined by the dst option.\n\n\nFor example to configure the collectd program for your community you can create a collectd.conf file.\nin /etc/lime-assets/community/collectd.conf and use it by defining the following settings in the file\nlime-community in the following way:\n\n\n\nconfig copy_asset collectd\n   option asset 'community/collectd.conf'\n   option dst '/etc/collectd.conf'\n\n\n\n\nrun_asset\n\nTo configure LibreMesh to run a script you should use the run_asset option.\nUse this configuration method as a last resort if the other methods are not sufficient.\n\n\nRun_asset` runs a script from the assets directory. The execution can be in the first boot\n(that is, when it starts after a firmware upgrade) using ATFIRSTBOOT or in every\nonce you reconfigure LibreMesh (when you run lime-config) using ATCONFIG.\n\n\nFor example to run the script myscript.sh saved in /etc/lime-assets/community/myscript.sh\non the first boot:\n\n\n\nconfig run_asset a_test_script\n    option asset 'community/myscript.sh'\n    option when 'ATFIRSTBOOT'\n\n\n\n\n\n\n\n\n\n\nThis configuration method replaces the functionality of the uci-defaults scripts.\n\n\n\n\n\n\n\n\n"}
,{
"location": "/docs/en_connecting_nodes.html",
"lang": "en",
"title": "Connecting to LibreMesh nodes",
"content": "\nConnecting to the Web Interface\n\n\nFor opening the web interface of your LibreMesh router, usually is enough to connect to it (either via wireless or via ethernet cable) and opening thisnode.info in a web browser.\n\n\nDoing so will give you access to the web interface, from here you can customize LibreMesh settings or access the OpenWrt configuration interface. We discourage the use of OpenWrt settings sections as this could produce conflicts with LibreMesh configuration mechanisms.\n\n\n\n\nConnecting to the Console Interface\n\n\nIf you need to bypass the web interface and modify the configuration directly, you can connect to the console interface. From here you can use basic Linux commands and edit the configuration files present in the /etc/config/ directory.\n\n\nYou can connect via SSH issuing:\n\n\n\nssh root@thisnode.info\n\n\n\n\n\n\n\n\n\n\nYou could get an error like this: Unable to negotiate with 10.13.0.1 port 22: no matching host key type found. Their offer: ssh-rsa. In this case, you just have to add two options to the SSH command: -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa, like this: ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@thisnode.info\n\n\n\n\n\n\n\n\n\n\n\n\n\nLeaving the LibreMesh router with no administrator password is a security risk! You should set a root password immediately! Either via the web interface of the passwd command in the console.\n\n\n\n\n\n\n\n\nCannot connect?\n\n\nVisit the Troubleshooting page.\n\n\n"}
,{
"location": "/docs/en_quick_starting_guide.html",
"lang": "en",
"title": "Quick Starting Guide",
"content": "\nCompatible Hardware\n\n\nIt is recommended that the router has at least 8 MB of flash memory and 64 MB of RAM. For routers with 4 MB flash memory or 32 MB of RAM, use the special firmware named -mini or compile one yourself excluding some heavy packages (e.g. opkg or the LuCI and lime-app web interfaces).\n\n\nNot all the OpenWrt supported routers work with LibreMesh (at least, not with its default configuration), for a list of the tested hardware, see our hardware page.\n\n\n\n\nGet the Firmware\n\n\nChoose a source for your firmware\n\n\n\nFor the latest stable release with default configuration (e.g. wireless AP name LibreMesh.org) you can use our downloads site (recommended);\n\n\nFor using the latest LibreMesh code, you can compile the firmware on your GNU/Linux computer (or virtual machine) using OpenWrt buildroot as described in the Development page (advanced);\n\n\n\n\nFor more options check the Get It page.\n\n\n\nDownload the correct firmware image\n\nFind the download for your router by name or model. You can find more detailed router model instructions here.\n\n\nIf you are installing for the first time (a router with stock firmware), choose the link ending with -factory.bin. If there&#8217;s no -factory.bin image or you are upgrading an existing install of LibreMesh or OpenWrt, choose the link ending with -sysupgrade.bin.\n\n\n\n\n\nInstallation Procedure\n\n\nOpen your router web interface\n\nUsing an ethernet cable connect to a LAN port on your router. Make sure that the ethernet cable is the only active network interface on your computer (e.g. disable the wireless interface).\n\n\nIf the router is running stock firmware, follow manufacturer instructions to connect to the router. Its IP should be written on the original box or under the router. Usually just opening 192.168.0.1 or 192.168.1.1 in a web browser lets you reach the router web interface. If you can&#8217;t connect to the router because you can&#8217;t find its IP, you can try the IP address of your gateway. For getting it go to the terminal and use netstat -rn (mac), or ip route show default (Linux). More details on finding your router&#8217;s IP can be found here and here.\n\n\nIf the router is running OpenWrt the instructions in the previous paragraph should apply.\n\n\nIf the router is running LibreMesh just opening http://thisnode.info should get you to the web interface.\n\n\nThen you can log in as admin (if unchanged, the username and password will be on the router&#8217;s box, on OpenWrt by default it&#8217;s an empty password).\n\n\nFor more connection options see How to connect to nodes page.\n\n\nIf you suspect you can&#8217;t connect to your router because of a damaged configuration, follow the Troubleshooting guide.\n\n\n\nFlashing\n\n\n\n\n\n\n\n\nFor Ubiquiti AirMax serie routers, flashing on top of AirOS versions 5.6.x will brick your device (the recovery procedure requires opening the router chassis and connecting directly to its serial port). If your router has AirOS 5.6.x, you will have to download an AirOS 5.5.x version (for XM hardware here, for XW hardware here and for TI hardware here) and use it to downgrade your router.\n\n\n\n\n\n\nOnce you&#8217;ve logged in as root or admin in your router, reach the firmware upgrade page.\n\n\n\n\n\n\n\n\n\nIf there&#8217;s a Keep Settings option, take care to UNCHECK it. It is checked by default on OpenWrt.\n\n\n\n\n\n\nUpload the firmware image file you&#8217;ve downloaded and click Flash Image. Wait a couple of minutes for the process to complete. Reconnect to the ethernet interface (for getting the new IP) and open http://thisnode.info.\n\n\nCongratulations, you have a working LibreMesh router!\n\n\n\n\n\nConnect to Your LibreMesh Router\n\n\nJust connect to the router via its wireless AP interface or via ethernet cable on its LAN port and open http://thisnode.info in the web browser.\n\n\n\n\n\n\n\n\n\nIf is the first time you connect to the router, you will have to set an admin/root password. Leaving a LibreMesh router with no admin password is a huge security risk.\n\n\n\n\n\n\nFor more connection options see How to connect to nodes page.\n\n\nIf you suspect you can&#8217;t connect to your router because of a damaged configuration, follow the Troubleshooting guide.\n\n\n\n\nShare the Internet Connection with the LibreMesh Network\n\n\nLibreMesh is automatically sharing with the rest of the mesh network any internet connection is connected to the router WAN port. There&#8217;s no problem if more than one internet gateway is connected to the LibreMesh network, likely the one closest to the client will be used.\n\n\nIf the LibreMesh router has no WAN port (just LAN ports, or just one ethernet port), one of the ethernet ports has to be configured as WAN port in order to share the internet connection. Refer to next section for configuration.\n\n\n\n\nConfiguration\n\n\nRefer to the LibreMesh config file page and to /docs/lime-example.txt file for detailed information.\n\n\n"}
,{
"location": "/docs/en_troubleshooting.html",
"lang": "en",
"title": "Troubleshooting",
"content": "\nUnable to establish Ethernet connection\n\n\nIf you can&#8217;t connect to the LibreMesh router as indicated in How to connect to LibreMesh nodes opening http://thisnode.info you can try other ways.\n\n\nFirst thing: wait 5 minutes\n\nAfter powering up the router, up to 5 minutes can be needed for bringing up all the services including the DHCP server needed for receiving an IP when connecting. This is a known bug.\n\n\n\nDo not use custom DNS servers\n\nFor using the http://thisnode.info address, the Domain Name System server have to be the one from the LibreMesh router you&#8217;re connecting to. Contrariwise, a fixed external DNS server would not recognize http://thisnode.info as an existing domain.\n\n\n\nVerify the physical connection\n\nIf you are connecting by cable:\n\n\n\n\ndisconnect from any other network (e.g. wireless);\n\n\nverify that the cable is well plugged and that the ethernet LED are blinking on the router and on the computer port;\n\n\nverify that you&#8217;re connected to a LAN port on the router (or main) not to a WAN one (or secondary);\n\n\nuse a good quality cable, with intact connector, avoid half-duplex cables (with just 4 wires, low quality);\n\n\nverify that the network manager on your computer is actually trying to connect by this cable;\n\n\nif the network manager is down or not installed (very unlikely, every operating system has one enabled by default), connect activating the ethernet interface. Refer to your operating system documentation for detailed instructions. Using Linux terminal can be done with sudo ip link set dev eth0 up for activating the interface, eth0 could be named differently, like enp0s25 on your system, check with ip link show. Check next section on how to obtain an IP for this connection.\n\n\n\n\nIf you are connecting by wireless:\n\n\n\n\ndisconnect from any other network (e.g. ethernet cable);\n\n\ncheck that the wireless physical switch is ON both on the LibreMesh router and on the computer;\n\n\nverify that the network manager on your computer is actually trying to connect to the wireless network named as your network community (with default configuration is LibreMesh.org) or on the \"named AP\" (with default configuration is something like LibreMesh.org/abc123), connecting to the LiMe wireless SSID is not going to work as is used just for meshing;\n\n\nif the network manager is down or not installed (very unlikely, every operating system has one enabled by default) just install one or enable the existing one. Connecting manually is doable on Linux, easy only if the AP is open, not WPA, with sudo ip link set dev wlan0 up; sudo iw dev wlan0 connect &lt;your router ESSID&gt; the ESSID could be your community network name or the default LibreMesh.org, wlan0 could be named differently, like wlp3s0 on your system, check with ip link show. Check next section on how to obtain an IP for this connection.\n\n\n\n\n\nVerify the IPv4 connection\n\nOnce the physical layer is set (the previous section), you can try to connect the normal way (opening http://thisnode.info). If it does not work, before following with the next steps it&#8217;s needed to check if the LibreMesh router actually gave to our computer/smartphone an IPv4 to use for communicating on the network.\n\n\nEvery network manager on every operating system should request for an IPv4 to the LibreMesh router, acting as a so-called DHCP client.\n\n\nThe received local private IPv4 can be found following this guide for most operating systems. An additional method via Linux terminal is launching the command ip -4 address show scope global. The local private IP will look something like 10.13.123.123.\n\n\nOn the Linux terminal there&#8217;s the possibility to ask manually for an IPv4 with the commands sudo dhclient -x; sudo dhclient or sudo dhcpcd -x; sudo dhcpcd.\n\n\nIf no such address coming from the LibreMesh router can be encountered, or there&#8217;s only a Zeroconf IP starting with 169.254.x.x, means that the DHCP server on the router is not working (be sure to wait 5 minutes after the power up of the router, as explained above, and try connecting again) or the DHCP client on your computer/smartphone is not working. Make sure to verify the physical connection as described above, specifically make sure to connect to a LAN port on the router and not to a WAN port. In this case the method described on the next section \"Connect using gateway IPv4\" is not applicable, while the other methods should work anyway.\n\n\n\nConnect using gateway IPv4\n\nIf trying to connect to http://thisnode.info (as explained in normal connection procedure) does not work AND an IPv4 was received for your computer/smartphone from the gateway as described in section Verify the IPv4 connection, you can take your gateway (default route) IPv4 address and connect to it. The address to use in not the one discovered in the previous section.\n\n\nWhen you&#8217;re physically (either via ethernet cable or via wireless) connected to the router and you receive an IPv4 from it, you receive also the IPv4 direction of the gateway (default route). Please take care to disconnect from any other wireless or wired networks, otherwise a wrong gateway IPv4 can be obtained.\n\n\nFor obtaining the gateway direction using a Windows, Mac or Linux computer or Android smartphone refer to this guide.\n\n\nIf the above guide does not work for you and you&#8217;re on a Linux computer, the gateway (default route) IPv4 can be obtained using the terminal: open a terminal (open your Linux distro menu, type \"terminal\" and select the first result) and execute the command\n\n\n\nip -4 route show scope global\n\n\n\nThe output should be similar to: default via 10.13.0.1 dev enp0s0 proto static metric 100 so in this example our gateway IPv4 is 10.13.0.1. In case the output was instead command not found: ip you can find the same information using the older commands route -n | grep G or netstat -nr | grep G.\n\n\nThe obtained IPv4 is not relative of a specific LibreMesh router, indeed, because of a feature called anygw this IPv4 is common for all the routers. In our case this doesn&#8217;t matter because we just want connect to the directly connected one and this will work as expected.\n\n\nFor example let&#8217;s use 10.13.0.1 as the gateway address. You can open the IPv4 direction inserting it directly in the URL bar of the browser (not in the search bar): http://10.13.0.1\n\n\nIf we can&#8217;t access the web interface (can happen if we installed a LibreMesh version without web interface), we can try connecting via SSH:\n\n\n\nssh root@10.13.0.1\n\n\n\nIf no root password was set and the password login was not disabled by the network-profile, a blank password access is granted, otherwise the router root password is prompted.\n\n\n\n\n\n\n\n\n\nYou could get an error like this: Unable to negotiate with 10.13.0.1 port 22: no matching host key type found. Their offer: ssh-rsa. In this case, you just have to add two options to the SSH command: -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa, like this: ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@10.13.0.1\n\n\n\n\n\n\n\nDiscover IPv4 of your router\n\nDo this only if the section Verify the IPv4 connection instructions failed and so the easy Connect using the gateway IPv4 is not a valid way. For following this specific way you likely need a Linux computer.\n\n\nInstall netdiscover package from your Linux distro repositories. Make sure to have a proper physical connection, re-read Verify the physical connection and disconnect from any other network. Run sudo netdiscover -f. Some IPv4 similar to 10.13.0.1 should appear. Add an IPv4 to your computer network interface used for connecting with the first three fields of the IP identical to the router one and the fourth different, for example 10.13.0.2 with netmask 255.255.255.0 or /24. Connect to the router inserting its IP in the browser or via SSH.\n\n\n\nConnect using IPv6 link local\n\nIn case neither the normal connection procedure to http://thisnode.info nor the gateway IPv4 (as explained in Connect using gateway IPv4) are working for connecting to your node, you can use IPv6 link local.\n\n\nThis works even if no IPv4 was received from the gateway, as checked in section \"Verify the IPv4 connection\". Likely this works only on Linux, maybe also on Macintosh.\n\n\nEach working network interface in your Linux system have a special IPv6 address configured automatically by the Kernel.\nThese are named IPv6 link-local and are inside the special prefix fe80::/10\nThe scope of these IPs is to communicate computers which are in the same collision domain, so translated to LibreMesh it would be the layer2 cloud.\n\n\nIf on Linux you use NetworkManager, you may create a custom profile to avoid its intervention on the ethernet interface without having to stop it:\n\n\n\n\nRight click the NetworkManager applet\n\n\nEdit connections &#8594; Add &#8594; Select Ethernet\n\n\nGive it any name you desire, such as eth0 manual\n\n\nGeneral tab: deselect Automatic connect\n\n\nIPv4 tab: select Disabled\n\n\nIPv6 tab: select Link-Local only\n\n\n\n\nFinally switch on your router and connect to it using an ethernet cable from its LAN port (WAN should also work) to the ethernet port of your computer, and select the new NetworkManager profile eth0 manual.\n\n\nAn alternative to create a NetworkManager profile is to stop it with sudo systemctl stop NetworkManager.service and bring up the network interface manually with sudo ip link set dev eth0 up (eth0 could be named differently, check with ip link show).\n\n\nThen, how to discover the IPv6 link local address of the router we&#8217;re connected to?\n\n\nUsing ICMPv6 we can discover machines in our network thanks to the special Multicast address \"ff02::\".\nTo discover all the devices we can use the next command (using ping6 or ping depending on your Linux distro) where the appended %eth0 specifies which network interface to use (could be something like eth0 or enp0s25, you can see the interface names with the commands ip link show or ifconfig):\n\n\n\nping6 -v ff02::1%eth0\n\n\n\nor just\n\n\n\nping -v ff02::1%eth0\n\n\n\nThen each device connected to our collision domain, will reply the ICMP request with its own IPv6 link-local address.\n\n\nThe first answer to each ping usually is your own ethernet interface (you can see your own IPv6 link local address with ip -6 address show scope link) while the ones marked with DUP! are the connected devices, the first one is the fastest to answer, so the one you&#8217;re directly connected to. You can more or less recognize the routers IPv6 link local addresses comparing them with the final part of their physical MAC address (printed on the router label), which should be similar.\n\n\nThe router direction is a combination of the router&#8217;s IPv6 address, %, and your ethernet interface name. It should be something like fe90::aa20:66ff:fe4f:ae87%eth0. Do not include a trailing : or other text from the ping responses.\n\n\nNow that you have the target IPv6 link local you can connect to the router:\n\n\n\n\nTry connecting via ssh: ssh root@fe90::aa20:66ff:fe4f:ae87%eth0. Remember to include both root@, otherwise it will attempt to connect using your personal username, and %eth0 (or whatever is the name of the interface you used for connecting, you can see all interface names with ip link show).\n\n\nIf there&#8217;s not yet a root password set on the router and the password access was not disabled by the network-profile, a blank password access is granted.\n\n\nOtherwise try all the router root passwords you remember.\n\n\nIf neither work, and you already tried with all the other methods, likely you will have to reflash your router (e.g. using TFTP) or to reset using OpenWrt failsafe mode (this last procedure could ask for the password anyway if this was set in the network-profile during compilation of the installation image).\n\n\n\n\nIf you managed to connect via ssh you can also copy files on the router using IPv6 link local and scp (for copying big files like firmware images use the /tmp directory as a destination):\n\n\n\nscp LiMe-fw-sysupgrade.bin root@\\[fe80::a2f3:c1ff:fe39:1cea%eth0\\]:/tmp/\n\n\n\nYou could get an error like this:\n\n\n\nash: /usr/libexec/sftp-server: not found\nscp: Connection closed\n\n\n\nIn this case, you just have to add a -O option to the ssh command, like this:\n\n\n\nscp -O LiMe-fw-sysupgrade.bin root@\\[fe80::a2f3:c1ff:fe39:1cea%eth0\\]:/tmp/\n\n\n\nfor more details, see here.\n\n\nClick here for downloading Pau&#8217;s script which check if there is some router attached to your network device and in case, try to connect to it.\nIf there are not routers it waits until some appears.\n\n\nAn example of execution:\n\n\n\np4u@nomada:~$ ./disc6 eth1\n\n\n\n\n\n\nStill no access possible (e.g. access password lost)\n\n\nIf you tried all the instructions above without success, we suggest to ask for help via our contacts before trying anything else.\n\n\nThese situations of non-responsivity can arise from bad manual configurations and customizations (network-profile) or bad images being flashed or incompatible router model.\n\n\nIf you feel confident enough, you can try to boot your router in OpenWrt failsafe mode or to re-flash it using low level procedures e.g. TFTP (if available) or serial connection (risky) or other recovery procedures you can find on your router&#8217;s specific page.\n\n\nRecover from bad configurations with Failsafe mode\n\nFailsafe mode enables you to recover from bad configurations without much trouble. Learn how to access Failsafe mode here or on the specific router page in OpenWrt table of hardware. If you&#8217;re trying to reset the router after forgetting the password, this procedure could ask for the password anyway in case this was set in the network-profile during compilation of the installation image.\n\n\nThe generic procedure is to start pressing repeatedly the router reset button during the boot, the LEDs should start blinking and failsafe mode activated instead of normal boot.\n\n\nOnce in failsafe, connect by ethernet cable or by wireless to the router and try to connect to it as if was a freshly flashed LibreMesh router as explained in the connection procedure on this site. If that does not work, try connecting to 192.168.1.1 or 10.13.0.1 (the IP could be even different if you flashed an image compiled with the preset configuration from your community) inserting the http://192.168.1.1 or http://10.13.0.1 direction in the URL bar of the browser or via SSH:\n\n\n\nssh root@192.168.1.1\nssh root@10.13.0.1\n\n\n\nIf an error like Unable to connect or No route to host is obtained, likely you will have to set an IP for your computer, for example 192.168.1.2 or 10.13.0.2, before attempting to connect again. For setting an IP to your computer under Windows follow this guide, under Mac this guide, under Linux this guide and under Android this guide.\n\n\nIf you still cannot connect, make sure you are pressing the reset button at the right time, as explained in this guide. Then, if the problem persists, it&#8217;s likely that the IP is the one customized by your community (e.g. 10.XXX.0.1) so you can ask any member of your community or find it following the instructions above.\n\n\n\nRe-flashing via TFTP\n\nWhen the aforementioned connection procedures don&#8217;t work and Failsafe mode doesn&#8217;t help, likely we will have to reinstall a firmware image. As the normal way to reinstall, explained in Quick Starting Guide likely is not going to work, we can try communicating directly with the router bootloader. The bootloader is a tiny piece of software that never gets modified when flashing OpenWrt/LibreMesh and includes recovery functions. Usually it includes a TFTP (Trivial File Transfer Protocol) service, either server (e.g. on Ubiquiti routers) or client (e.g. on TP-Link routers), which can be activated keeping the reset button pressed for 10 seconds while plugging the router power cord (in Ubiquiti routers the success of this operation is confirmed by a nice blinking pattern of the LEDs) or is active for a short time after plugging the router (in some old Linksys routers). For specific instructions about how to activate the TFTP server or client in each router refer to OpenWrt table of hardware.\n\n\nProcedure for routers with a TFTP server\n\nAlways read the OpenWrt table of hardware before attempting this procedure.\n\n\nTo prepare for a TFTP flashing procedure:\n\n\n\n\ninstall a TFTP client on your PC, on Linux distros usually the package is named tftp-hpa;\n\n\nconnect your PC via an ethernet cable to a LAN ethernet port on the unpowered router;\n\n\nuse the connection manager of your PC to disconnect from any interface other than ethernet cable (e.g. wireless);\n\n\nset up a profile for the ethernet interface with a manual IPv4, suggested configurations are IPv4 192.168.1.2, netmask 24, broadcast domain 255.255.255.0, gateway (not really needed) 192.168.1.1;\n\n\nopen a terminal and using the command cd enter the directory where you downloaded the image to flash;\n\n\nissue the command tftp 192.168.1.1 which will open TFTP for connecting to 192.168.1.1 that is the most common router IP address in TFTP recovery mode;\n\n\nin tftp execute the commands binary that sets the mode of transfer, trace on which enables a clearer output, rexmt 1 which specifies the retransmission timeout, timeout 60 which sets the total transmission timeout;\n\n\nthen enable the TFTP recovery mode in your router, depending on the specific model procedure;\n\n\nexecute in TFTP the command put &lt;place here the name of the file -factory.bin&gt;;\n\n\nthe output should be a long list of chunks being transferred;\n\n\nwait 5 minutes for the flashing to be complete and reboot the router.\n\n\n\n\nWe recommend to follow these instructions only after verifying the goodness of it for the specific device to recover.\n\n\n\nProcedure for routers with a TFTP client\n\nIn this case, the procedure can change by a wider extent so that the router-specific instructions need to be followed as reported on OpenWrt table of hardware.\n\n\n\n\nSerial connection\n\nRecovery through serial connection can be completely different from router to router and highly esoteric. A lot of digging into any form of human knowledge is suggested before attempting to recover a router this way.\n\n\n\n"}
,{
"location": "/docs/en_vim-guide.html",
"lang": "en",
"title": "A very short Vim tutorial",
"content": "\nVim is an extremely powerful console editor based on a clever idea:\nthe keyboard keys can be used both for normal typing (Insert mode) and for\nediting actions (Command mode).\n\n\nYou just have to remember that there are these two modes of operation\nand how to switch between them!\n\n\nTo switch from Command mode to Insert mode you press\n\n\n\n\ni (to type where the cursor is) or\n\n\no (to create a new line).\n\n\n\n\nTo switch from the Insert mode to the Command mode you press [Escape].\n\n\nAt the Command mode you can\n\n\n\n\nnavigate with the arrows\n\n\ndelete with x and X\n\n\nsearch with /\n\n\n\n\nTo exit saving the file, enter the Command mode pressing [Escape] and type :wq. To exit without saving enter Command mode and press :q!.\n\n\nAll will become clear if you type the following on a terminal:\nvim hello.txt&lt;Enter&gt;ihello world&lt;Escape&gt;onew line&lt;Escape&gt;:wq&lt;Enter&gt;cat hello.txt&lt;Enter&gt;\n\n\nThat&#8217;s all!\n\n\nDiscover more\n\n\nhttps://www.tutorialspoint.com/unix/unix-vi-editor.htm\n\n\n"}
,{
"location": "/docs/es_config.html",
"lang": "es",
"title": "Configuración",
"content": "\nIntroducción a la configuración\n\n\nLibreMesh tiene un sistema de configuración basado en los siguienes principios:\n\n\n\n\nSer simple de configurar y entender qué configuraciones están en uso en cada nodo\n\n\nBasado en la idea de configuraciones compartidas a nivel Comunidad con customizaciones posibles por Nodo.\n\n\nMantenible en el tiempo, por actualizaciones de firmware, agregar nuevos nodos en la comunidad, etc.\n\n\nPoder realizar configuraciones complejas.\n\n\n\n\nEl sistema de configuración es fundamental para entender el funcionamiento interno de LibreMesh,\nsin embargo no es necesario entenderlo antes de empezar una red LibreMesh!\n\n\n\n\nConfiguración geek free usando el FirstBootWizard\n\n\nSi tu comunidad quiere desplegar una red geek free es recomendable hacerlo usando la lime-app\nutilizando el FirstBootWizard. Esta aplicación simplifica la configuración inicial de los nodos y\npermite a nuevos nodos sumarse a una red existente, todo a travez de una interfaz amigable\nque no requiere conocimientos previos de redes.\n\n\nPara utilzar el FirstBootWizard simplemente sigue los pasos que aparecen en pantalla al\nentrar en http://thisnode.info\n\n\n\n\n\nEn cambio si tu comunidad es una comunidad de geeks entonces quizas no quieran utilizar el FirstBootWizard.\n\n\nUna vez iniciada la red utilizando el FBW les participantes pueden realizar algunos\ncambios de configuración a travez de la lime-app.\nA medida que vayan surgiendo necesidades en la comunidad que no se cubran actualmente con la\nlime-app les participantes de la red podrán aprender a realizar estos cambios a travez de ssh\nu otras herramientas y siguiendo la documentación a continuación.\n\n\n\n\nConfiguración para administradores de red\n\n\nLibreMesh utiliza a UCI como sistema de\nconfiguración ya que UCI es tambien es utilizado por OpenWrt.\nUCI es una base de datos de que es\nfacilmente modificable tanto desde línea de comandos como editando los archivos de configuración directamente.\nTodos los archivos de configuración de UCI se encuentran en el directorio /etc/config/.\nLos archivos de configuración de LibreMesh que pueden ser editados para son: /etc/config/lime-node y\n/etc/config/lime-community.\nEl resto de los archivos de configuración no deben ser modificados.\n\n\n\n\nNiveles de configuración Comunidad y Nodo\n\n\nPara ayudar a la comunidad a mantener sus configuraciones, la configuración de los nodos de la red\nse estructura jerarquicamente en 3 niveles:\n\n\n\n\nNodo, archivo /etc/config/lime-node\n\n\nComunidad, archivo /etc/config/lime-community\n\n\nDefecto, archivo /etc/config/lime-defaults\n\n\n\n\nDonde la configuración realizada a nivel de Nodo toma prioridad por sobre Comunidad y esta  a su\nvez tiene prioridad por sobre el Defecto.\nDe esta forma cuando la mayoria de los nodos comparten cierta caracteristica la misma conviene\nconfigurarse a nivel comunidad y solo modificarla en el nivel de Nodo en los nodos donde esa configuración difiere.\nEl nivel Default contiene todos los valores de configuración en su valor por defecto.\n\n\nEjemplo\n\nSupongamos que queremos configurar la distancia máxima wireless de los nodos de 2.4GHz de la comunidad\nen 300 metros pero en dos de los nodos A y B configurarla en 1000m. Lo podríamos hacer de la siguiente forma:\n\n\nEn lime-community de todos los nodos tendriamos:\n\n\n\nconfig lime 'wifi'\n\t# other options\n\toption distance_2ghz '300'\n\n\n\nY en los archivos lime-node de los nodos A y B:\n\n\n\nconfig lime 'wifi'\n\toption distance_2ghz '1000'\n\n\n\n\nFuncionamiento\n\nAl correr el comando lime-config lo primero que sucede es que se procesan los niveles Nodo,\nComunidad y Default y se genera el archivo /etc/config/lime-autogen.\nEste archivo es el que contiene la configuración que realmente va a utilizarse por libremesh para configurar el sistema.\n\n\nLuego se escriben los archivos de configuración resultantes para cada paquete en base a /etc/config/lime-autogen\nPara que las configuraciones se apliquen, es recomendable correr reboot luego de lime-config. Si bien hay formas más rápidas\nde aplicar las modificaciones en ciertos casos, correr reboot es la única que asegura que todos los cambios se aplicaron.\n\n\n\nLista de secciones y opciones\n\nLa configuración se divide en tres secciones principales: system, network y wifi.\n\n\nPara tener información detallada y actualizada de todas las opciones ver la referencia actualizada\nen /docs/lime-example.\n\n\nOpciones de sistema\nLas siguientes opciones de la seccion system son las más relevantes:\n\n\n\nconfig lime system\n\toption hostname 'LiMe-%M4%M5%M6'\n\toption domain 'thisnode.info'\n\n\n\nTe sugerimos que cambies el dominio thisnode.info a un nuevo subdominio del sitio de tu comunidad, por ejemplo option domain 'mesh.altermundi.net'. Este dominio ('mesh.altermundi.net') debe ser un dominio que no exista ya afuera de la red (i.e. es una mala idea usar 'altermundi.net'). A todos los clientes que obtienen una dirección IP por DHCP y a todos los nodos de la red se le asignará un fully qualified domain (ej. 'lime-ddeeff.mesh.altermundi.net')\n\n\nConfiguraciones generales de red\nDe todas las opciones de red las más relevantes son las siguientes:\n\n\n\nconfig lime network\n\toption primary_interface 'eth0'\n\toption main_ipv4_address '10.%N1.0.0/16'\n\toption main_ipv6_address '2a00:1508:0a%N1:%N200::/64'\n\tlist protocols ieee80211s\n\tlist protocols lan\n\tlist protocols anygw\n\tlist protocols batadv:%N1\n\n\n\n\n\n\n\n\n\nConfiguración IPv4: main_ipv4_address\n\nHay cuatro posibilidades:\n\n\n\n\nconfigurar una IP y subnet estática, por ejemplo '192.0.2.1/16'\n\n\nparametrizar con %Mn y %Nn, y configurar la subnet, por ejemplo '192.%N1.%M5.%M6/16'\n\n\nconfigurar un dirección de red (no una IP en especifico) para obtener una IP autocompletada\ndentro de la red a partir de los bits de la MAC. Esto tambien funciona con máscaras distintas de\n/24 or /16 como '192.0.128.0/17'\n\n\nconfigurar dos parámetros distintos, el primero para la subnet y el segundo para la parametrización de la IP,\npor ejemplo '192.0.128.0/16/17', resultando en una subnet /16  con dominio de broadcast (192.0.0.0/16) pero con la IP del nodo\ncalculada en un rango /17 (desde la 192.0.128.0 a la 192.0.255.254).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguración IPv6: main_ipv6_address\n\nLa configuración es similar a la main_ipv4_address. Si se usa autocompletado como máximo se completan\nlos ultimos 24 bits, por lo que en este caso no es útil usar un rango mayor a /104.\n\n\n\n\n\n\n\n\n\n\n\n\nLista de protocolos: list protocols\n\nListado de protocolos configurados por LibreMesh. Algunos de estos require la instalación de su paquete relacionado lime-proto-&#8230;&#8203;.\nNotar que por como funcionan las list (listas de UCI) configurar algunos protocolos hace que se reescriba la lista\ncompleta de protocolos que está en los valores por Defecto.\nNo te preocupes si hay mas protocolos definidos que los que realmente necesitas: solamente los protocolos correspondientes a los\npaquetes instalados se van a utilizar. Entonces por ejemplo si el paquete lime-proto-olsr no está instalado entonces por mas\nque en la lista esté el protocolo olsr el mismo no será usado.\n\n\n\n\n\n\nConfiguraciones generales WiFi\nDe todas las opciones de red las más relevantes son las siguientes:\n\n\n\nconfig lime wifi\n\toption channel_2ghz '11'\n\tlist channel_5ghz '48'\n\tlist channel_5ghz '157'\n\toption distance_2ghz '100'\n\toption distance_5ghz '1000'\n\tlist modes 'ap'\n\tlist modes 'apname'\n\tlist modes 'ieee80211s'\n\toption ap_ssid 'LibreMesh.org'\n\toption apname_ssid 'LibreMesh.org/%H'\n    option country 'ES'\n\n\n\n\n\n\n\n\n\nConfiguración de país: country code\n\nEl código de país por defecto no viene especificado (entonces por lo tanto el defecto suele ser US),\npero recomendamos encarecidamente que lo configuren. Si la red se encuentra en España entonces la configuración es\noption country 'ES', lo que además permite el uso del canal 13 (permitido en España) que de otra forma está restringido.\n\n\n\n\n\n\n\n\n\n\n\n\ndistance\n\nEl parámetro distance indica la máxima distancia a la que pueden estar los otros nodos o clientes.\nUn valor muy grande disminuye el rendimiento pero un valor inferior al necesario resulta en una\nconección con un rendimiento muy muy malo (suelen verse paquetes duplicados (DUPs) al hacer ping).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi options\n\nCualquier opción en la forma &lt;mode&gt;_&lt;option&gt; se copia directamente a /etc/config/wireless (sin el prefijo &lt;mode&gt;_).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi Password de puntos de acceso\n\nPara segurizar con WPA2-PSK las interfaces AP y APname, agrega las opciones key 'MiPasswordSeguro'\ny encryption 'psk2'. Para un ejemplo ver en /docs/lime-example.\n\n\n\n\n\n\n\nConfiguraciones de interfaz especificas\n\nCambiar las opciones antes mencionadas nos permite tener una configuración de todo el sistema.\n\n\nEn los casos en los que diferentes interfaces de red deben tener configuraciones diferentes, véase /docs/lime-example.\n\n\n\nOpciones parametrizables\n\nAlgunas opciones son parametrizables usando un conjunto de caracteres especiales que serán\nreemplazados por información específica del nodo.\n\n\n\n\nMAC bytes %Mn se refiere a el byte n de la dirección de MAC de la interfaz principal.\nPor ejemplo de la MAC CA:FF:EE:BA:BB:EE %M1 se reemplazará por CA  (el prime byte de la MAC)\ny %M4  por BA (el cuarto byte de la MAC).\n\n\nNetwork Identifier %Nn refiere al byte n del identificador de la nube que es un hash que se calcula\na partir del SSID del AP (tomado del contenido de option ap_ssid &#8230;&#8203;).\n\n\nHostname %H se refiere al hostname del nodo.\n\n\n\n\n\n\n\nConfigurando cosas no previstas en LibreMesh\n\n\nSi se quiere realizar una configuración para la cual LibreMesh no tiene una opción entonces\nes necesario usar configuraciones genéricas y lime-assets.\n\n\nConfiguraciones genéricas: generic_uci_config\n\nSe puede configurar otros archivos en /etc/config/ desde los archivos de configuración de lime usando\nconfiguraciones genéricas.\n\n\nEjemplo para configurar la localización de /etc/config/libremap desde /etc/config/lime-community:\n\n\n\nconfig generic_uci_config libremap\n    list uci_set \"libremap.settings=libremap\"\n    list uci_set \"libremap.settings.community=our.libre.org\"\n    list uci_set \"libremap.settings.community_lat=-200.123\"\n    list uci_set \"libremap.settings.community_lon=500.9\"\n\n\n\n\nLos lime-assets, archivos para configuraciones especiales\n\nLos lime-assets son archivos que permiten realizar configuraciones especiales. Estos archivos\nse dividen en dos grupos, los del nodo y los de la comunidad. La idea es que los assets de la comunidad\nsean compartidos por todos los nodos y permitan realizar configuraciones que son necesarias en todos los nodos.\nEn cambio los archivos (assets) del nodo están pensados para realizar configuraciones especificas en el nodo.\n\n\nDefiniendo archivos: copy_asset\n\nSi se precisa que un archivo esté presente en el sistema de archivos puedes usar la directiva copy_asset.\ncopy_asset copia un archivo desde el directorio de assets hacia una ruta definida por la opción dst.\n\n\nPor ejemplo para configurar el programa collectd para tu comunidad puedes crear un archivo collectd.conf\nen /etc/lime-assets/community/collectd.conf y usarlo definiendo la siguiente configuración en el archivo\nlime-community de la siguiente manera:\n\n\n\nconfig copy_asset collectd\n   option asset 'community/collectd.conf'\n   option dst '/etc/collectd.conf'\n\n\n\n\nEjecutando scripts: run_asset\n\nPara configurar a LibreMesh para que se ejecute un script se debe usar  la opción run_asset.\nUsar este método de configuración como último recurso si los otros métodos no son suficientes.\n\n\nrun_asset ejecuta un script del directorio de assets. La ejecución puede ser en el primer booteo\n(o sea, cuando inicia luego de realizarse un upgrade de firmware) usando ATFIRSTBOOT o en cada\nvez que se reconfigura LibreMesh (cuando se ejecuta lime-config) usando ATCONFIG.\n\n\nPor ejemplo para ejecutar el script myscript.sh guardado en /etc/lime-assets/community/myscript.sh\nen el primer booteo:\n\n\n\nconfig run_asset a_test_script\n    option asset 'community/myscript.sh'\n    option when 'ATFIRSTBOOT'\n\n\n\n\n\n\n\n\n\n\nEste método de configuración reemplaza la funcionalidad de los scripts uci-defaults.\n\n\n\n\n\n\n\n\n"}
,{
"location": "/es_development.html",
"lang": "es",
"title": "Desarrollo",
"content": "\nCódigo Fuente\n\n\nEl código fuente se encuentra almacenado en un árbol de git que contiene todas las ramas y lanzamientos.\n\n\nTodos los repositorios se pueden consultar a través de\nGitHub.\n\n\nLa mayor parte del desarrollo se concentra en el repositorio de lime-packages el cual puede ser consultado en\n GitHub o descargardo usando git:\n\n\n\ngit clone https://github.com/libremesh/lime-packages.git\ncd lime-packages\n\n\n\n\n\nCompilando el código fuente de LibreMesh\n\n\nEste procedimiento ha sido probado en GNU/Linux, en otros sistemas podria requerir algunas modificaciones o se puede ejecutar en una maquina virtual de Linux.\nGeneralmente la primera compilación puede tomar algunas horas y requiere al menos 10GB de espacio disponbile en disco.\n\n\nAntes de iniciar a compilar OpenWrt necesitas instalar algunos paquetes en tu sistema.\n\n\nSi no estas seguro(a) sobre si tu sistema tiene las  dependencias ya instaladas, puedes continuar con la compilación (ver más abajo) y si falla,\nverifica los mensajes de error.\n\n\nEn un sistema Ubuntu, el siguiente comando instalará las dependencias minimas de compilación:\n\n\n\nsudo apt update\nsudo apt install --no-install-recommends git ca-certificates subversion wget make gcc g++ libncurses5-dev gawk unzip file patch python3-distutils python3-minimal python2-minimal libpython2-stdlib\n\n\n\nPara otras distribuciones de Linux la lista de paquetes podría ser ligeramente direferente, revisa la\npágina de instalación del sistema de compilación de OpenWrt.\n\n\nAhora necesitas obtener el código fuente de OpenWrt.\nAsegurate de clonar (git clone) el código fuente como usuario normal (por ejemplo: no usar root): la compilación será rechazada si se ejecuta\nsiendo usuario administrador root.\n\n\nDescargar el código fuente de OpenWrt\nLibreMesh se puede compilar sobre varias versiones de OpenWrt. Damos soporte oficialmente a la compilación con la versión anterior estable de OpenWrt (18.06.8) o\nla versión estable de OpenWrt (19.07.4)\n\n\nPara compilar LibreMesh sobre la versión anterior estable de OpenWrt:\n\n\n\ngit clone -b v18.06.8 --single-branch https://git.openwrt.org/openwrt/openwrt.git\n\n\n\nDe manera alternativa, para compilar LibreMesh sobre la versión Estable de OpenWrt:\n\n\n\ngit clone -b openwrt-19.07 --single-branch https://git.openwrt.org/openwrt/openwrt.git\n\n\n\nEntrar al directorio de compilación de OpenWrt\n\ncd openwrt\n\n\n\n\n\n\n\n\n\n\nSi necesitas incluir un archivo en la imagen compilada, por ejemplo un archivo de configuración personalizado, crea aqui un directorio files\nque contenga la estructura de directorio y archivos que quieras agregar. Por ejemplo: mkdir -p files/etc/config/; touch files/etc/config/lime-community\ny editar el archivo recien creado lime-community incluyendo el contenido personalizado.\nVer más instrucciones en la\n Wiki de OpenWrt.\n\n\n\n\n\n\nTomar los repositorios feeds por defecto de OpenWrt\n\ncp feeds.conf.default feeds.conf\n\n\n\nY agregar los repositorios de LibreMesh a los feeds de OpenWrt\n\ncat &lt;&lt; EOF &gt;&gt; feeds.conf\n\nsrc-git libremesh https://github.com/libremesh/lime-packages.git;master\nsrc-git profiles https://github.com/libremesh/network-profiles.git\nEOF\n\n\n\nSi quieres compilar la version estable de libremesh reemplaza master por 2020.1\nal final de la línea del feed de libremesh para especificar el branch 2020.1.\n\n\nActualizar los paquetes desde los feeds\n\nscripts/feeds update -a\nscripts/feeds install -a\n\n\n\nEjecutar el menú de configuración\n\nmake menuconfig\n\n\n\nMirar los target (por ejemplo: ATH79), subtarget (por ejemplo: generic) y profile (por ejemplo: tl-wdr3600-v1)\nde tu router en la tabla de dispositivos OpenWrt.\n\n\nPor lo tanto seleccionar  Target System, Subtarget y  Target Profile .\n\n\nDe-seleccionar paquetes problematicos:\n\n\n\n\nBase system &#8594; dnsmasq\n\n\nNetwork &#8594; odhcpd-ipv6only\n\n\n\n\nOpcional, de-seleccionar paquetes no usados:\n\n\n\n\nNetwork &#8594; ppp\n\n\n\n\nOpcional, de-seleccionar ubicaciones de feeds erróneas:\n\n\n\n\nImage configuration &#8594; Separate feed repositories &#8594; Habilitar feed libremesh\n\n\nImage configuration &#8594; Separate feed repositories &#8594; Habilitar feed profiles\n\n\n\n\nSeleccionar (Presiona la tecla espacio hasta que un asterisco  aparezca, así como  &lt;&gt;) paquetes LibreMesh:\n\n\n\n\nLiMe &#8594; lime-system (Sistema de archivos de LibreMesh )\n\n\nLibreMesh &#8594; lime-proto-babeld (Soporte del protocolo babeld de LiMe)\n\n\nLibreMesh &#8594; lime-proto-batadv (Soporte del protocolo batman-adv de LiMe)\n\n\nLiMe &#8594; lime-proto-anygw (Soporte del protocolo anygw de LiMe)\n\n\nLiMe &#8594; lime-hwd-openwrt-wan (Respetar la interfaz WAN de OpenWrt por defecto )\n\n\nLiMe &#8594; shared-state-babeld_hosts (Modulo babeld-hosts para estado compartido)\n\n\nLiMe &#8594; shared-state-bat_hosts (Modulo bat-hosts para estado compartido)\n\n\nLiMe &#8594; shared-state-nodes_and_links (modulo nodes_and_links para estado compartido)\n\n\nLiMe &#8594; lime-app (LimeApp)\n\n\nLiMe &#8594; Offline Documentation &#8594; lime-docs-minimal (Documentación mínima de LibreMesh)\n\n\n\n\nSe recomiendan algunos paquetes más, pero no son obligatorios para el funcionamiento de una Red LibreMesh. Considere evitar seleccionar los siguientes\npaquetes solo si la imagen creada es muy grande y no soporta la memoria del router.\n\n\n\n\nLiMe &#8594; check-date-http (Mantenga la fecha local bajo NTP demasiado lejana)\n\n\nLiMe &#8594; Offline Documentation &#8594; lime-docs (Documentación en ingles sobre LibreMesh)\n\n\nLiMe &#8594; lime-hwd-ground-routing (Administrar VLANs 802.1q para enrutamiento cableado)\n\n\nLiMe &#8594; lime-debug (utilidades para depurar libremesh)\n\n\n\n\nAdemás y opcionalmente, https para la interfaz web puede ser habilitar seleccionando ( tenga en cuenta que la interfaz web se mostrará como no\nsegura):\n\n\n\n\nLibraries &#8594; libustream-wolfssl\n\n\nUtilities &#8594; Encryption &#8594; px5g-standalone\n\n\n\n\nFinalmente, también las conexiones mesh 802.11s pueden protegerse con contraseña, esto requerirá una configuración específica y este paquete\npara ser seleccionado:\n\n\n\n\nNetwork &#8594; wpad-mesh-wolfssl\n\n\n\n\ny este para ser de-seleccionado:\n\n\n\n\nNetwork &#8594; wpad-basic\n\n\n\n\n\n\n\n\n\n\n\nPara tener paquetes adicionales, la forma más sencilla es seleccionarlos en menuconfig. Posteriormente se podrán instalar más paquetes por medio de\nopkg, pero algunos de estos requieren una configuración de kernel específica. Esto se puede lograr siguiendo estas instrucciones adicionales relacionadas con el kernel vermagic.\nTenga en cuenta que esto aumentará considerablemente el tiempo y espacio de almacenamiento de la compilación.\n\n\n\n\n\n\nGuardar y salir.\n\n\nFinalmente, compilar la imagen\n\nmake -j$(nproc)\n\n\n\nSi todo va bien, deberia de encontrar los binarios producidos dentro del directorio bin/.\n\n\n\n\nEnvío de Parches\n\n\nAceptamos solicitudes pull a través de GitHub. Pero los parches los parches también se pueden enviar a través de la\n lista de correos lime-dev.\n\n\n\n\nPresencia en la Web\n\n\nLa página que tu estas leyendo es generada de archivos de texto usando\nAsciiDoc además de Jekyll.\n\n\nCualquier cambio hecho al repositorio de la web será reflejado en nuestro sitio web libremesh.org .\n\n\nPara generar esta página localmente:\n\n\n\ngit clone https://github.com/libremesh/libremesh.github.io.git\ncd libremesh.github.io &amp;&amp; bundle install\nbundle exec jekyll serve\n\n\n\nPara más detalles, revisar el README en Github.\n\n\nSi deseas contribuir con la documentación, envía parches a nuestra lista de correos o abre una solicitud de pull en GitHub.\nUna forma facil de editar y solicitar un pull de un archivo es haciendo click en el botón \"Editar esta página\" en la parte superior derecha de la página web.\n\n\nPor favor, usa la Sintaxis de AsciiDoc para contribuciones de la página web.\n\n\n"}
,{
"location": "/docs/configuration/es_faq-and-recommendations.html",
"lang": "es",
"title": "FAQ y recomendación",
"content": "\nNo editar otros archivos de configuración que no sean de libremesh\n\n\nLa configuración de un nodo libremesh solo debe realizarse a travez de los archivos de configuración de libremesh\ny nunca editando directamente los otros archivos de configuración.\nEsto es así ya que los cambios realizados en archivos de configuración por fuera del sistema de\nconfiguración de libremesh se pueden perder cuando:\n\n\n\n\nse realice un cambio en la configuración de libremesh\n\n\nse haga un upgrade de firmware\n\n\n\n\n\n\nNunca modificar los archivos con valores por defecto ni los autogenerados\n\n\nA pesar de que podria ser cómodo modificar directamente /etc/config/lime-defaults o inclusive\n/etc/config/lime-autogen esto no debe hacerse ya que en el futuro cuando querramos entender\nla configuración que tenemos del nodo no vamos a poder distinguir si cambiamos una configuración o no.\n\n\n\n\nQuiero cambiar una opción para probar, dónde la cambio?\n\n\nEn la configuración de Nodo: /etc/config/lime-node\n\n\n\n\nTengo que configurar todas las opciones?\n\n\nNo, las configuraciones por del nivel Defecto proveen una configuración que permite tener una\nexperiencia de red mesh sin tener que cambiar nada.\n\n\n\n\nCómo hago para ver todas las opciones estan en uso actualmente en un nodo?\n\n\nVer el archivo /etc/config/lime-autogen\n\n\n\n\nQuiero cambiar algo pero pero no encuentro una opcion de libremesh para realizarlo\n\n\nPara eso existen las generic-configs y los lime-assets\n\n\n\n\n¿Cómo hago?\n\n\n\n\nCómo usar las configuraciones de ap, apnode, mesh\n\n\nCómo poner una radio como cliente de otra red (para que el nodo haga de gateway)\n\n\nCómo poner un password de administración para toda la red\n\n\nCómo ponerle password al wireless\n\n\n\n\nPara información detallada de estas preguntas puedes ver los ejemplos en lime-example.\n\n\n"}
,{
"location": "/es_getit.html",
"lang": "es",
"title": "¡Obtener!",
"content": "\nDescargar Binarios Precompilados\n\n\nOfrecemos imagenes de firmware precompiladas de la versión estable de LibreMesh 2020.1 con configuraciones genericas. Esta es la\nforma más facil de obtener e instalar LibreMesh en tu router. La imagen de la  versión estable se puede encontrar en el sitio de descargas.\n\n\n\n\nCompilar localmente la última versión del codigo de LibreMesh usando buildroot de OpenWrt\n\n\nConsultar la pagina de Desarrollo.\n\n\n\n\nProcedimiento de Instalación\n\n\nPara el procedimiento de instalación, leer nuestra  Guía de Inicio Rápida.\n\n\n"}
,{
"location": "/es_howitworks.html",
"lang": "es",
"title": "Cómo Funciona",
"content": "\nObjetivos a alcanzar\n\n\n\n\nEscalabilidad\n\n\nSegmentación de Red\n\n\nRoaming en capa 2 en ciertas áreas\n\n\nSelección inteligente de puerta de enlace con redundancia y posibilidad de elección del usuario\n\n\nCompatibilidad con la mayoria de los escenarios existentes\n\n\nUna simple imagen de firmware para toda la red (para bajo nivel, para troncales, para empresas, para despliegues rápidos)\n\n\n\n\n\n\nLo esencial\n\n\nLa arquitectura de red diseñada para LibreMesh se basa en dos capas:\n\n\nNube Capa 2\n\nLa nube en la capa 2 utiliza el protocolo de enrutamiento dinámico BATMAN-ADV\n\n\n\n\n\n\n\n\n\nB.A.T.M.A.N Advanced es un protocolo de enrutamiento mesh que se ejecuta en el espacio del kernel.\nIncluso si la topologia de red esta hecha de multiples nodos y multiples saltos,\nB.A.T.M.A.N Advanced abstrae a un unico dominio de difusión (broadcast) de la capa 2. Entonces,\ndesde la perspectiva del usuario toda la mesh se verá como una sola LAN. Esta arquitectura es robusta\npara propositos de roaming, por lo tanto las conexiones TCP y UDP no se pierden incluso al mover y cambiar de puntos de acceso (AP&#8217;s).\n\n\n\n\n\nRed en capa 3\n\nLa capa de red 3 utiliza por defecto el protocolo de enrutamiento BMX\n\n\n\n\n\n\n\n\n\nBMX6 (o la nueva versión BMX7) es un protocolo de enrutamiento dinámico nativo de IPv6 el cual ofrece muchas funciones\navanzadas y una pequeña sobrecarga de red, gracias a la estrategia vector-distancia y su conjunto de optimizaciones.\nLa versión 7 tiene además extensiones de enrutamiento de seguridad.\n\n\n\n\n\nCombinando las capas\n\nPor defecto, todos los nodos corren ambos protocolos (BMX y BAT-ADV), pero en diferentes VLANs.[1]\nAsí que el enrutamiento se aisla por MAC.\n\n\n\n\n\n\n\n\n\nLa VLAN BMX es siempre la misma, por lo que todos los nodos conectados a la capa de enlace se verán entre sí.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa VLAN BATADV depende del identificador de la nube el cual es calculado (por defecto) usando el SSID del AP.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa red BMX será una para toda la mesh, pero la red BAT-ADV puede dividirse en varias nubes.\n\n\n\n\n\n\n\n\n\n\n\nEsta configuración aísla las nubes de capa 2.\nPor ejemplo, un vecindario, un complejo de empresa o una red de punto de acceso a nivel de calle pueden optar por aislar su LAN del resto de la red.\nSin embargo, al mismo tiempo, podrán llegar al resto de los nodos utilizando la red enrutada de capa 3.\n\n\nEl roaming estará disponible dentro de la nube, por lo que se puede realizar sesiones TCP, transmisión de video, o incluso una llamada SIP mientras se mueve por la red (roaming). Por otra parte, gracias a la segmentación de la capa 3 los problemas comunes que se encuentran en una red puenteada (bridged) - tales como tormentas de difusión o nightmares DHCP - no perturbaran el correcto funcionamiento de la red.\n\n\n\n\n\n\n\n\n\nTodo es automático y transparente para la persona usuaria\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn detalle\n\n\nLos Puntos de Acceso Inalambricos de la misma nube comparten parametros comunes:\n\n\n\n\nEl SSID (El nombre de Identificación del AP Inalámbrico)\n\n\nDirecciones IPv4  y IPv6 especiales Anycast.[2].\n\n\nUna dirección especial de MAC anycast\n\n\nUn servidor DHCP/RA para proveer IPs validas de la nube a los clientes.\n\n\n\n\nAsí un cliente conectado a una AP puede moverse por la mesh sin necesidad de renovar su configuración IP.\nIncluso en desde el punto de vista de la capa MAC será la misma.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEl archivo del listado de IPs entregadas por DHCP se comparte entre la nube para prevenir colisiones.\n\n\nSiempre que todos los nodos compartan el mismo anycast MAC/IP, desde el punto de vista del cliente, es completamente transparente. La puerta de enlace es siempre la misma aunque el nodo mesh (donde estén conectados) puede cambiar.\n\n\n\n\n\n\n\n\n\n\n\nCuando un cliente quiere salir de la LAN (nube) para conectarse a Internet o cualquier otra red, enviará los paquetes a la dirección de puerta de enlace anycast especial. El nodo donde el cliente esta fisicamente conectado se encargará de esto.\n\n\n\n\n\n\n\n\n\nUna regla de ebtables.[3] en el puente LAN/AP previene que los paquetes enviados a la dirección anycast se propaguen a través de la nube.\nEl nodo mesh en donde el cliente está asociado recibe el paquete, pero no los otros nodos.\n\n\n\n\n\n\n\n\n\n\n\nEl paquete es enrutado a través de la capa de red 3 BMX a la mejor puerta de enlace de Internet. Esto puede ser un nodo de la misma nube o cualquier otro de otra nube lejana.\n\n\n\n\n\n\n\n\n\nBMX tiene una potente función de puerta de enlace inteligente que selecciona automaticamente el mejor nodo de puerta de enlace de Internet teniendo en cuenta el ancho de banda disponible.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn el camino de vuelta el paquete llegará a algún nodo en la nube pero puede que no sea el mismo nodo.\nNo obstante el paquete se entregará correctamente al remitente. Esto es porque la puerta de enlace inteligente de BMX utiliza\ntuneles unidireccionales para garantizar que se utilice la puerta de enlace seleccionada.\n\n\n\n\n\n\n\n\n\n\n1. LAN Virtual aislada, por ejemplo wlan0.13\n\n\n2. IP compartida por multiples dispositivos en la red\n\n\n3. algo como iptables pero para la capa 2 de red\n\n"}
,{
"location": "/docs/es_index.html",
"lang": "es",
"title": "Documentación",
"content": "\nContrubuyendo a la documentación\n\n\nLas contribuciones a la documentación son muy bienvenidas! Consulte la sección en desarrollo.\n\n\n\n\nPresentaciones y Documentos\n\n\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Presentación realizada en SAX2016\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Tesis de Gioacchino Mazzurco (vista previa en HTML)\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Tesis de Gioacchino Mazzurco (PDF)\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Tesis de Gioacchino Mazzurco (Código fuente)\n\n\nWireless Mesh, una red troncal de Internet escalable y fácil de desplegar - Tesis de Paul Spooren\n\n\n\n\n"}
,{
"location": "/es_index.html",
"lang": "es",
"title": "Inicio",
"content": "\nIntroducción a LibreMesh\n\n\nLibreMesh es un framework modular para crear firmwares basados en OpenWrt para nodos wireless mesh.\nVarias comunidades de todo el mundo usan LibreMesh como\nbase para sus redes comunitarias.\n\n\n\n\n\nEl proyecto LibreMesh incluye el desarrollo de varias herramientas.\nEl firmware (la pieza principal) permite un simple despliegue de redes de malla de múltiples radios,\nautoconfigurables pero versátiles.\n\n\n\n\n\n\n\n\n\nRevisa Cómo funciona para ver las ideas básicas de la arquitectura.\nVisita Get it para saber cómo empezar a usarlo.\nLee algo de Documentación para entender mejor cómo funciona.\nY únete a nosotros en el listas de correo para seguir las discusiones actuales.\n\n\n\n\n\n\n\n\nRedes Mesh\n\n\nLas redes de mesh o malla son aquellas en las que todos los participantes (nodos) pueden rutear (encaminar)\nel tráfico de otros participantes.\nAsí que no hay puntos centrales y la topología física puede ser completamente aleatoria.\n\nPor lo general, las redes de malla están descentralizadas, organizadas desde las bases, desplegadas\ny mantenidas por las personas que las utilizan.\nCreemos que esta es la única manera de lograr una verdadera red libre de\ncontrol de los gobiernos y las empresas mundiales.\n\n\n\n\nRedes Libres para una sociedad libre\n\n\nEntendemos que una red libre como una red de telecomunicaciones debe cumplir estos tres puntos:\n\n\n\n\nSer abierta, así que cualquiera puede conectarse a ella si es físicamente posible\n\n\nSer neutral, por lo que no hay preferencias por el tipo, origen o destino de los datos\n\n\nSer libre como en la libertad\n\n\n\n\nEn la siguiente lista intentamos recopilar algunas redes libres existentes (envíanos un e-mail si quieres incluir la tuya):\n\n\n\n\n\n\n\n\n\n\nAlterMundi\nArgentina\nhttp://altermundi.net\n\n\n\nGuifi.net\nPenínsula ibérica\nhttp://guifi.net\n\n\n\nFreiFunk\nAlemania\nhttp://freifunk.net\n\n\n\nFunkFeuer\nAustria\nhttps://www.funkfeuer.at\n\n\n\nNinux.org\nItalia\nhttp://ninux.org\n\n\n\n\n\n\n\nFirmware y dispositivos embebidos\n\n\nUn dispositivo embebido es una pequeña computadora.\nAn embedded device is a small computer. Normalmente el sistema operativo que se ejecuta en ordenadores\ntan pequeños se llama Firmware. Nuestra forma de desplegar redes libres es instalando nuestro propio\nfirmware a los dispositivos (normalmente routers WiFi).\n\nNuestro sistema se basa en el proyecto OpenWrt, que a su vez se basa en el conocido sistema operativo Linux.\nTodo lo que desarrollamos es software libre para una sociedad libre para que cualquiera pueda\nusar, copiar, modificar y distribuir de acuerdo con la\nlicencia AGPL.\n\n\n\n\nHistoria\n\n\nEl proyecto LibreMesh (LiMe) se inició en 2013 por un conjunto de activistas de las redes libres\nde varias culturas y diferentes proyectos en todo el mundo,\ndispuestos a crear una solución común para el despliegue de redes libres.\n\n\nIn 2017 Shuttleworth Foundation awarded us with a\nFlash Grant\n\n\n\n"}
,{
"location": "/docs/configuration/faq-and-recommendations.html",
"lang": "en",
"title": "FAQ and recommendations",
"content": "\nDo not edit other configuration files that are not free mesh\n\n\nThe configuration of a libremesh node should only be done through the libremesh configuration files\nand never by directly editing the other configuration files.\nThis is because changes made to configuration files outside the\nfreemesh settings can be lost when\n\n\n\n\na change is made to the libremesh configuration\n\n\na firmware upgrade is made\n\n\n\n\n\n\nNever modify the files with default values or the autogenerated ones\n\n\nAlthough it might be convenient to directly modify /etc/config/lime-defaults or even\nThis should not be done because in the future when we want to understand\nthe configuration that we have of the node we will not be able to distinguish if we change a configuration or not.\n\n\n\n\nI want to change an option to test, where do I change it?\n\n\nIn the Node configuration: /etc/config/lime-node\n\n\n\n\nDo I have to configure all the options?\n\n\nNo, the configurations by the Default level provide a configuration that allows you to have a\nmesh network experience without having to change anything\n\n\n\n\nHow do I see all the options currently in use on a node?\n\n\nSee the /etc/config/lime-autogen file.\n\n\n\n\nI want to change something but I can&#8217;t find a freemaster option to do it\n\n\nThis is why there are generic-configs and lime-assets\n\n\n\n\nHow do I do it?\n\n\n\n\nHow to use the ap, apnode, mesh settings\n\n\nHow to put a radio as a client of another network (so that the node acts as a gateway)\n\n\nHow to set an administration password for the whole network\n\n\nHow to password protect the wireless\n\n\n\n\nFor detailed information on these questions you can see the examples in lime-example.\n\n\n"}
,{
"location": "/getit.html",
"lang": "en",
"title": "Get it!",
"content": "\nDownload it: The firmware selector\n\n\nAt this page you can search for your router model and download the adequate file\n\n\nhttps://repo.libremesh.org/selector/\n\n\n\n\n\n\n\n\n\nYou will need the \"factory\" file for the first installation from the vendor firmware. Or the \"sysupgrade\" file for replacing OpenWrt or for upgrading from an older LibreMesh version. When upgrading, make sure to not keep the previous configuration.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you cannot find your router model, please select the -mini version from the list of the available LibreMesh versions and search again. If you cannot find your router neither like this,\n\n\n\n\n\n\n\n\nBuild it online: The firmware selector with custom packages\n\n\nAfter selecting the LibreMesh version and the router model on the LibreMesh firmware selector page, you will see a \"Customize installed packages and/or first boot script\" button. Click it and you will be able to add or remove packages to the firmware.\n\n\nAlso, you can add custom configuration adding the package of a network profile (for example, the package of the network profile for the \"calafou\" community and the \"indoor2\" type will be named profile-calafou-indoor2).\n\n\nAdditionally, you can add BASH commands to be run just after flashing the LibreMesh firmware in the \"Script to run on first boot (uci-defaults)\" section.\n\n\nWhen you are happy with the settings, press \"Request build\" and the system will compile a new LibreMesh image just for you!\n\n\n\n\nBuild it locally: The OpenWrt buildroot with the LibreMesh modules\n\n\nRefer to the Development page, use the v2024.1 tag and use OpenWrt 23.05.5 for compiling the latest release: LibreMesh 2024.1 Fantastic Forwarder.\n\n\n\n\nOld versions\n\n\nFor finding all the LibreMesh firmware images, including old versions, check out this page:\n\n\nhttps://repo.libremesh.org/\n\n\nTo find the right file to use, please refer to the OpenWrt wiki, see their Table of Hardware here.\n\n\n\n\nInstallation procedure\n\n\nFor installation procedure read our Quick Starting Guide.\n\n\n"}
,{
"location": "/howitworks.html",
"lang": "en",
"title": "How it works",
"content": "\nObjectives to Achieve\n\n\n\n\nEnable non-expert users to set up a mesh network and perform basic configuration and management via a web interface usable on smartphones\n\n\nEncourage non-expert users to empower themselves deepening their technical understanding of mesh networks\n\n\nScalability\n\n\nNetwork segmentation\n\n\nLayer 2 roaming inside certain areas\n\n\nSmart gateway selection with redundancy and possibility of user-choice\n\n\nCompatibility with many different scenarios\n\n\nA single firmware image for all the routers of your network\n\n\n\n\n\n\nThe Basics\n\n\nThe network architecture designed for LibreMesh is based on two layers:\n\n\nCloud layer 2\n\nThe cloud layer 2 uses the dynamic routing protocol BATMAN-adv.\n\n\n\n\n\n\n\n\n\nB.A.T.M.A.N. Advanced is a mesh routing protocol that runs in kernel space.\nEven if the network topology is made of multiple nodes and multiple hops, B.A.T.M.A.N. Advanced abstracts it to a single layer 2 broadcast domain.\nSo from the user&#8217;s perspective the entire mesh will look like a single LAN.\nThis architecture is robust for roaming purposes, thus TCP and UDP connections are not lost even when moving and changing access points.\n\n\n\n\n\nNetwork layer 3\n\nThe whole network layer 3 uses by default the routing protocol Babel.\n\n\n\n\nBabel is a robust and efficient routing protocol for both wireless mesh networks and wired networks.\n\n\n\n\n\nMixing layers\n\nBy default, all nodes are running both routing protocols (Babel and BATMAN-adv), but on different VLANs.[1].\n\n\n\n\n\n\n\n\n\nThe Babel VLAN is always the same, so all link-layer connected nodes will see each other.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe BATMAN-adv VLAN depends on the cloud identifier which is calculated (by default) using the AP SSID.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Babel network will be a single one for all of the mesh, but the BATMAN-adv network may be separated between different local clouds.\n\n\n\n\n\n\n\n\n\n\n\nThis configuration isolates the layer 2 clouds.\nFor instance a neighborhood, a company complex, or a street level hotspot network may choose to isolate their LAN from the rest of the network.\nHowever at the same time, they will be able to reach the rest of the nodes using the layer 3 routed network.\n\n\nRoaming will be available inside the cloud, so TCP sessions, video streaming, or even a SIP call can be done while moving around.\nOn the other hand, thanks to layer 3 segmentation, the common problems found in a layer 2 bridged network&#8201;&#8212;&#8201;such as Broadcast storms or DHCP nightmares&#8201;&#8212;&#8201;will not disturb the correct operation of the network.\n\n\n\n\n\n\n\n\n\nEverything is automatic and transparent for the end user.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Details\n\n\nWiFi Access Points of the same cloud share common parameters:\n\n\n\n\nThe SSID (the WiFi AP identification name)\n\n\nSpecial anycast.[2] IPv4 and IPv6 addresses\n\n\nA special anycast MAC address\n\n\nThe DHCP/RA server to provide valid IPs from the cloud to the clients.\n\n\n\n\nThus a client attached to an AP can move around the mesh without the need to renew their IP configuration.\nEven the MAC layer will be the same from their point of view.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe DHCP lease file is shared among the cloud to prevent collisions using\nshared-state.\n\n\nAs long as all nodes share the same anycast MAC/IP, from the client point of view it is fully transparent.\nThe gateway is always the same even though the mesh node (where they are attached) may change.\n\n\n\n\n\n\n\n\n\n\n\nWhen a client wants to go out from the LAN (cloud) to reach the Internet or any other network,\nit will send the packets to the special anycast gateway address. The node where the client\nis physically attached will take care of this.\n\n\n\n\n\n\n\n\n\nAn nftables.[3] rule in the LAN/AP bridge prevents\npackets sent to the anycast address from propagating through the cloud. The mesh node where the client\nis associated gets the packet but not the other nodes.\n\n\n\n\n\n\n\n\n\n\n\nThe packet is routed through the Babel layer 3 network to the closest Internet gateway. It may be a node from the same cloud or any other from another cloud far away.\n\n\n\n\n\n\n\n\n\n\n\n1. Virtual isolated LAN, for instance wlan0.13\n\n\n2. IP shared by multiple devices in the network\n\n\n3. a modern firewall software\n\n"}
,{
"location": "/docs/hardware/",
"lang": "en",
"title": "Hardware",
"content": "\nInstalling LibreMesh is not always as easy as we would like to.\nIt depends on the router model, revision and so on.\nThe best way for getting an updated set of instructions is to find your model on the OpenWrt hardware page.\nHowever, to cover some specific scenarios, we provide a list of articles which might help you.\n\n\nPlease, take into account that these pages are third-party contributed, so if you find the opportunity expand this page with the \"Edit this page\" button in the upper right corner of this page.\n\n\nSuggested Hardware\n\n\nHere we list some characteristics which should ensure a full compatibility with LibreMesh.\nPlenty of other OpenWrt-supported devices not matching these characteristics can also be used but some of LibreMesh features could be malfunctioning.\n\n\nThe suggested devices have the following characteristics:\n\n\n\n\nbe supported by OpenWrt 23.05;\n\n\nhave at least 8 MB of flash memory;\n\n\nhave at least 64 MB of RAM memory;\n\n\nhave at least one 2.4 GHz radio and one 5 GHz radio (recommended but optional);\n\n\nhave at least one ethernet port labelled as LAN;\n\n\nhave a radio that supports the combination of AP + IEEE802.11s mesh (if unsure, ask for help on the communication channels).\n\n\n\n\nYou can find two convenient tables of existing hardware, possible to filter by specific features here (old format) and here (same data, new format).\n\n\nPlease check the device-specific installation procedure on the OpenWrt wiki, in some cases it can be prohibitively complex and/or involve soldering on the router&#8217;s motherboard.\n\n\n\n\nTested Hardware\n\n\nThis is a list of devices that were tested by the community and reported as fully compatible with LibreMesh, it is by no means a complete list of the working devices.\n\n\n\n\nXiaomi Mi WiFi R3G\n\n\nYouHua WR1200JS\n\n\nLibreRouter\n\n\nTP-Link WDR3500\n\n\nTP-Link WDR3600\n\n\nTP-Link WDR4300\n\n\nTP-Link Archer C5\n\n\nTP-Link Archer C7\n\n\nAlix 2d2\n\n\nUbiquiti UniFi AP\n\n\nUbiquiti NanoStation M2 XW and LoCo M2 XW\n\n\nUbiquiti NanoStation M5 XW and LoCo M5 XW\n\n\nUbiquiti Bullet M2 XW and M5 XW\n\n\nUbiquiti Rocket M2 and M5\n\n\nBuffalo WSR-1166DHP\n\n\nWestern Digital My Net N600\n\n\nGL.iNet GL-AR300M16\n\n\nXiaomi Mi Router 4A Gigabit Edition v1 v2 cannot be flashed with OpenWrt and there is no indication on the box for understanding if you are buying v1 or v2.\n\n\nPlasma Cloud PA1200\n\n\nMercusys MR70X\n\n\nXiaomi AX3200 / Redmi AX6S\n\n\nTP-Link RE650 v1\n\n\nAVM FRITZ!Box 4020\n\n\nAVM FRITZ!Box 4040\n\n\nTP-Link TL-WR841ND v13\n\n\n\n\n\n\nSpecific Devices Instructions\n\n\n\n\nTP-Link\n\n\nXiaomi MiWiFi R3\n\n\n\n\n"}
,{
"location": "/docs/",
"lang": "en",
"title": "LibreMesh Documentation",
"content": "\nContributing to the Documentation\n\n\nContributions to the documentation are very welcome, check out the web presence section in the development page.\n\n\n\n\nPresentations and Documents\n\n\n\n\n\"Radio Source\" program about Libremesh at Radio Campus in Brussels (19/07/2024) - Audio in French\n\n\nLibreMesh Q&amp;A Session 1 (30/06/2024) - Video in English\n\n\nInteroperability between classic infrastructure and LibreMesh networks in Guifi.net - Presentation delivered at SAX2016\n\n\nInteroperability between classic infrastructure and LibreMesh networks in Guifi.net - Gioacchino Mazzurco thesis (Source)\n\n\nWireless Mesh as easy deployable\nand scaleable Internet backbone - Paul Spooren bachelor thesis\n\n\n\n\n"}
,{
"location": "/",
"lang": "en",
"title": "Home",
"content": "\nIntroduction to LibreMesh\n\n\nLibreMesh is a modular framework for creating OpenWrt-based firmwares for wireless mesh nodes. Several communities around the world use LibreMesh as the foundation of their local mesh firmwares.\n\n\n\n\n\nThe LibreMesh project includes the development of several tools.\nThe firmware (the main piece) allow simple deployment of auto-configurable, yet versatile, multi-radio mesh networks.\n\n\n\n\n\n\n\n\n\nCheck How it Works to see the basic architecture ideas.\nVisit Get it to know how to start using it.\nRead some Documentation to understand better how it works.\nAnd join us in the mailing lists to follow the current discussions.\n\n\n\n\n\n\n\n\nMesh Networks\n\n\nMesh networks are such networks where all participants (nodes) are able to route traffic from other participants.\nSo there are not central points and the physical topology can be completely random.\n\nUsually mesh networks are decentralized, bottom-up organized, deployed and maintained by the people using them.\nWe believe this is the only way for achieving a real free network out of\ncontrol of the governments and global enterprises.\n\n\n\n\nFree Networks, Free Society\n\n\nWe understand that a free network as a telecommunications network should accomplish these three points:\n\n\n\n\nIt is open, so anyone can connect to it if physically possible\n\n\nIt is neutral, so there are not preferences for the kind, origin or destination of the data\n\n\nIt is free as in freedom (libre means free as in \"free speech\" in Spanish)\n\n\n\n\nOrganizations supporting LibreMesh:\n\n\n\n\n\n\n\n\n\n\nAlterMundi\nArgentina\nhttp://altermundi.net\n\n\n\nFreiFunk\nGermany\nhttp://freifunk.net\n\n\n\nFunkFeuer\nAustria\nhttps://www.funkfeuer.at\n\n\n\nGuifi\nIberian peninsula\nhttp://guifi.net\n\n\n\nIbebrasil\nBrasil\nhttps://ibebrasil.org.br/\n\n\n\nLibreRouter\nGlobal\nhttps://librerouter.org/\n\n\n\nNinux.org\nItaly\nhttp://ninux.org\n\n\n\nWakoma\nGlobal\nhttps://wakoma.co/\n\n\n\n\n\nCommunity mesh networks using Libremesh:\n\n\n\n\n\n\n\n\n\n\nAntennine\nAppennino Bolognese\nhttps://antennine.noblogs.org\n\n\n\nCalafou\nCatalunia\nhttps://calafou.org/\n\n\n\nCoolab\nBrasil\nhttps://www.coolab.org/\n\n\n\nJanastu CowMesh\nRural Karnataka\nhttps://open.janastu.org/projects/cowmesh\n\n\n\n\n\nSeveral other community networks are using or used LibreMesh on their devices with their own customizations (network profiles), some of these are listed here.\n\n\n\n\nFirmware and Embedded Device\n\n\nAn embedded device is a small computer. Usually the operating system running in such small computers is called Firmware.\nOur way of deploying free mesh networks is by installing our own firmware to the devices (usually WiFi routers).\n\nOur system is based on the OpenWrt project, which at the same time is based on the well known Linux operating system.\nEverything we develop is free software for a free society so anyone can\nuse, copy, modify and distribute according with\nAGPL license.\n\n\n\n\nHistory\n\n\nThe LibreMesh project (LiMe) was started in 2013 by a set of free network\nactivists from several cultures and different projects around the world,\nwilling to create a common solution for the deployment of free mesh networks.\n\n\nIn 2017 Shuttleworth Foundation awarded us with a\nFlash Grant\n\n\n\n"}
,{
"location": "/docs/it_guida_rapida_per_iniziare.html",
"lang": "it",
"title": "Guida Rapida Per Iniziare",
"content": "\nHardware Compatibile\n\n\nE’ consigliato che i router abbiamo almeno 8MB di memory flash. Per router con 4MB di memoria usa lo speciale firmware chiamato -mini.\n\n\nI router seguenti sono stati testati con LibreMesh ed hanno 8MB di memoria flash:\n\n\n\n\nTP-Link WR842ND\n\n\nTP-Link WR1043ND\n\n\nTP-Link WDR3500\n\n\nTP-Link WDR3600\n\n\nTP-Link WDR4300\n\n\nDragino MS14\n\n\nAlix 2d2\n\n\nUbiquiti Unifi AP\n\n\nUbiquiti AirRouter\n\n\nUbiquiti AirGateway\n\n\nUbiquiti NanoStation M5 XW\n\n\nUbiquiti NanoStation M5 XM\n\n\nUbiquiti NanoBridge M5\n\n\nUbiquiti NanoStation LoCo M2\n\n\nUbiquiti PicoStation M2\n\n\nUbiquiti Bullet M2\n\n\n\n\nI modelli con 4 MB che sono stati testati usando la versione -mini:\n\n\n\n\nTP-Link WR740N\n\n\nTP-Link WR741ND\n\n\nTP-Link WR841ND\n\n\n\n\nPer informazioni dettagliate su questi router, guarda nelle pagine dedicate all’ hardware.\n\n\nMolti altri modelli sono supportati anche se non li abbiamo mai testati (o non lo sappiamo), guarda la lista dei nostri firmware proposti nei download.\n\n\n\n\nOttieni il Firmware\n\n\nScegli una fonte per il tuo firmware:\n\n\n\nPer un firmware precompilato con i parametri di default (e.g. wireless AP name LibreMesh.org) puoi andare alla pagina di downloads;\n\n\nè possibile generare una immagine del firmware sul proprio computer, è una procedura più complessa, usando lime-sdk. Supporta l&#8217;utilizzo di profili personalizzati dalle diverse comunità.\n\n\nLa nostra piattaforma di Cucina permette di generare una immagine del firmware direttamente online. Supporta l&#8217;utilizzo di profili personalizzati dalle diverse comunità.\n\n\n\n\nPer avere più opzioni vai alla pagina Ottienilo.\n\n\n\nScarica il firmware giusto\n\nTrova nei download il modello e nome giusto del tuo router. Potresti incappare in diverse varianti o simili. Puoi trovare istruzioni più dettagliate riguardo al tuo modello di router su lede.\n\n\n\n\nSe stai installando per la prima volta (il router ha il firmware originale) scegli il link che finisce per -factory.bin.\n\n\nSe stai aggiornando una preesistente installazione di Libremesh o di Openwrt o LEDE, scegli il link che finisce per -sysupgrade.bin.\n\n\n\n\n\n\n\nProcedura di installazione\n\n\nApri l’interfaccia web del tuo router\n\nUsando un cavo ethernet (rj45) connetti la porta LAN del tuo pc a quella del tuo router.\nSii sicuro che sul tuo pc ci sia solo una interfaccia di rete attiva e che questa sia la scheda ethernet. (es: disabilità l’interfaccia wireless)\n\n\nSe stai installando per la prima volta e quindi il router ha il firmware di fabbrica, segui le istruzioni dei costruttori per connettere il router. Di solito c’è scritto un IP sulla scatola originale o sotto il router stesso. Di solito viene assegnato di default l’IP 192.168.0.1 o 192.168.1.1 e digitandoli nell’url di un browser, puoi raggiungere la loro interfaccia web.Se non riesci a connetterti al router perchè non riesci a scoprire il suo IP, puoi provare l’indirizzo IP del tuo gateway; ottienilo apri un terminale e digita netstat -rn (mac), o ip route show default (GNU/Linux). Puoi trovare altri suggerimenti per scovare l’IP qui e qui.\n\n\nSe il router ha già operativo sopra OpenWrt o LEDE possono essere applicate le istruzione del paragrafo sotto.\n\n\nSe il router ha già sopra LibreMesh, apri un browser e vai alla pagina http://thisnode.info dovresti trovare l’interfaccia web.\n\n\nQuindi ti puoi loggare come admin (se sono quelle di default, la username e password sono scritte sulla scatola del router, o in OpenWrt di default non c’è password di amministrazione, in LEDE invece è una password vuota, fai solo invio).\n\n\nPer più opzini di connessione vai a vedere la pagina Come connettere i nodi.\n\n\nSe hai il sospetto di non poter connettere il tuo router alla rete per configurazioni danneggiate, segui la guida Risolvi i problemi.\n\n\n\nFlashing\n\n\n\n\n\n\n\n\nPer i router Ubiquity AirMAx con una installazione di AirOS 5.6.x, se flashati con Libremesh si bloccano e il recupero non è agevole (devi aprirgli la scatola e connetterti direttamente sulla porta seriale, in oltre perderesti irrimediabilmente i dati di calibrazione della radio). Se il tuo router va con una AirOS 5.6.x, devi portarlo ad una versione precedente: la AirOS 5.5.x per poi flasharlo con Libremesh.\n\n\n\n\n\n\nUna volta che ti sei loggato come admin o come root nel tuo router, cerca la pagina “firmware upgrade”.\n\n\n\n\n\n\n\n\n\nSe c’è l’opzione “Keep Settings”, ovvero “mantieni le impostazioni”, fai attenzione che NON sia barrata, in OpenWrt/LEDE lo è di default.\n\n\n\n\n\n\nCarica il file prescelto del tuo firmware e clicca su Flash Image. Aspetta qualche minuto fino a quando il processo non è terminato. Riconnetti li l’interfaccia ethernet (per avere un nuovo IP) ed apri nel browser http://thisnode.info.\nComplimenti, ora hai un router con LibreMesh!\n\n\n\n\n\nConnettiti al tuo router LibreMesh\n\n\nConnettiti al router tramite la sua wireless o tramite cavo ethernet ed apri http://thisnode.info nel browser.\n\n\n\n\n\n\n\n\n\nSe è la prima volta che ti connetti in assoluto, ti chiederà di settare una password di amministrazione. Se lasci il tuo router Libremesh senza password di amministrazione potresti trovarti in seri problemi di gestione degli apparati dal lato della confidenzialità dei dati che ci passano.\n\n\n\n\n\n\nPer avere più opzioni di connessione leggi la pagina Come connettersi ai nodi.\n\n\nSe hai il sospetto di non poter connettere il tuo router alla rete per configurazioni danneggiate, segui la guida Risolvi i problemi.\n\n\n\n\nShare the Internet Connection with the LibreMesh Network\n\n\nLibreMesh is automatically sharing with the rest of the mesh network any internet connection is connected to the router WAN port. There&#8217;s no problem if more than one internet gateway is connected to the LibreMesh network, likely the one closest to the client will be used.\n\n\nIf the LibreMesh router has no WAN port (just LAN ports, or just one ethernet port), one of the ethernet ports has to be configured as WAN port in order to share the internet connection. Refer to next section for configuration.\n\n\n\n\nConfiguration\n\n\nWORK IN PROGRESS\n\n\nRefer to the LibreMesh config file page for detailed information.\n\n\n\n\n\n\nUsing the Console Interface (optional)\n\nUntil here we went through the installation, connection and configuration procedures using the LibreMesh web interface.\n\n\nAs in every Linux-based system there&#8217;s the availability of a textual console interface for advanced configuration and hardcore users.\n\n\nThis part of the guide should not be needed for normal LibreMesh use.\n\n\nFlashing Via the Console Interface (optional)\n\n\nThis is possible just if you&#8217;re upgrading an existing OpenWrt, LEDE or LibreMesh installation, not from stock firmware.\n\n\nCopy the downloaded firmware image to the /tmp directory on your target router using the scp command.\n\n\n\n\n\n\n\n\n\nDo not try to copy the firmware image to directories different from /tmp. They have limited memory access.\n\n\n\n\n\n\nIn case the router already has LibreMesh you can do this with\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@thisnode.info:/tmp/\n\n\n\nOtherwise (upgrading from OpenWrt or LEDE) you will need to insert the router IP address in\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@ROUTERIPADDRESS:/tmp/\n\n\n\n\n\n\n\n\n\n\nWhen upgrading from OpenWrt, in order to connect via ssh/scp you will need to have an admin/root password set via the web interface or via SSH and the passwd command.\nCheck out Connecting to your own node for help on this.\n\n\n\n\n\n\nNow connect to the console interface using ssh, if LibreMesh is already running with ssh \\root@thisnode.info or with ssh root@ROUTERIPADDRESS if OpenWrt or LEDE are running.\n\n\nThen enter the /tmp directory where the firmware is present with cd /tmp, check the presence of the file with ls and install it with\n\n\n\nsysupgrade -n lede-ROUTERMODEL-squashfs-sysupgrade.bin\n\n\n\n\n\n\n\n\n\n\nThe -n option for sysupgrade command is needed for discarding the previous configuration files. Omitting the -n option is never a good idea when flashing LibreMesh.\n\n\n\n\n\n\nFor more information on the sysupgrade process, see these OpenWrt instructions.\n\n\n\n\nConfiguring Via the Console Interface (optional)\n\n\nRather than using the web interface, modifying directly /etc/config/lime file allows to access more advanced options but increases the risk of writing broken configuration.\n\n\nYou can use the vi or vim text editor for editing /etc/config/lime, the settings in this file will override the default ones in /etc/config/lime-defaults.\n\n\nUn esempio di configurazione commentata si può trovare nei router in /docs/lime-example.txt o in linea qui mentre su questo sito si può leggere la pagina configurazione di LibreMesh.\n\n\nAfter saving the edits to the lime file, apply the changes to system configuration files launching the lime-config command. Next reboot the router with reboot &amp;&amp; exit to apply the new settings.\n\n\n"}
,{
"location": "/docs/it_index.html",
"lang": "it",
"title": "Documentazione di LibreMesh",
"content": "\nContribuire alla Documentazione\n\n\nSiamo molto felici se ti va di contribuire alla documentazione, guarda la sezione \"The Web Presence\" nella pagina di Sviluppo.\n\n\n\n\nPresentazioni e Documenti\n\n\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - Presentazione consegnata al SAX2016\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - tesi di Gioacchino Mazzurco (HTML)\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - tesi di Gioacchino Mazzurco (Stampabile PDF)\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - tesi di Gioacchino Mazzurco (Sorgente)\n\n\n\n\n"}
,{
"location": "/docs/configuration/lime-example.html",
"lang": "en",
"title": "lime-example",
"content": "\nhttps://github.com/libremesh/lime-packages/master/packages/lime-docs/files/www/docs/lime-example.txt\n\n\n\n# The /etc/config/lime-defaults file contains the default configuration.\n# To configure LibreMesh insert options in /etc/config/lime-node or /etc/config/lime-community file, these will override the default ones.\n# Interface specific options have to be included in /etc/config/lime-node, if in /etc/config/lime-community they'll cause unpredictable behaviour.\n#\n# The options marked with \"Parametrizable with %Mn, %Nn, %H\"\n# can include %Mn templates that will be substituted\n# with the n'th byte of the primary_interface MAC\n# and %Nn templates that will be replaced by the n'th (n = 1..5) network-identifier byte,\n# calculated from the hash of the ap_ssid value, so that all the nodes that\n# form a mesh cloud (share the same ap_ssid) will produce the same value\n# and %H template that will be replaced by hostname\n# For setting a specific WAN port, don't set it globally in section \"config lime network\", set it in interface specific configuration \"config net ...\" and install the lime-proto-wan package\n# For setting the WAN port on the default WAN port (according OpenWrt), just install the lime-hwd-openwrt-wan package and the configuration will be autogenerated.\n\n#########################################################\n### System options\n\nconfig lime system\n\toption hostname 'LiMe-%M4%M5%M6'\t\t# Parametrizable with %Mn\n\toption domain 'thisnode.info'\t\t\t# DNS domain for the L2 cloud it could be something like mycloud.mynetwork.tld, hosts that get their IP by DHCP will also get a fully qualified domain name like hostname.mycloud.mynetwork.tld\n\toption keep_on_upgrade 'libremesh dropbear minimum-essential /etc/sysupgrade.conf'\t# Files defining the list of files and directories to backup when upgrade. Relative to /lib/upgrade/keep.d if no '/' defined.\n\toption root_password_policy 'DO_NOTHING'\t# When configured to SET_SECRET, the root password secret will be configured as specified in root_password_secret. When set to RANDOM a strong random password will be set if root has no password, use this if your firmware is built with the ssh keys inside. DO_NOTHING does nothing, leaving the root password empty (you will have to set it manually or through FirstBootWizard).\n\toption root_password_secret ''\t\t\t# This is the password hash as stored in /etc/shadow, it is only used when root_password_policy=SET_SECRET. You can generate the secret with 'openssl passwd -1' to be compatible with most openwrt firmwares, use a strong password with at least 10 numbers and letters, the longer the better!. For improved security use \"openssl passwd -6\" for SHA512 (or -5 for SHA256) but be aware that not all firmwares support this.\n\toption deferrable_reboot_uptime_s '97200'\n\toption deferrable_reboot_ping_target '4.2.2.2' # b.resolvers.Level3.net\t# the reboot scheduled by deferrable_reboot, if installed, will be deferred if the ping to this IP is succesful\n\toption firstbootwizard_configured false\n\toption firstbootwizard_dismissed false\t\t# When true fbw banner will be hidden.\n\n#########################################################\n### Network general option\n\nconfig lime network\n\toption primary_interface eth0\t\t\t# The mac address of this device will be used in different places\n\toption main_ipv4_address '10.%N1.0.0/16'\t# Here you have 4 possibilities: set a static IP and the subnet, like '10.0.2.1/16'; parametrize with %Mn and %Nn, and set the subnet, like '10.%N1.%M5.%M6/16'; set a whole network address (not a specific IP) for getting the IP autocompleted in that network with bits from MAC address, this works also with netmasks other than /24 or /16, like '10.0.128.0/17' (but not valid network addresses, for example '192.0.128.0/16' or '192.0.129.0/17' won't get parametrized); set two different parameters, the first for subnet and the second for nodes' IP parameterization, like '10.0.128.0/16/17', this results in /16 subnet but IP of the LibreMesh routers will be auto-assigned in a /17 range (from 10.0.128.1 to 10.0.255.254).\n\toption anygw_dhcp_start '2'\t\t\t# First IP in the subnet to be used for DHCP for clients. For example, if the subnet is 10.x.0.0/16 and you want the clients to get an IPv4 from a DHCP pool starting from 10.x.100.2, the start parameter will have to be 100 * 256 + 2 = 25602.\n\toption anygw_dhcp_limit '0'\t\t\t# Number of IPs available for DHCP. Use zero for having the DHCP pool ranging from anygw_dhcp_start up to the end of the subnet. For example, if the subnet is 10.x.0.0/16, the start of the DHCP pool is at 10.x.100.2 and you want the DHCP pool to finish at 10.x.127.254, the limit parameter will have to be (127 - 100) * 256 + (254 - 2) + 1 = 7165. Instead, if you want the DHCP pool to go from 10.x.100.2 up to 10.x.255.254 (last valid IPv4 in the /16 subnet) you can just set the limit to zero.\n\toption main_ipv6_address 'fd%N1:%N2%N3:%N4%N5::/64'\t# Parametrizable in the same way as main_ipv4_address. If used, the IP autocompletion will fill maximum the last 24 bits, so specifying an IP autocompletion range bigger than /104 is not useful.\n\tlist protocols ieee80211s\t\t\t# List of protocols configured by LiMe, some of these require the relative package \"lime-proto-...\". Note that if you set here some protocols, you overwrite the *whole* list of protocols set in /etc/config/lime-defaults\n\tlist protocols lan\n\tlist protocols anygw\n\tlist protocols batadv:%N1\t\t\t# Parametrizable with %Nn (which depends from ap_ssid), note that this will range between 29 and 284\n#\tlist protocols batadv:0\t\t\t\t# If 0 VLAN tags are disabled and the routing is done on the raw interface\n\tlist protocols bmx6:13\t\t\t\t# The VLAN type can be provided as a third argument, for example bmx6:13:8021q for using VLAN 802.1q instead of the default 802.1ad\n\tlist protocols olsr:14\t\t\t\t# Do not use a VLAN ID between 29 and 284 as this range is reserved for batadv:%N1 parameterization, maximum ID is 4095\n\tlist protocols olsr6:15\n\tlist protocols olsr2:16\n\tlist protocols babeld:17\n\tlist protocols bmx7:18\n\tlist resolvers 4.2.2.2 # b.resolvers.Level3.net\t# DNS servers node will use\n\tlist resolvers 141.1.1.1 # cns1.cw.net\t\t# Set every entry empty for using the upstream (ISP) DNS server\n\tlist resolvers 2001:470:20::2 # ordns.he.net\n\toption bmx6_mtu '1500'\t\t\t\t# Set MTU for bmx6 tunnel interfaces\n\toption bmx6_publish_ownip false\t\t\t# announce also a /32 route about each node\n\toption bmx6_over_batman false\t\t\t# Disables Bmx6 meshing on top of batman\n\toption bmx6_pref_gw none\t\t\t# Force bmx6 to use a specific gateway to Internet (hostname must be used as identifier)\n\toption bmx6_wifi_rate_max 54000000\n\toption bmx7_mtu '1500'\t\t\t\t# Set MTU for bmx7 tunnel interfaces\n\toption bmx7_publish_ownip false\t\t\t# announce also a /32 route about each node\n\toption bmx7_over_batman false\n\toption bmx7_pref_gw none\t\t\t# Force bmx7 to use a specific gateway to Internet (hostname must be used as identifier)\n\toption bmx7_wifi_rate_max 'auto'\n\toption bmx7_enable_pki false\t\t\t# Trust only nodes in /etc/bmx7/trustedNodes when set (default is to trust all nodes)\n\toption batadv_orig_interval '2000'\t\t# BATMAN-adv will send one Originator Message (OGM) packet every 2000 ms (2 s). This value should be ok for the static networks, in which the LibreMesh routers are not moving. If you have a LibreMesh node moving (e.g. in your backpack) consider decreasing this value. A smaller value means that BATMAN-adv will take less time for realizing which links are better, but will generate more background traffic on all the interfaces.\n\toption batadv_routing_algo 'BATMAN_IV'\t\t# BATMAN_V uses throughput rather than packet loss (as in BATMAN_IV) for evaluating the quality of a link\n\toption anygw_mac 'aa:aa:aa:%N1:%N2:aa'\t\t# Parametrizable with %Nn. Keep in mind that the ebtables rule will use a mask of ff:ff:ff:00:00:00 so br-lan will not forward anything coming in that matches the first 3 bytes of it's own anygw_mac (aa:aa:aa: by default)\n#\toption autoap_enabled 0\t\t\t\t# Requires lime-ap-watchping installed. If enabled AP SSID is changed to ERROR when network issues\n#\toption autoap_hosts \"8.8.8.8 141.1.1.1\"\t\t# Requires lime-ap-watchping installed. Hosts used to check if the network is working fine\n\toption use_odhcpd false\n\n#########################################################\n### WiFi general options\n\nconfig lime wifi\t\t\t\t\t# Settings in this section applies to all radios.\n\tlist modes 'ap'\t\t\t\t\t# This mode setup an Access Point, with the same ssid in each node for roaming purposes.\n\tlist modes 'apname'\t\t\t\t# This mode setup an Access Point, with specific ssid for each node.\n\tlist modes 'apup'\t\t\t\t# This mode setup radio for APuP operation.\n\tlist modes 'ieee80211s'\t\t\t\t# Used for mesh links between nodes.\n#\tlist modes 'adhoc'\t\t\t\t# See below for adhoc configuration\n#\tlist modes 'client'\t\t\t\t# See below for client configuration\n#\toption country 'ES'\t\t\t\t# set this to your location country code, for example in Spain, setting ES allows you to use channel 13\n\toption ap_ssid 'LibreMesh.org'\t\t\t# set here your network name, **this value is required even if AP is not used**, as it is used for calculating fields with %Nn. Connect to this network to roam across APs.\n#\toption ap_key 'SomeWPA2PskKey'\n#\toption ap_encryption 'psk2'\n\toption apname_ssid 'LibreMesh.org/%H'\t\t# SSID specific to each AP. A user can connect to the named AP to avoid roaming\n#\toption apname_key 'SomeWPA2PskKey'\n#\toption apname_encryption 'psk2'\n\toption apup_ssid 'LibreMesh.org'                # set here your APuP based network name\n\toption adhoc_ssid 'LiMe'\t\t\t# SSID of the APs (nodes) when meshing in ad-hoc mode, i.e., the nodes form an IBSS. Not used when meshing in 802.11s (the default)\n\toption adhoc_bssid 'ca:fe:00:c0:ff:ee'\n\toption ieee80211s_mesh_fwding '0'\t\t# Settings needed only for 802.11s\n\toption ieee80211s_mesh_id 'LiMe'\t\t# Mesh cloud identifier (close to SSID in concept). Used by the nodes to join and participate in the mesh network.\n#\toption ieee80211s_encryption 'psk2/aes'\t\t# in order to use encrypted mesh, the wpad-mini package have to be replaced with wpad-mesh-wolfssl package either manually or by the selected network-profile\n#\toption ieee80211s_key 'SomePsk2AESKey'\n\toption unstuck_interval '10'\t\t\t# Interval in minutes that defines how often to run the workaround script provided by the package wifi-unstuck-wa that rescan all available frequencies in active radios.\n\toption unstuck_timeout '300'\t\t\t# Timeout in seconds that defines how long the mentioned above workaround should go.\n\n#########################################################\n### WiFi specific band options\n\n\nconfig lime-wifi-band '2ghz' \t\t\t# Settings in this section applies for all radios in '2ghz' (or '5ghz') band. And take presedence over 'lime wifi' section\n\toption channel '11'\n\toption htmode 'HT20'\t\t\t# htmode sets the width of the channel. HT40 should have better performances in non-noisy environments. Check out the documentation in the OpenWrt wiki here: https://openwrt.org/docs/guide-user/network/wifi/basic#htmodewi-fi_channel_width\n\toption distance '1000'\t\t\t# 1 km max distance, farther clients or peers will not be able to connect\n\toption adhoc_mcast_rate '24000'\n\toption ieee80211s_mcast_rate '24000'\n#\tlist modes 'ap'\t\t\t\t# For networks where only dual band routers are used,\n#\tlist modes 'apname'\t\t\t# 2.4Ghz radios can be reserved for access points.\n\n\nconfig lime-wifi-band '5ghz'\n\tlist channel '48' \t\t\t# May be either a list or a single option, in case of a list a channel for each radio will be selected according to radio index\n\tlist channel '157'\t\t\t# Check for allowed channels on https://en.wikipedia.org/wiki/List_of_WLAN_channels#regulatory_tables5.0ghz\n\toption htmode 'HT40'\t\t\t# htmode sets the width of the channel. VHT80 should have better performances in non-noisy environment. Check out the valid channels list in this comment: https://github.com/libremesh/lime-packages/issues/647#issuecomment-1503968192 and check out the documentation in the OpenWrt wiki here: https://openwrt.org/docs/guide-user/network/wifi/basic#htmodewi-fi_channel_width\n#\tlist modes 'ieee80211s'\t\t\t# For networks where only dual band routers are used, the 5 GHz radio can be reserved for the node-to-node connections\n\toption distance '10000'\t\t\t# Distance between this node/ap and the furthest connected node/client in meters, affects performances. If you are unsure of the right number, better to use a too-large distance here than a too-small one. Farther clients or peers will not be able to connect\n\toption adhoc_mcast_rate '6000'\n\toption ieee80211s_mcast_rate '6000'\n\n\n#########################################################\n### Configuration directed to other UCI files\n\nconfig generic_uci_config uhttpd_https\n\tlist uci_set 'uhttpd.main.redirect_https=0'\t# disable automatic redirect from http to httpS web interface, decided in order to decrease the CPU usage by shared-state and ubus-lime-metrics\n\n\n#########################################################\n# The following interface specific options have to be included in /etc/config/lime-node, not in /etc/config/lime-community\n\n#########################################################\n### WiFi interface specific options ( override defaults options )\n\n## use radio99 only for mesh\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'ieee80211s'\n\n## change ssid for radio99\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\toption ap_ssid 'Special'\n\n## disable lime-config for radio99\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1\n\toption modes 'manual' # If you use manual protocol you must not specify other protocol, or your configuration will be broken!\n\n## decrease power output for radio99\n# decreasing the output power is rarely a good idea, do it just if you are very sure of what you are doing\n# be aware that decreasing the output power can create a \"hidden node problem\", see https://en.wikipedia.org/wiki/Hidden_node_problem\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1\n\toption txpower '14' # For knowing the current txpower, use the \"iwinfo\" command.\n\n## set radio99 to do only adhoc and set the channel\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'adhoc'\n\toption channel '1'\n\toption adhoc_ssid 'LiMe'\t\t\t# Parametrizable with %M, %H\n\toption adhoc_bssid 'ca:fe:00:c0:ff:ee'\n\toption adhoc_mcast_rate '24000'\n\n#########################################################\n# If you want to use Wifi client mode just to connect to an AP offering internet\n# you need two pieces of configuration: the wifi specific configuration and the\n# network specific one like in the following example. If your router has an ethernet\n# WAN port, you will need also the third piece of configuration for disabling it.\n\n## set radio99 as client of access point for internet access, both the following \"wifi\" and \"net\" sections are required\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'client'\n\toption channel 'auto'\n\toption client_ssid 'SomeWiFiNetwork'\n\toption client_key 'SomeWPApskPassword'\n\toption client_encryption 'psk2'\t\t\t# psk for WPA or psk2 for WPA2\n\toption distance 1000\t\t\t\t# maximum distance to AP, affects performances\n\nconfig net wirelessclientWAN\n\toption linux_name 'wlan0-sta'\t\t\t# verify the name, the client interface name could be named differently, like wlan1-sta\n\tlist protocols 'wan'\t\t\t\t# use wan to get Internet connectivity via DHCP\n\nconfig net lm_hwd_openwrt_wan\t\t\t\t# this interface gets created by lime-hwd-openwrt-wan package in case an ethernet WAN port is detected\n\toption autogenerated 'false'\t\t\t# this line specify that the configuration of the WAN ethernet port has been manually edited, creating an empty configuration for it and practically disabling it\n\n#########################################################\n# If you want to use Wifi client and AP instead of mesh for building the\n# backbone of your LibreMesh network (and you are using Batman-adv + Babeld)\n# you will need specific wifi and net configuration both on the client and\n# on the access point\n\n## set radio99 as backbone access point (not for users connection, specific client configuration reported below) part of the LibreMesh network structure using Batman-adv and Babeld, both the following \"wifi\" and \"net\" sections are required on the AP\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1\n#\tlist modes 'ap'\t\t\t\t\t# include this if you additionally want an AP for clients on the same radio, check the maximum number of \"interface combinations\" with \"iw phy phy0 info\" command\n#\tlist modes 'apname'\n#\tlist modes 'ieee80211s'\t\t\t\t# include this if you additionally want also do IEEE802.11s mesh on the same radio, check the maximum number of \"interface combinations\" with \"iw phy phy0 info\" command\n\tlist modes 'apbb'\t\t\t\t# apbb stands for backbone AP, for other LibreMesh routers connection rather than for users connection\n\toption apbb_ssid 'backbone/%H'\t\t# clients should not connect to this AP, SSID name should point it out\n#\toption apbb_key 'somePassword'\n#\toption apbb_encryption 'psk2'\n\nconfig net wirelessAPbackbone\n\toption linux_name 'wlan0-apbb'\t\t# verify the name, the backbone AP interface name could be named differently, like wlan1-apbb\n\tlist protocols 'apbb'\t\t\t# backbone AP proto, needed for setting up the interface\n\tlist protocols 'babeld:17'\n\tlist protocols 'batadv:%N1'\n\n## set radio99 as backbone client of a backbone access point (not for users connection, specific AP configuration reported above) using Batman-adv and Babeld, both the following \"wifi\" and \"net\" sections are required on the client\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'client'\n\toption channel '11'\n\toption client_ssid 'backbone/LiMe-ddeeff'\t# specify here the name of the specifically configured backbone AP interface you want to connect to\n#\toption client_key 'somePassword'\n#\toption client_encryption 'psk2'\n\toption distance 1000\t\t\t\t# maximum distance to AP, affects performances\n\nconfig net wirelessclientbackbone\n\toption linux_name 'wlan0-sta'\t\t\t# verify the name, the client interface name could be named differently, like wlan1-sta\n\tlist protocols 'client'\t\t\t\t# needed for setting up the new interface\n\tlist protocols 'babeld:17'\n\tlist protocols 'batadv:%N1'\n\n#########################################################\n### Network interface specific options ( override general option )\n### Available protocols: bmx6, bmx7, batadv, olsr, olsr6, olsr2, bgp, wan, lan, manual, static, babeld, apbb, client\n### proto:vlan_number works too ( something like bmx6:13 is supported ), the VLAN type defaults to 802.1ad but 802.1q can be used specifying it with proto:vlan_number:8021q\n### If you use manual do not specify other protocols, may result in an unpredictable behavior/configuration (likely you loose connection to the node)\n\n#config net port5\t\t\t\t\t# Do not put any \".\" in the section name\n#\toption linux_name 'eth1.5'\t\t\t# Put here the actual name of the interface\n#\tlist protocols 'wan'\t\t\t\t# Some of these protocols require the relative package \"lime-proto-...\"\n#\tlist protocols 'static'\t\t\t\t# Set up a static IP (both IPv4 and IPv6 supported)\n#\toption static_ipv4 '192.168.1.2/24'\n#\toption static_gateway_ipv4 '192.168.1.1'\t# in static protocol, specifying an IP for the gateway is optional. Skip this line if no default route should be added on this interface.\n#\toption static_ipv6 '2a00:1508:0a00::1234/64'\n#\toption static_gateway_ipv6 'fe80::1'\t\t# in static protocol, specifying an IP for the gateway is optional. Skip this line if no default route should be added on this interface.\n\n## (optional) configure lan1 for connection to other nodes, not for users connection:\nconfig net\n\toption linux_name 'lan1'\n\tlist protocols 'batadv:%N1'  #needs to be specified if the other node is in the same mesh cloud i.e. same ssid\n\tlist protocols 'babeld:17'\n\n## (optional) configure lan1 for users to connect to, not for connection to other nodes:\nconfig net\n\toption linux_name 'lan1'\n\tlist protocols 'lan'\n\n#########################################################\n### Ground routing specific sections\n### One section for each ground routing link\n### With ground routing we mean setups having LibreMesh on a router which is connected via cable(s), eventually through a switch, to some wireless routers running the original firmware in WDS (transparent bridge) Ap/Sta mode.\n### Likely you want to configure as many sections of ground routing with different VLAN numbers or different switch ports as many connected devices in WDS mode.\n### For a detailed description have a look at https://github.com/libremesh/lime-packages/issues/443\n\n#config hwd_gr link1\n#\toption net_dev 'eth0'\t\t\t\t# Plain ethernet device on top of which 802.1q VLAN will be constructed. In case of doubts rely on https://openwrt.org/toh/start\n#\toption vlan '5'\t\t\t\t\t# VLAN ID to use for this ground routing link, use little one because cheap switch doesn't supports big IDs, this will be used also as 802.1q VID on tagged ports\n#\toption switch_dev 'switch0'\t\t\t# These options regarding switch need to be set only if your ethernet device is connected to a switch chip. If the switch exists you can read its name (like switch0) in /etc/config/network file\n#\toption switch_cpu_port '0'\t\t\t# Refer to switch port map of your device on https://openwrt.org/toh/start to know CPU port index\n#\tlist switch_ports '4t'\t\t\t\t# List switch ports on which you want the VLAN being passed, use the 't' suffix to specify the port being tagged, refer to https://openwrt.org/toh/start for correspondence with physical ports\n\n#########################################################\n### Proto BGP specific sections\n### One section for each BGP peer\n\n#config bgp_peer peer1\n#\toption remoteIP '192.0.2.6'\n#\toption remoteAS '65550'\n\n#config bgp_peer peer2\n#\toption remoteIP '2001:db8::c001'\n#\toption remoteAS '65549'\n\n#########################################################\n### Watchcat specific sections\n### One section for each ping-watchdog rule you want to define.\n\n# Ping-reboot the device if gateway (or any IP) is unreachable\nconfig hwd_watchcat default\n    option mode       'ping_reboot'\n    option pinghosts  '4.2.2.2'    # default Level3 resolver\n    option pingperiod '30s'        # send one ping every 30 seconds\n    option period     '6h'         # reboot if 6h continuously failing\n    option forcedelay '1m'         # wait up to 1m for a soft-reboot\n\n"}
,{
"location": "/news.html",
"lang": "en",
"title": "News",
"content": "\n2025-05-04 - LibreMesh 2024.1 release\n\n\nThe LibreMesh community is enthusiast to finally announce a new release of LibreMesh:\nLibreMesh 2024.1 \"Fantastic Forwarder\".\n\n\nFour years of work and testing, 334 commits since LibreMesh 2020.4 in the lime-packages repository only, 10 developers, many improvements and the updated support for OpenWrt 23.05!\n\n\nA big news first: this LibreMesh release can be downloaded and customized online (!!!) using a tool developed by the OpenWrt community: the firmware selector. This is a large step forward in one of our main objective: enable everyone to build a network community, without being a shell-ninja. Enjoy it at this link: https://repo.libremesh.org/selector/\n\n\nWhat&#8217;s new in 2024.1 \"Fantastic Forwarder\"\n\nIt is impossible to do a meaningful list of all the changes. A non complete list of the most relevant\ndevelopments:\n\n\n\n\nCompatibility with the new firewall adopted by modern OpenWrt: nftables;\n\n\nCompatibility with the new configuration method for switches (DSA) while maintaining the compatibility with the old one (swconfig);\n\n\nCompatibility with the usage of ujail introduced in OpenWrt for additional security;\n\n\nIncorporate a new version of shared-state written from scratch for performances;\n\n\nMany fixes and code improvement, also coming from the testing grants funded with the donations collected on OpenCollective.\n\n\n\n\n\nContributors\n\nThis release has contributions from communities and individuals from all around the world. Testing, software development, documentation, community building. Thank you all!!\n\n\nAdditionally to the many many people who contributed to set the foundations of LibreMesh, this specific release was made with the contributions of these people:\nGioacchino Mazzurco, Gothos, Gui Iribarren, Henrique Mohr, Ilario Gelmetti, Javier Jorge, Paul Spooren, Pony, Santiago Piccinini, Selankon.\n\n\n\n\n\n2023-09-06 - LibreMesh on the waves\n\n\nOn Friday the 19th of July, one of us was invited to Radio Campus in Brussels, for the \"Radio Source\" program, where they talk about current Free Software news and the world of Open Source development.\nWe had the opportunity to talk with the hosts for about an hour about LibreMesh, why the project was created, how it was used in 2024 and about what a mesh network is, what are its purposes, and what LibreMesh offers regarding mesh networks.\nThe archive is available here https://redif.src.brussels/ under 2024 and then select the file from the 19th of July!\n\n\n\n\n2023-10-07 - A new stable release and a release candidate for Openwrt 22!\n\n\nWe released a new version of Libremesh based on OpenWrt 19!\n\n\n\nhttps://downloads.libremesh.org/releases/2020.4-ow19/\n\n\n\nand a new release candidate based on OpenWrt 22:\n\n\n\nhttps://downloads.libremesh.org/releases/2023.1-rc2-ow22/\n\n\n\n\n\n\n\n\n\n\nFirmware images of libremesh-2020.4 based on openwrt-19.07.10, were signed with the wrong signing keys.\nTo install additional kernel_modules via opkg:\n\n\n\n\nAdd the build repository for the selected target/subtarget here ar71xx/generic:\n\n\n\n\n\necho \"src/gz libremesh_kmods http://downloads.libremesh.org/releases/2020.4-ow19/targets/ar71xx/generic/packages\" &gt;&gt; /etc/opkg/limefeeds.conf\n\n\n\n\n\nThen add the signing key:\n\n\n\n\n\ncat &lt;&lt; EOF &gt; /etc/opkg/keys/c37d41571f77f282\nuntrusted comment: signed by libremesh.org for 2020.4 release builds\nRWTDfUFXH3fygrM5F7kON6UQTWjWG9aNVBSNFnUv3cHXJjFVmZrGJ6Iw\nEOF\n\n\n\n\n\n\n\nThis means that the release candidate needs testing, bug fixing and\nloads of community love so that we can have an amazing release that can\nactually ease the creation of community networks everywhere.\n\n\nCheck out the: https://lists.autistici.org/message/20230929.142923.34529fc1.en.html\nhttps://lists.autistici.org/message/20230929.152044.f1940e95.en.html\nfor more detailed information.\n\n\nAnother great gourgeous news is that from now we have a Firmware Selector, check it out here:\nhttps://repo.libremesh.org/selector\n\n\nThis release has contributions from communities and individuals from all around the world.\nTesting, software development, documentation, community building. Thank you all!!\n\n\n\n\n2023-03-10 - Endorsement to BattleMesh v15 in Calafou, Barcelona\n\n\nThe Wireless Battle of the Mesh is going live for its 15th edition. This time for a full week again!\n\n\nThe dates and venue have been set by the WBM community:\n\n\n\n8-14th of May 2023\nCalafou, Vallbona d'Anoia, Barcelona\nhttps://www.openstreetmap.org/#map=19/41.51115/1.70263\nhttps://calafou.org/web/index.php/sobre-calafou#eng\n\n\n\nLibreMesh community supports and will participate in this year&#8217;s Wireless BattleMesh (WBM) v15 in Calafou, Barcelona.\n\n\nLibreMesh will be one of the topics that will be discussed there, together with routing protocols for mesh networks, human communities below the wireless nodes, and much more technical and political topics related to community networks!\n\n\nYou can see the full announcement email here\nhttps://lists.autistici.org/message/20230310.090007.3ae9dd40.en.html\nAnd the event website here:\nhttps://battlemesh.org/BattleMeshV15\n\n\nEnjoy meshing!\n\n\n\n\n2022-09-18 - Participation to BattleMesh v14 in Rome\n\n\nLibreMesh supports this year&#8217;s \"Wireless Battle of the Mesh - Building Community Networks for Fun and Non-Profit\".\n\n\nThe event aims to bring together people from across the globe who are interested in community networks, including wireless mesh network technologies, fiber infrastructure, Do-It-Yourself Internet Access Providers, and more generally how to create and maintain a thriving community of people involved in building their own networks.\n\n\nWe envision 4 days of expert presentations, practical workshops, hacking sessions, and fruitful discussions: whether you are a mesh networking enthusiast, community networking activist, protocol developer, or have an interest in networking in general, come and join the event!\n\n\nThe Battlemesh is free of charge and open for all.\n\n\nThis year, the event will take place from Monday 19th to Thursday 22nd of September, 2022 in Rome, Italy!\nCheck out more information at https://www.battlemesh.org/BattleMeshV14\n\n\n\n\n2020-12-15 - LibreMesh 2020.1 release\n\n\nThe LibreMesh team is happy to announce a new version of LibreMesh, 2020.1 \"Expansive Emancipation\".\nThree years of work, 882 commits, 23 developers, tons of bug fixes and improvements!\n\n\nThis release is compatible with OpenWrt stable 19.07.5 and old-stable 18.06.9. For the time  source-only\nrelease so you will need compile it yourself for the devices used by your community using the easy to\nfollow instructions in https://libremesh.org/development.html\n\n\nWhat&#8217;s new in 2020.1 \"Expansive Emancipation\"\n\nIt is imposible to do a meaninful list of all the changes. A non complete list of the most relevant\ndevelopments:\n\n\n\n\nLimeApp: an app to for the maintenance and deploy of community networks targeted to non-technical\ncommunity members.\n\n\nA new community-oriented configuration system that facilitates collective maintenance of configurations.\n\n\nshared-state, a shared database for the network.\n\n\nfirst-boot-wizard, an optional helper to deploy and extend the network that it is well integrated with the LimeApp.\n\n\nPirania, an optional boucher and captive portal solution for community networks\n\n\nHundreds of fixes and code improvement.\n\n\n\n\n\nContributors\n\nThis release has contributions from communities and individuals from all around the world. Testing, software development, documentation, community building. Thank you all!!\n\n\nA list of the software developers that contributed to this release was easily gathered from the git history:\nAngiieOG, Brad, Daniel Golle, FreifunkUFO, German Ferrero, Gioacchino Mazzurco, Gui Iribarren, Ilario Gelmetti,\nJess, Luandro, Marcos Gutierrez, Michael Jones, Mike Russell, Nicolás Pace, PatoGit, Pau, Paul Spooren, Pedro Mauro,\nSantiago Piccinini, Vittorio Cuculo, hiure, radikalbjr, valo.\n\n\n\n2020-09-18 - A release candidate for the next release!\n\nAlthough the LibreMesh development never stopped, it was since the 17.06\n\"Dayboot Rely\" release that we didn&#8217;t have an official release.\nThe goal is to have the final release at the beginning of November.\n\n\nThis means that the release candidate needs testing, bug fixing and\nloads of community love so that we can have an amazing release that can\nactually ease the creation of community networks everywhere.\n\n\nCheck out the announcement\nfor more detailed information.\n\n\n\n\n\n2018-04-13 - Join us at Mesh is in the Air!\n\n\nWe endorse Mesh is in the Air - this years mesh up of the Wireless Battle of the Mesh and Wireless Community Weekend.\n\n\nIf you are a mesh networking enthusiast, community activist, have an interest in wifi or dynamic routing protocols, you can&#8217;t miss this event! Check out more details in the official website.\n\n\nLibreMesh developers and users will be attending the event, giving talks about development progress and state, and in general sharing a nice time.\n\n\n\n\n2017-06-06 - Attended Sysupgrades\n\n\nWithin this years GSoC a fellow student tries to setup a new way to perform sysupgrades on LibreMesh Routers (and LEDE/OpenWrt in general).\nThe idea is to generate sysupgrade images on demand with all manually installed packages included.\n\n\nMore details are shown in the official Freifunk Blogpost (english)\n\n\n\n\n2016-10-06 - LibreRouter\n\n\nThe Libre Router project will design and produce a high performance multi-radio wireless router targeted at Community Networks needs.\n\n\nFor more info visit the librerouter web. Or read the guifi.net article (spanish).\n\n\n\n\n2016-08-06 - Endorsement to LEDE project\n\n\n\n\n\nWe endorse the LEDE project and we plan to start basing LibreMesh releases on Linux Embedded Development Environment (LEDE) as soon as it will have a stable release.\n\n\n\n\n2016-08-01 - Project Meeting LiMeCat2016q3\n\n\nNaming:\tLiMeCat2016q3\nDate:\t2016-08-06T12:00+02:00/2016-08-07T17:00+02:00\nVenue:\tCSA La Talaia, Passeig Mas Roig 52-54/ Rambla Jacint Verdaguer 215, FGC: Valldoreix (Sant Cugat Del Vallés), Barcelona. Web site.\n\n\n\n\n2016-04-13 - Project Meeting LiMeCat2016\n\n\nNaming:\tLiMeCat2016\nDate:\t2016-04-16T12:00+02:00/2016-04-17T17:00+02:00\nVenue:\tCSOA Matakrostes, Passeig de Sevilla 132, Valldoreix, Barcelona. Map.\nReport:\temail in Spanish.\n\n\n"}
,{
"location": "/pt-br_howitworks.html",
"lang": "pt-br",
"title": "Como funciona",
"content": "\nObjetivos a alcançar\n\n\n\n\nEscalabilidade\n\n\nSegmentação de redes\n\n\nRoaming de camada 2 dentro de certas áreas\n\n\nSeleção inteligente de gateway com redundância e possibilidade de escolha do usuário\n\n\nCompatibilidade com a maior parte dos cenários existentes\n\n\nUm firmware único para toda a rede (roteadores de base, backbone, empresas instalações rápidas, etc)\n\n\n\n\n\n\nO Básico\n\n\nA infraestrutura de rede do LibreMesh é baseada em 2 camadas:\n\n\nCamada 2 / nuvem\n\nA camada 2 nuvem usa ao protocolo dinâmico de roteamento BATMAN-ADV\n\n\n\n\n\n\n\n\n\nadvanced é um protocolo de roteamento mesh que é executado no kernel space. Mesmo se a topologia da rede é feita de múltiplos nós e múltiplos hops (saltos), ele a abstrai para um único domínio de\ncolisão na camada 2. Então, da perspectiva do usuário, toda   a   mesh   vai   parecer   uma   única   LAN.   Essa   arquitetura   é   muito   interessante   para fins de roaming, então conexões TCP e UDP não se perdem quando você troca de Access Point (AP).\n\n\n\n\n\nCamada 3 / rede\n\nToda rede de camada 3 usa por padrão o protocolo de roteamento BMX\n\n\n\n\n\n\n\n\n\nBMX6   (ou   a   nova   versão   BMX7)   é   um   protocolo   de   roteamento\ndinâmico IPV6 que oferece funções muito avançadas e baixo overhead\nde   rede   (graças   a   estratégia   de   vetor   de   distância   e   uma   série   de\notimizações). Versão 7 tem, adicionalmente, extensões de roteamento de segurança.\n\n\n\n\n\nMisturando camadas\n\nPor padrão, todos os nodes executam ambos os protocolos de roteamento (BMX e BAT-ADV), mas em uma VLAN (1) diferente. Então o roteamento é isolado pela camada MAC.\n\n\n\n\n\n\n\n\n\nA VLAN BMX é sempre a mesma, então todos os nós conectados à camada de link vão procurar uns aos outros.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA VLAN BATADV depende do identificador cloud que é calculado (por padrão) usando o SSID do AP (Access point).\n\n\n\n\n\n\n\n\n\n\n\n\n\nPortanto a rede BMX vai ser única para toda a MESH, mas a rede BAT-ADV pode ficar dividida em muitas nuvens.\n\n\n\n\n\n\n\n\n\n\n\nEssa configuração permite isolar a camada 2/nuvem.   Por   exemplo   num   bairro,   um complexo empresarial ou numa rede de hotspots abertos você pode escolher isolar sua LAN do resto da rede. Porém ao mesmo tempo, você pode alcançar os outros nós usando a rede de roteamento da camada 3.\n\n\nRoaming vai ser disponível dentro da nuvem, então qualquer sessão TCP, video ou chamada SIP pode ser realizada enquanto se move. Por outro lado, graças a segmentação de camada 3,   os   problemas   comumente   encontrados   na   camada   2   de   uma   rede   em   bridge   (como tempestade de broadcast ou problemas com DHCP) não vão perturbar a operação correta da rede.\n\n\n\n\n\n\n\n\n\nE tudo isso automático, auto-mágico e transparente para o usuário final.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDetalhes\n\n\nOs WiFI Access Points da mesma cloud compartilham alguns parâmetros:\n* SSID, o nome de identificação do WiFi AP\n* Endereços IPv4 e IPv6 especiais para anycast.[1]\n* Um  MAC address especial para anycast.\n* Um servidor DHCP/RA para prover IPs válidos para todos os clientes da cloud.\n\n\nEntão um cliente conectado em um AP pode se mover pela mesh sem precisar renovar seu IP. Até a camada MAC vai ser sempre a mesma do seu ponto de vista.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOs leases de DHCP (concessão) são compartilhados pela cloud para prevenir colisões\nusando A.L.F.R.E.D\nA.L.F.R.E.D.\n\n\nDesde que os nós compartilhem um mesmo anycast MAC/IP, do ponto de vista do\ncliente é totalmente transparente. Portanto o gateway é sempre o mesmo ainda que o nó\nmesh que ele esteja anexado seja outro.\n\n\n\n\n\n\n\n\n\n\n\nQuando um cliente quer sair da LAN (cloud) para conectar a internet ou outra rede, ele vai enviar\num pacote para o anycast especial do gateway. Então o nó onde o cliente está fisicamente conectado\nvai tomar conta de todo o resto.\n\n\n\n\n\n\n\n\n\nUma regra de ebtables .[2] no AP/LAN previne que os pacotes de propagação de camada 2 na nuvem sejam enviados para o endereço anycast. Então o nó mesh onde o cliente está associado pega o pacote, mas os outros não.\n\n\n\n\n\n\n\n\n\n\n\nO pacote é roteado através do BMX para o melhor gateway de internet. Pode ser o nó da mesma\ncloud ou de alguma outra cloud distante.\n\n\n\n\n\n\n\n\n\nO BMX   tem   uma   funcionalidade   de   'inteligência'   de   gateway   bem   poderoso   que\nautomaticamente detecta o melhor nó de gateway de internet levando em consideração\na largura de banda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo   caminho   de   volta   o   pacote   vai   chegar   no   mesmo   nó   da   cloud,   mas   não\nnecessariamente no mesmo nó que partiu. Independente disso, o pacote será enviado corretamente para quem o originou. Isso acontece porque o BMX smart gateway usa conexões de túnel de mão única para garantir que o gateway selecionado seja utilizado.\n\n\n\n\n\n\n\n\n\n\n1. IPs compartilhados por vários dispositivos na rede\n\n\n2. ebtables é como uma iptables mas para a camada 2/rede\n\n"}
,{
"location": "/report_2021.html",
"lang": "es",
"title": "LibreMesh 2021 Meetings",
"content": "\n2021-12\n\n\nParticipantes - Attendees\n\n\n\n\nIlario, Hiure, Luandro , Tania, Tomás Assenza, SAn, William Suarez, amuza, NicoPace, Angie, Al, Elio, Fauno, Gui, Germán\nMeeting link: https://meet.jit.si/LibreMesh\n\n\n\n\nTemas - Topics:\n\n\n\n\nToma de decisiones en el proyecto (modelo de governanza) / How to take project-related decisions (governance model)\n\n\nGermán Ferrero: Redes Comunitarias Geek-Free.\n\n\nCanales de comunicación (Element, listas de correo, que se discute en lime-dev, Github) / Communication channels (Element, mailing lists, what to discuss on lime-dev, Github)\n\n\n\n\n\n\nTemas dejados para próximos meetings\n\n\nTopics left for next meetings\n\n\n\n\nMetodos de participación para subir la inclusividad del proyecto (foro, wiki) / Participation methods for increasing the inclusion of community in the project (forum, wiki)\n\n\nDocumentación / Documentation\n\n\nComo usar las donaciones / How to use the donations\n\n\nTemas tecnicos? (soporte OpenWrt 21.02, QoS con TC) / Technical topics? (support for OpenWrt 21.02, QoS,using TC)\n\n\nAbierto para propuestas y otros temas / Open for proposals and other topics\n\n\nPróxima reunión de proyecto / Next project meeting\n\n\n\n\nActa de reunión / Minutes of the meeting\n\n\nPresentation of each participant\n\n\nGer de AlterMundi, developing the LiMeApp\n\n\nAmuza, no se desarrollar, mantengo una pequeña comunidad. Aprendi a utilizar calidad de servicio, tc\n\n\nTomas, trabajé en el último GSoC, trabaje en la LimeApp para Android. Estoy estudiando en la facultad, retomar el desarrollo y tengo interes en colaborar.\n\n\nIlario, no estoy manteniendo ninguna comunidad. me encanta libremesh y hago testeo de hace siglos. soy quimico.\n\n\nHiure de Coolab, soy fisico. no soy desarrollador. siempre metiendo mano en lo que puedo. vivo en una comunidad con una red comunitaria con muchos nodos. soy de brasil.\n\n\nLuandro desde Brasil parte de Coolab. tengo una experiencia con la red comunitaria de mi comunidad en Moinho. Desarrollo algo de LiMeApp, pero mayormente despliego redes.\n\n\nTania. Trabaje en desarrollo de software para una aplicacion de mensajeria. quisiera platicar mas sobre ello. use libremesh en algunos dispositivos. involucrada en pirania.\n\n\nWilliam de Colombia. acompañamos algunas comunidades. haciendo pruebas de uso, probando como funciona en las comunidades.\n\n\nNicoPace divulgación y desarrollo y testeo, ahora algunas cosas las lleva Ger\n\n\nGui\n\n\nSAn participo de AlterMundi, 2019 empecé a desarrollar en LibreMesh. Diseño del LibreRouter hardware, y proyectos de redes comunitarias en Argentina. Vivo en prov. Buenos Aires, Argentina.\n\n\nFauno, participado de varios proyectos de redes comuntarias, talleres. Participo tambien en la coop Sutty. Los sitios estáticos pueden alojarse en redes comunitarias.\n\n\nAngie ex-ColNodo, trabajando en LibreMesh y lime-app, interese sobre el tema técnico. Colombia\n\n\nAl mantengo una red en el jardín botanico de Barcelona de 12 nodos por 10 años con el ayuntamiento de Barcelona y ahora ya no se hacen cargo. Catalunya - si alguien se ofrece a hacerse cargo o se le ocurre una idea al respecto, que me contacte en al@blogmail.cc\n\n\n\n\nToma de decisiones en el proyecto (modelo de governanza) + Canales de comunicación (Element, listas de correo, que se discute en lime-dev, Github) /\n\n\n\n\nHow to take project-related decisions (governance model) + Communication channels (Element, mailing lists, what to discuss on lime-dev, Github)*\n\n\n\n\nIlario:\nAhora que la comunidad ha crecido, la toma de decisiones tiene que ser mas abierta y transparente.\ncanal transparente\nreuniones\n\n\nSAn:\nEstaría buenisimo tener un mecanismo simple, muy simple, que nos permite tomar decisiones. En los temas técnicos tenemos una forma de gobernanza a traves de los issues. para algunas cosas técnicas venía sirviendo. En otras cosas no, como mover un servidor, si se le cambia el enfoque. Cuando una propuesta se volvía decisión. Estaría bueno algo que no genere overhead.\n\n\nGer:\nsi dentro de los canales de comunicación logramos uno que sea para conversaciones asincrónicas sobre un tópico específico, luego las preguntas sobre la comunidad puede llegar a ser uno de esos hilos, y podemos apostar a\n\n\nNicoPace:\n\n\nhay decisiones sobre el codigo y sobre el proyecto, hubo decisiones técnicas pero las pocas decisiones que no tenian canal para tomarlas eran las sobre los canales de comunicación. Una vez que los canales funcionen se veran los mecanismos actuales que aún que no estean ahora explicitos estan en marcha, y las decisiones de proyecto también correran allí. Tener comunicación efectiva en los canales debería resolver los problemas de govenzanza porque se pueden discutir allí.\n\n\nAmuza:\n\n\nCuál es el problema con usar solo la lista de correo?\n\n\nNicoPace:\nhemos tenido problemas de infrastructura y no hemos conseguido recuperar rapidamente la lista de correo\ndentro de AlterMundi hemos dejado de usar Mattermost y hemos empezado a usar Zulip (https://zulipchat.com) (que es un chat y lista de correo, mucho mas segura de Matrix pero con posibilidad de bridge (https://zulip.com/integrations/doc/matrix) pero bien usar las listas de correo\n\n\nSAn:\nlos correos que enviava no llegavan, ahora funciona bien la lista de correo. Bien el mail para la comunicación asincrona. Se seguimos con las reuniónes se pueden tomar decisiones aquí y preguntar a la lista de correo si alguien más quiere comentar. Importancia de la comunidad no-desarrolladora. Abrir decisiones y contribuciones (por ejemplo a la web) a no-desarrolladores. Problema que la web sea en Git porque los no-tecnicos tienen una barrera a modificarla. Pero para los tecnicos es lo que nos gusta más.\n\n\nNicoPace:\ndefinir la comunicación y revisar a la próxima reunión lo de la governanza\n\n\nIlario: metodos de comunicacion efectivos/transparentes. Si la lista de correo funciona, genial&#8230;&#8203; pero a la gente le gusta usar las apps. Me parece bien si definimos medios de comunicaciones, y lo de la gobernanza, me parece estupendo!\n\n\nFauno: genial que se esté hablando de gobernanza. Las conclusiones que hemos ido sacando es que los modelos de gobernanza tienen que ser explícitos para que puedan ser referidos. para ver que algo está funcionando o no, para poder cambiarlo o no. En ese sentido puedo compartir algunas cosas que hemos producido, en cuanto acuerdos de convivencia, dinámicas nosivas para los grupos.\n\n\nhttps://utopia.partidopirata.com.ar/quiero_ser_pirata.html\nhttps://utopia.partidopirata.com.ar/la_tirania_de_la_falta_de_estructuras.html\nhttps://utopia.partidopirata.com.ar/democracia_directa.html\nhttps://utopia.partidopirata.com.ar/zines/codigos_para_compartir.html\n\n\nGer: la gobernanza va a decantar bien si tenemos los canales de comunicacion. Por la falta de práctica tengo mis dudas si la lista de correo solucione el tema de discusión.\n\n\nNicoPace:\ndamole una esperancia a la lista de correo y ya veremos si funciona. Con LibreRouter tenemos un foro: foro.librerouter.org\n\n\nSAn:\ndamo de baja a la lista de lime-es y que sean aceptados todos los idiomas en lime-users.\n\n\nIlario:\nlime-dev cambios en arquitectura\nlime-users\ndar de baja lime-es\n\n\nGer:\ntodas las discusiones no de código se pueden llevar en lime-dev\n\n\nSAn:\nuna sola lista\n\n\nNicoPace:\nque tema no se discute en issues?\n\n\nIlario:\nbmx/babel\nluci/limeapp\nsource release\n\n\nAmuza:\nuna única lista. Las personas un poquito técnicas suelen ser. En cualquier idioma. Siempre que el subject esté bien definido.\n\n\nNicoPace:\npara que más gente pueda participar, a favor de tener una sola lista. De toda manera las discusiones de código estan en Github, mientras las otras decisiones impactan también a los usuarios, mejor involucrarlos. Así también tenemos que esforzarnos para comunicar la idea sin que se quede demasiado técnica. Por ejemplo luci/lime-app se hubiera podido debatir por el lado técnico o más desde el punto de vista del usuario. Hay usuarios de LibreMesh que no son técnicos (e.g. si compra un LibreRouter y lo usa porque necesita la conectividad, sin hackear).\n\n\nSAn: como recolectar y traer esas voces, no participaran en listas de correo, pero si en el dia a dia usan al red comunitaria. A nivel político/lineamiento, todas las personas que usan libremesh estaría bueno que se vayan enterando de que lo hacen con una curva baja, una persona no solo técnicos sino de activista/politicos&#8230;&#8203; y que pueda participar/aportar que no sea codear.\n\n\n\n\nRedes Comunitarias Geek-Free.\n\n\nGer: si enfocamos LibreMesh a Redes Comunitarias que no tienen conocimientos expertos, puede que implique cambios de comunicación. Si me permiten cuento algo de ese tema descolgado. Hace ya mucho tiempo que las personas que formamos parte de AlterMundi y otras que estamos aqui como coolab y colombia, hacemos software que para que comunidades rurales pueda autogestionar sus propias redes, y que lo haga sin la necesidad de que haya expertos técnicos en la red. De ahi es que queremos que la LiMeApp permita a que desplieguen redes y que gradualmente aprendan como funciona una red mesh, que es importante mirar, que no es tan importante y hay que dejarla mas allá en su curva de desarrollo. Todas esas conversaciones de que es prioritario para las comunidades, esas conversaciones vienen sucediendo en nuestros canales privados y no en los publicos, por el entendimiento de que no todos están orientados en esa dirección. La propuesta es de que tal que Libremesh sea el software para Redes Comunitarias Geek-Free, y que además que si podemos llevar estas conversaciones a los canales de comunicación públicos de LibreMesh. &#8230;&#8203; La Mesh tiene que andar, por lo que lo técnico que no tiene que ver con la experiencia de aprendizaje del no-tecnico, eso va a estar empujado siempre.\nLa propuesta concreta es enfocar libremesh a redes comunitarias geek-free.\n\n\nAmuza: totalmente de acuerdo, no sabia bien que habia esa separación. pero Me gustaría que sigan funcionando los cacharros de bajos recursos.\n\n\nIlario: más que una división del proyecto, faltaba comunicacion. Me parece estupendo para redes geek-free, que puede tener más impacto que una red para frikis.\n\n\nAmuza: geek-free a favor totalmente. pero los routers que funcionan solo por consola&#8230;&#8203; no dejar fuera a los que no funcionan con limeapp.\n\n\nSAn: creo que definitivamente va a haber items técnicos y decisiones de que impacto tiene, la página, el sitio web actual. La primera impresión es más académico, no plantea lo de geek-free. De repente no hay que cambiar cosas técnicas. El día a día de AlterMundi va en esa linea, sino que esto que contaba Ger.\n\n\nGui: eu gostaria muito d escutar o sentir do @hiure ao respeito da proposta pois lembro q faz tempo tinha me compartilha uma prsspretiva de q fazer tudo \"facinho\" afastava de meter mão\n\n\nHiure: tengo una idea, un poco más filosófica. A mi me parece que la experiencia que tengo de la red comunitaria, con lo que tengo visto es que no me parece que el concepto de geek-free sea lo mejor. geek-friendly. Es posible que se tenga en la red que pueda &#8230;&#8203; la idea de separar a personas en expertos y no expertos, no me encanta. me parece que los esfuerzos en traer las personas en hacer parte de esto, desmitificarlo.. tal vez sea mas impactante&#8230;&#8203; si todo está camuflado/escondido&#8230;&#8203; las personas no meten las manos. tengo visto que necesita de alguien en las comunidades para mantener las cosas. Así en la comunidad que vivo, es muy dificil que una red comunitaria que no tenga alguien que haga eso, meter las manos, manejar consola y eso&#8230;&#8203; no se si eso puede cambiar. no me parece que una red&#8230;&#8203; menos que tenga una aplicación que sea más fácil de manejar&#8230;&#8203; no me parece que con el tiempo eso se mantiene. hay muchas cosas que entender, que manejar. no simplificar.\n\n\nGui: creo que si se ha logrado con los librerouters, hay muchas redes asi\n\n\nNicoPace:\nhay redes sin entusiastas técnicos, gracias a lime-app. Es necesario encontrar caminos que ayuden las personas a interiorizarsse, más en estas tecnologias, que los medios de telecomunicación que fabricamos facilite el aprendizaje y concienciación de las tecnologias, dibujar caminos para que los usuarios puedan profundizar. Importancia de los canales de comunicación.\n\n\nSAn:\nestá claro que si cada persona tiene que compilar es una barrera de entrada muy alta. Lo ideal es que una comunidad pueda empezar a desplegar sin tener estos conocimientos al principio, pero que luego puedan profundizar. El objetivo no es esconder la profundidad pero amenizar la entrada en el tema. Hay comunidades a quien hemos enviado cajas de librerouter con documentación, comunidades donde nadie tiene una computadora, solo móbiles. La interfaz te tiene que llevar, que no haya un botón de \"modo experto\". Estetica que no dea miedo a los usuarios. Pedir ayuda a quien sabe de pedagogia, para que el aprendizaje sea más fácil. Pero hay temas técnicos que no hace falta que la gente aprende.\n\n\nGer:\nbajar la barrera de entrada y al mismo tiempo convidar quien quiera a meterse más. El soporteremoto (herramienta para recibir ayuda por internet https://foro.librerouter.org/t/nueva-herramienta-acceso-remoto/219/2) evita tener que instalar una VPN y muchas mas complejidades. Permite que otro te ayude compartiendote conocimiento.\n\n\nSAn: de repente no es geek-free.. se podría revisar.\n\n\nTomas: me parece interesante el objetivo final de que la persona tenga estos conocimientos técnicos. me parece que haya un punto inicial no demasiado complicado, ya que un conocimiento técnico no se puede aprender de un día para el otro. Me pasa con compañeros que me piden una mano para instalar un conocimiento técnico. Por ejemplo, puede ser usar un administrador de paquetes en un sistema como Linux. En windows les propongo chocolatey que es un administrador de paquetes para windows, que reduce la complejidad. La idea no es para descartar. Puede ser que hagamos discriminacion expertos/inexpertos&#8230;&#8203; sino terminamos por no usar aplicaciones visuales, solo consola&#8230;&#8203;\n\n\nNicoPace:\nhay consenso que los usuarios de primeras no tienen porque tener conocimiento pero que colectivamiente tendremos que intentar que la gente vaya aprendiendo. Hay mucha abstración que hemos implementado para generar la configuración, y esto ha complicado la comprensión de lo técnico que hay de abajo. Es importante documentar bien lo que hacemos para cuando alguien quiere entrar a modificar cosas o incluir un servicio local con, por ejemplo, un IP fijo o un nombre de dominio. Hemos vivido esta situación muchas veces y podemos aprender de esto sobre como transpasar conocimientos, en algún punto deberíamos priorizar a que los usuarios técnicos gestionemos la barrera de los no-técnico. Que el proyecto sigua siento geek-friendly y que haya espacio para no-geek.\n\n\nHiure:\ntrabajamos con comunidades indigenas y cuando logramos que tengan conectividad tiene impacto en la vida de las personas, por las informaciones que reciben por internet, sea positivas que negativas, pero tienen derecho de recibir esta información. Le llevamos los conocimientos mínimos técnicos. El LibreRouter vale en Brasil lo mismo que una computadora, por cuestión de tasas. Es importante hacer la formación de alguien en la comunidad y esto lleva mucho tiempo. La gente está encantada de ser el experto de la comunidad.\n\n\nSAn:\nuna lucha en paralelo sensibilizar la gente sobre el contenido que van a recibir una vez que tengan acceso a internet\n\n\nWilliam:\nencuentro con una empresa que da conectividad a comunidades, ellos lo gestionan en estilo de empresa, sueltando los cacharros y marchandose. Es importante hacer un seguimiento a las comunidades. Es importante entregar el conocimiento completo también.\n\n\nNicoPace:\nponemos un termino máximo para la próxima reunión en 2 meses\n\n\nGer:\nideal próxima reunión en febrero\n\n\nCONSENSUADO:\ntraspasar usuarios de lime-dev a lime-users y dejar de usar lime-dev - move the users from lime-dev to lime-users mailing list and stop using lime-dev mailing list\nred inicialmente geek-free: proponer en la lista de correo [ger ferrero: yo podría iniciar este hilo, luego de que San traspase los usuarios] - defining LibreMesh as a \"initially geek-free\" project, which means that we want to develop LibreMesh so that non-geek users can start using LibreMesh, but will be encouraged to understand the inner mechanisms if they want\npublicamos el acta en la lista de correo - this meeting log will be published in the lime-users mailing list\nla próxima reunión debería ser en febrero - the next meeting should be on February\n\n\n"}
,{
"location": "/report_2022.html",
"lang": "en",
"title": "LibreMesh 2022 Meetings",
"content": "\n2022-12-17\n\n\nPeople &amp; list of Topics\n\n\npedro, hiure, gio, ilario, cristina, luandro, duy\n\n\n\n\nupdates from Altermundi\n\n\nfuture meetings schedule\n\n\nwebsite\n\n\nlist active LibreMesh communities on the homepage\n\n\nnext BattleMesh\n\n\nrecent development\n\n\ntechnical meeting\n\n\n\n\nUpdates from Altermundi\n\nGio: babeld is the one with active developing and we are using in the framework of Libremesh.\n\n\nNEW from dev side of Librerouter/Libremesh: - 2 MIMO antennas have 2 different perception of the quality of the signal and Konejo is working on the UI in the Lime APP to give better feedback. The next interface for antenna alignment in lime-app will show two signals for each antenna that is MIMO 2x2, one signal for each \"chain\". This should work on most wifi chipsets (most routers).\n\n\nCristina: Are you doing this for all the devices that Libremesh actually support or only for Librerouter?\nAltermundi is focusing on LibreRouter (it has priority, if possible things are implemented for working also on other routers or easy for other people to adapt to every hardware) but Gio recognizes the importance of supporting other routers.\n\n\nLuandro: Is there a public roadmap for what u&#8217;ve been working?\nGio: I didn&#8217;t have the time to write a public roadmap. Lime-app is an important part of the roadmap.\n\n\nGio: a big hat that take together librerouter and libremesh\nThe goal of LibreMesh-LibreRouter developers is to make something useful for communities where there are no specialized people able to go deep in the networking.\n\n\nWork on Alter Mundi roadmap:\n- Lime-App: alignment with multiple chains\n- Rewrite of shared-state\n- Core parts: wifi driver, routing protocols (layer 2 &amp; 3)\n- El Repo\n- Ad-hoc &#8594; 802.11s &#8594; Access Point Mode with mesh support\n\n\nAlfred was the old tool we used for sharing information between nodes implemented by the B.AT.M.A.N-adv developers\nAlfred had problems on non-small networks and caused flooding in the networks\n\"shared-state\" is the new one implemented in the LibreMesh repository. For example, one of the features it has is that in the lime-app you see the information of the other antennas talking by \"shared-state\", like the hostname, SSID, the mac address..\nThe improvements of shared-state are being written by Javier supervised by Gio.\nThey will stop relying on OpenWrt&#8217;s HTTP server\n\n\nIlario: this code wil be pushed on the openwrt upstream packages? at the moment \"shared-state\" is a feature inside LIbremesh framework\nGio: at the moment not. Shared-state makes a lot of assumptions on how the network is configured, so it is likely to work only for LibreMesh networks, until now. There is work to do for making it general.\n\n\nLuandro: will the plugins need to be rewritten with the next version of shared-state?\nGio: we don&#8217;t know yet\n\n\nGio: we want to allow the communities to edit more parameters in a community-wide way from lime-app (now it is possible for the nodes' password), for example the wifi channel and to flash all the routers at once\n\n\nGio: another thing I am doing is to ensure that the low level stuff (wifi drivers, routing protocols) are improving. The problems could arise from the batman-adv not receiving enough active support, and maybe we could abandon L2 entirely. We also are looking into Babeld because it is not designed for our usecase so maybe we will need to add stuff to it.\n\n\nGio: we are also working on elrepo.io, which is the app-level stuff for network communities, for sharing contents between clients\n\n\nGio: regarding the wifi links, at the beginning we used adhoc that now is quite abandoned, then 802.11s that also is on the way of getting abandoned as in the new radios it does not work well. To avoid getting stuck with old radios, which means old routers, I am looking in a way to use Access Point mode instead of 802.11s, modifying it a bit so that we use it in a mesh way using something that is very well supported (AP mode). Anyway in LibreRouter we can always add PCI wifi cards.\n\n\n\nfuture meeting schedule\n\nnext meeting schedules seems ok\n* Saturday the 4th of February 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\n* Saturday the 1st of April 2023 at 13:00 UTC (15:00 CEST, 10:00 ART).\n* Saturday the 3rd of June 2023 at 13:00 UTC (15:00 CEST, 10:00 ART).\n* Saturday the 5th of August 2023 at 13:00 UTC (15:00 CEST, 10:00 ART).\n* Saturday the 7th of October 2023 at 13:00 UTC (15:00 CEST, 10:00 ART).\n* Saturday the 2nd of December 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\nRemeber one with the others with an email just a week before, ad promemoria\n\n\n\nwebsite\n\nIlario: the website is not keeping up with the changes on github/libremesh/lime-web\nGio: the website is hosted in Cordova but probably has not maintaince for years, so we have to fix this issue, where host the website..\nIlario: maybe some other community can host?\nGio: temporarily we can have it hosted on Github or Gitlab, as the website is generated as a static website, it should be enough to create a continuous integration for that.\nCri: better if we avoid Github, but it is ok if it is temporary\nLuandro: not a fan of Github either, but Github makes sense as the repository is already on Github\nGio: not sure who is maintaining the DNS\nIlario: better to fix what we have before doing it somewhere else.\nIlario &amp; Cri volunteer to maintain the server\nGio: the current maintainer for Altermundi&#8217;s servers didn&#8217;t mainain the servers (did other useful stuff anyway). The machines are in a critical state, many problems are there and some physical interventions are going to be needed.\nIlario: ok, you know the situation firsthand and suggest to move it, let&#8217;s do it\nGio: when we will have the server working again, the current integration stuff can be kept as a backup\nLuandro voluntering to the CI for the website and Ilario will give the access to the repo.\nDocumentation o how to setup Github pages: https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site\n\n\n\nnext battlemesh\n\npedro: next battlemesh in calafou! https://battlemesh.org/BattleMeshV15\nlooking for funding, to facilitate the travel of the farer people, Battlemesh will be between the 8 and the 14 of May.\nBattlemesh has the intent to compare an dialogate between the diferent community that develop the differents mesh protocols.  In the pas edition there where two firmware based on openwrt: libremesh and Gluon develop from freifunk, and was interesting the meetings. here video of the last https://battlemesh.org/BattleMeshV14\nIn the final assembly people move the attention on the community more that on the performance of the routing protocols.\nso is really good if we can yearly meeting in that event, in Battlemesh, as Libremeshh community,\n\n\nfrom 8 of 14 may in Calafou, bring hardwares! because the new calafou network needs. Because BEFORE the event we want restyle the network of the settlement (an old textile industry on a river) to give connectivity to their workshape and residential, but also set a testbed for net. There there is optical fiber, so we have to see how manage that expect, and some problem with rats. Plan to deploy 7 or 8 routers on differents levels of the building, some internal and some external. We have 5 good outdoor routers (Plasma Cloud PA1200).\nDuy, ilario and pedro are documenting in a private repository that intend to be public at some point https://0xacab.org/duy/wbmv15. Write to duy at sytemli dot org if you would like to be added\n\n\n\nRecent development\n\nNeed to update LibreMesh to work with  openwrt22, we will drop some devices that will be abandoned after OpenWrt19\nThe outdoor routers that we are going to use in BattleMesh are supported since OpenWrt 21.02, so that we need to update LibreMesh in order to use them.\ndifferent people are touching files and testing, but need work together\n\n\n\nTechnical meeting\n\nCri: we could have a meeting for testing LibreMesh on OpenWrt22\nIlario: important to test it on different routers (e.g. routers with only one ethernet port or routers with only 2.4 GHz etc etc)\nilario proposes to have a technical online meeting on Wednesday the 4th of January 2023 at 13 UTC&#8201;&#8212;&#8201;14 CET, 10 ART\n\n\n\n\n\n2022-10-28\n\n\nPeople &amp; list of Topics\n\n\nCri, at 13:15 utc, not other people come at the meeting.\nSo I took the time to move on the task of the last meeting, assigned to ilario and me: document the network profile in LiMe.\nhttps://github.com/libremesh/lime-web/pull/142\n\n\nI think we can try to call another meeting giving us before a list of topics to discuss, for december.\n\n\n\n\n2022-09-20\n\n\nPeople &amp; list of Topics\n\n\nCri, Ilario, Sam\n\n\nwe need to write a page on the website guiding the communities to write a network-profile - Cri &amp; Ilario will do that\n\n\naggiornare/scrivere lista delle comunità che usano libremesh, chiedere consenso di metterli in home page:\n\n\nComunity mesh network using Libremesh:\n\n\n\n\nhttps://antennine.noblogs.org   d&#8217;accordo\n\n\nhttps://moinho.app/sobre\n\n\nhttps://villagetelco.org/ (south africa)\n\n\nhttps://www.redfusalibre.org (colombia)\n\n\ninethi (south africa)\n\n\n? https://docutopia.tupale.co/s/NuestraRedOrg#\n\n\n\n\nOrganization promoting Libremesh:\n\n\n\n\nhttps://www.coolab.org/\n\n\nhttps://ibebrasil.org.br/\n\n\nhttps://altermundi.org\n\n\nhttps://ninux.org\n\n\nwakoma?\n\n\nLibrerouter.org\n\n\n\nPromuovere i contatti mastodon di questi gruppi!!**\n\n\n\n\n\n\n\nwe have a big problem with the \"distance\" parameter, now it is 1 km for 5 GHz and 100 m for 2.4 GHz. There is an \"auto\" setting for the ath9k???????????????????????? We have to underline this setting everywhere. https://github.com/aredn/aredn_ar71xx/search?q=distance&amp;type=issues we could have a setting like this: if a positive value is provided, just use the value; if a negative distance is provided, check somehow if the \"auto\" value can be used, otherwise use the absolute value as the distance. In Aredn they check for the existence of /sys/kernel/debug/ieee80211/$phy/ath9k before activating the auto setting.\n\n\nFor Freifunk communities based on Gluon the automatic distance / dynack feature is enabled by default (distance = 0 in UCI). However some communities have experienced issues with using dynack, leading to TX path hangs (stuck transmissions until resetting the wifi chip) especially in croweded areas and went back to a static distance setting.\n\n\nFreifunk Vogtland went first to 3km distance setting and still / again got TX path hangs and now settled to 1km:\n\n\nhttps://github.com/FreifunkVogtland/gluon/commit/86f517054c3ba4f352eee57db29f4d3de3e34f1d\nhttps://github.com/FreifunkVogtland/gluon/commit/a024c9ce6926\nhttps://github.com/FreifunkVogtland/gluon/commit/4f3d4edfe3\n\n\n\n\n2022-08-25\n\n\nPeople &amp; list of Topics\n\n\ntroian, cri, bruno\n\n\n1- charla libre - chiacchiere libere- conversa libre\n2- prosima reuniao - nextmeeting\nvamos a fazer un encuntro durante o Battlemesh con a pessoas que ficam: https://battlemesh.org/BattleMeshV14\nSetembro - Battlemesh\nOutubro - Online\n\n\n1-  conversa libre sobra o firmwares\n\n\nTroian está compilando LibreRouter para diferentes hardwares tp-link\nhttp://compila.ax.org.br:5000/\n\n\nCri usa o Libremesh e o Librerouter compilado para nos com estos profilo\n https://github.com/libremesh/network-profiles/tree/master/valsamoggia.ninux.org\n FIzeram esse perfil e nunca mais mudaram (muito poco :)\n\n\nBruno: precisamos organizar e publicar essa documentação\n\n\ntroian: o Librerouter já vem com tudo pronto e com muitos pacotes/recursos que os routers baratos não tem (usa memória demais). Ele vem com as últimas versões do LibreApp, PIrania, tá muito mais atualizado.\nPorque o LIbreRouter precisa de firmware específico? Por isso:\nhttps://www.youtube.com/watch?v=ZAfhClVVMMo&amp;t=25s\nhttps://www.youtube.com/watch?v=OmPXiS7P01s&amp;t=44s\n\n\nO Chef faz falta! Gerenciamento de perfis de comunidade, etc. Estava bem porque nos nao compilaram :)\n\n\nwe look together sharing the screen some new features that are missing by Libremesh (new piranha, remote support, wifi hot spot sharing, &#8230;&#8203;)\nTrazer limeapp, pirania, suporte remoto para o Libremesh\nNos em bologna as veces usamos tambem Luci porque esta bem por veder Rotes e ARP table, e tambem usamos ssh da cli. Mas a persona \"connectada\" usam so a App o telefonano a o contactos.\n\n\nChegaram duas domandas: - purque troquamos da bmx a babeld?\n- que diferencia esta tra librerouter e libremesh e que relazione entre os dues?\n\n\n\n\n2022-06-30\n\n\nPeople &amp; list of Topics\n\n\nluandro,cri, pedro,san, hiure, bruno\n\n\n1- round about what we are working on..libremesh or mesh topic\n2- news? about Altermundi/Gsoc works..\n3- new libremesh mailinglist .. comments?\n4- o nuovo metodo de revisao de PR, 1 revisao, trabalha?\n5- stato  libremesh in router que nao sao libre-router\n6- prosima reuniao\n\n\nBruno:\nHacer una ronda sobre el uso de otros routers com libremesh\n\n\n1e2- German esta trabalhando sobra o wizard de limeapp, optimizar a performance, .. (una otra que nao intendi)\nestà acompanhando Irina che principiò da uma semana o GsoC, esta fazendo estudo pareter uma rede virtuales de dispositivos libremesh , esta preparando o desenvolvimento do projecto AMPR.org .\n\n\nLime-app wizard/pantalla para conectarse a red ya existente\nTarda mucho para conectar a una red porque descarga informacion sobre todos los nodos antes de unirse\nProyecto AMPR - desarollo libremesh estabilidad de roteo (batman) y mas herramientas de monitorei\n\n\nCristina, no update\n\n\nSan:\nNo hizo trabajo nos ultimos meses, ma fizeste o cambio de lista (obrigado!! :)\n\n\nHiure:\n\n\nNueva versión de Pirana en la comunidad, instalación de librerouter os 1.5 con el nbuevo piraña\n\n\nLibrerouter, cpe210 e cpe510. Em Monteiro Lobato.\n\n\nchilombos=sao insediamento de umanos fugidos da esclavitù no seculo pasado.\nhanno montato una nuova rete in un chilombo\ncambiando el sistema a pirania, porque algunos pagan y otros no.\nhay solo una salido de 1mb a internet\n\n\nbruno:\nno update\n\n\n3- feedback do uso da lista: bueno\n\n\n4- PR se encerró en la ultima reuniao - solo habrá un review para los PR\n\n\n5-stato  libremesh in router que nao sao libre-router:\ncoolab quer invertir em   dar mais suporte para modelos que não são librerouter\n\n\nsan: ver se hay algun dispositivo que use el mismo chip que librerouter2 (SOC)\n\n\nhttps://downloads.openwrt.org/snapshots/targets/ramips/mt7621/\n\n\nhttps://www.mediatek.com.es/products/home-networking/mt7621\n\n\nAntenne que usamos https://antennine.noblogs.org/post/2021/12/15/tipi-di-antenne-che-usiamo/\nVersioni firmware: https://bin.campiinrete.org/openwrt19.07.7_lime2020.1/\n\n\nger: vai melhorar a confirguração dos poros ethernet cuando são redes que não são libremesh\n\n\n\n\n2022-04-23\n\n\nPeople &amp; list of Topics\n\n\n\n\ncri,txt,german,ilario, SAn\n\n\n\n\n1) round about what we are working on..libremesh or mesh topic\n2) News from AlterMundi&#8217;s: We got funded by AMPR.org\n3) News from GsoC (?)\n\n\n\n\nIrina Argarañás will be working on\n\n\n\n\n4) libremesh mailinglist &#8230;&#8203; check subscriptions and working (Cri..maybe Ilario?)\n5)Analysis of the implementation status of last meeting&#8217;s decisions\n6) Revisit double review for PRs in libremesh repos.\n7) Próxima reunión de proyecto / Next project meeting\n\n\nQuick Comunications: https://battlemesh.org/\n\n\nTemas dejados para próximos meetings - Topics left for next meetings:\n\n\n\n\nMetodos de participación para mejorar la inclusividad del proyecto (foro, wiki) / Participation methods for increasing the inclusion of community in the project (forum, wiki)\n\n\nDocumentación / Documentation\n\n\nComo usar las donaciones / How to use the donations\n\n\nTemas tecnicos? (soporte OpenWrt 21.02, QoS con TC) / Technical topics? (support for OpenWrt 21.02, QoS,using TC)\n\n\nAbierto para propuestas y otros temas / Open for proposals and other topics\n\n\n\n\n1) round about what we are working on..libremesh or mesh topic\nIlario: changed cityes, so in the last month has other topics to complete\ngerman: we got funded by AMPR, so I&#8217;ll be back working soon. I helped Selankon with the FirstBootWizard as he is improving the interface so that it gives more information.\ncri: maintaining the local mesh network, mounted new node, communication inside of the network, focus on contents creation inside the network and on human network between nodes, setting up Grafana found the good dashboard from and customized that is quite ready to share, working with Wireguard. I invited in this meeting Angelichi, who wrote a thesis on a greek mesh network. Battlemesh this year will be in September in Italy/Rome:\nhttps://dudle.inf.tu-dresden.de/battlemesh_v14/\nhttps://ml.ninux.org/mailman/listinfo/battlemesh\ntxt.file: listening :)\n\n\n2) News from AlterMundi&#8217;s: We got funded by AMPR.org (german)\nThere&#8217;s a roadmap, contributions are welcome and also let us know if you want to participate.\nFrom last meeting, https://docs.google.com/spreadsheets/d/1-dgUv9LE-VBIE6GDDUDDjVm9h4IrH9uqk8YXi-u3b18/edit#gid=0\nAltermundi received the grant, lasts 18 months, to work on it you need to talk with Altermundi members (e.g. German Ferrero), collaborations are possible, check the list of the topics\nThe grant is for software development and documentation.\nCri can help with the UX (user experience) and frontend, and sharing their usecase\nSome help could be needed to understand if Babeld and Batman-adv are correctly working in our setup; and whether there are missing content in lime-app\n\n\nIlario: We should collaborate with Babeld and Batman-adv developers for understanding whether our setup is optimal. In my opinion looks messy, it works but does not look correct. Some related discussions here:\nhttps://github.com/libremesh/lime-packages/issues/666\n\n\nCri: when using OpenWrt 21.02 seems that L2 is not working, as the mesh works only when using a different subnet (changing ap_name), so seems that level3 works (Babeld). it would be very interesting to understand more on how LibreMesh work internally with Batman-adv and Babeld.\n\n\nIlario: it is important to test LibreMesh on OpenWrt release candidates as in the past we managed to spot bugs in OpenWrt that were fixed in the final release, making it working amazingly for us\n\n\nCri: are we going to have a specific meeting for this?\n\n\nGer: in the AMPR roadmap we have a point on that, we can do the meeting and hackatons at that point\n\n\n3) News from GsoC (German)\n- Irina Argarañás (computer science student) will be working on \"Try LibreMesh without router\" which is for having virtual nodes and virtual mesh network. The scripts are more or less ready but they are not easy to find and the documentation is not enough. For sure we need a link from the webpage pointing to clear instructions for having virtualization running on one&#8217;s laptop. The goal is to have more contributors.\nhttps://projects.freifunk.net/#/projects?project=try_libremesh_without_having_a_router&amp;lang=en\n\n\n\n\nRaamiz Ali applied to Priorities with Pirania\nhttps://projects.freifunk.net/#/projects?project=implement_traffic_priorization_in_pirania_captive_portal_for_mesh_networks&amp;lang=en\n\n\n\n\nnow the mentors have to prioritize the students\n\n\n4) libremesh mailinglist &#8230;&#8203; check subscriptions and working (Cri..maybe Ilario?)\n\n\nIlario, Cri: Who are the maintainers?\nGer: Gui &amp; NicoE\nCri: how can we help?\nGer: writing an email to Gui\nSAn: Gui already knows that there&#8217;s the problem, is related to the reverse DNS that causes the bouncing of emails. But he does not have time to maintain.\nIlario: he has to accept help, because we really need the mailing list. Also Amuza volunteered for that.\nGer: I&#8217;ll ask Gui for access on the server.\nCri: Who does manage the DNS?\nSAn: Codigosur manages the DNS, so maybe we need to ask Codigosur for editing that. But nobody has time to support that. Codigosur was hosting that but when they stopped, Gui started hosting it. We can ask to other mailing list providers.\nIlario: Ninux server?\nCri: they did not implement DMARC which is a big problem with anybody using gmail. Framasoft? https://framalistes.org/sympa/ Autistici? https://www.autistici.org/services/lists Riseup? Mayfirst? Chatons? https://www.chatons.org/search/other\n https://www.chatons.org/search/by-service?service_type_target_id=114&amp;field_alternatives_aux_services_target_id=All&amp;field_software_target_id=All&amp;field_is_shared_value=All&amp;title=\nSAn: we could also donate money to the server that will host us.\nIlario: we have money from donations on OpenCollective\nhttps://opencollective.com/libremesh\n\n\nGer: los servidores de Altermundi estan caidos\nhttp://lists.libremesh.org/  &#8594; 404 Not Found\n\n\nIlario: We thank Gui for the great work done with keeping the list running when Codigosur stopped hosting. Should we propose on the list or on the chat asking where to host? SAn, can you take a backup of the subscribers list so that we can re-subscribe them in the new list? Should we do it right now or ask and wait one week?\n\n\nCri: I trust Autistici, Riseup and Mayfirst\n\n\nSAn: maybe we will not be able to keep the domain lists.libremesh.org but the direction will be different\n\n\nIlario, Cri: no problem.\n\n\nCri: when the situation will be stable and working, we can go back\n\n\nIlario: the collective we know more people from are Autistici, let&#8217;s use that\n\n\nCri: I can ask them. But the management will be done together? They are using Mailman2, thinking of migrating to Mailman3\n\n\nIlario: the 4 participants in this moment of the meeting could be the people having access to the mailing list management (SAn, Ger, Ilario, Cri). Maybe we&#8217;ll warn the people before mass subscription to the new list.\n\n\nDraft of mail:\nDear subscriber to the LibreMesh project mailing list,\nas you maybe noticed, we&#8217;re experiencing issues with the mail server hosted by Altermundi. We thank Altermundi for managing this service, but during this outage we are going to use an additional mailing list, in which we&#8217;re going to subscribe all the subscribers.\nThe new mailing list is going to be on Autistici/Inventati servers and you&#8217;ll receive a notification subscription shortly.\nCheers and have a good meshing!\nLibreMesh community\nImproved draft: https://pad.codigosur.org/kd0TzuZB1RWfYh-DGISH\n\n\n5) Analysis of the implementation status of last meeting&#8217;s decisions\nGer: we didn&#8217;t look very much for students for GSoC\n\n\n6) Revisit double review for PRs in libremesh repos.\nGer: this is keeping back the releases of LibreRouterOS, maybe one review is enough\nIlario: one is enough\nSAn: one is enough, I will change that\n\n\n7) Próxima reunión de proyecto / Next project meeting\n\n\nnext meeting in June\n\n\nGer: I will send out the Framadate\n\n\n\n\n2022-02-20\n\n\nPeople and topics\n\n\nguifipedro (hasta las 13:40 UTC), cri, hiure, ilario, luandro, ger, nicop, Mark Birss, may\n\n\nempezamos a las 13:15 UTC\n\n\nTemas - Topics - Orden del día:\n\n\n\n\nQué presentó AlterMundi a ARDC para financiar desarrollo en Libremesh. (ger ferrero)\n\n\nQué estuvimos haciendo en los ultimos meses (nicop)\n\n\nAnalysis of the implementation status of last meeting&#8217;s decisions\n\n\nGSoC projects presentation deadline is tomorrow\n\n\nPróxima reunión de proyecto / Next project meeting\n\n\n\n\nTemas dejados para próximos meetings - Topics left for next meetings:\n\n\n\n\nMetodos de participación para mejorar la inclusividad del proyecto (foro, wiki) / Participation methods for increasing the inclusion of community in the project (forum, wiki)\n\n\nDocumentación / Documentation\n\n\nComo usar las donaciones / How to use the donations\n\n\nTemas tecnicos? (soporte OpenWrt 21.02, QoS con TC) / Technical topics? (support for OpenWrt 21.02, QoS,using TC)\n\n\nAbierto para propuestas y otros temas / Open for proposals and other topics\n\n\n\n\nActa de reunión / Minutes of the meeting\n\n\n\n\nNicoP:\npropone añadir al orden del día el punto \"Qué estuvimos haciendo en los ultimos meses\"\n\n\nCri:\nprogramadora, centros sociales, brasil, 2016 salió de la ciudad para vivir, nodo LibreMesh v15 en montaña, ahora 50 nodos, muchas veces herida por dificultades con configuración LibreMesh, ajuda de Ilario y G10h4ck per configuración, aprender buildroot y linea mando LibreMesh, traducí unas paginas de la web, amore y odio por LibreMesh\n\n\nguifipedro:\nparticipo en guifi.net y exo.cat, usé qmp, libremesh, pero ahora gestiona con https://gitlab.com/guifi-exo/temba . interesado en facilitar conexión a personas, generar comunidades. compartir configuraciones que funcionan. por aquí estamos en bmx6 y esperamos algún día movernos a\n\n\n\n\nTHE ETHERPAD STOPPED SYNCING HERE, SO FROM HERE ON THE LOG IS RECONSTRUCTED BASED ON THE PARTICIPANTS' MEMORY\n\n\n\n\nQué presentó AlterMundi a ARDC para financiar desarrollo en Libremesh. (ger ferrero)\n\n\n\n\nAltermundi applied for a big grant from a amateur radio association https://www.ampr.org/ , they found the grant with short notice, maybe the content of the project can be edited also once it has been granted?\nGer wrote a large list of ideas with a planning spanning over one year and a half.\nhttps://docs.google.com/spreadsheets/d/1-dgUv9LE-VBIE6GDDUDDjVm9h4IrH9uqk8YXi-u3b18/edit#gid=0\nAltermundi is applying for grants as Altermundi is financially supporting some of the LibreRouter &amp; LibreMesh &amp; lime-app developers.\nThe amount of ideas and work is so huge that if the project is approved it is likely that more developers will be needed!\nSpecifically, if there&#8217;s someone with experience in UX (user experience) it would for sure be needed.\n\n\n\n\nQué estuvimos haciendo en los ultimos meses (nicop)\n\n\n\n\nGer, SAn &amp; Luandro were working on Pirania\nLuandro was working also on translations, shared this interesting local app (some not properti work in internet) https://moinho.app/\nThe others were also doing many amazingly cool stuff I cannot exactly recall.\nCri  said that in their network have now 1, and soon 3 antennas working with lime based on openwrt21, because discovered that the CPE512 V.3.2 tplink antennas are supported now starting from that version, so we are building for ourself to use the antennas, that where with airos, but we have some problem&#8230;&#8203; seems that level 2 not discovery other nodes, so changing the domain of our IP, mesh works &#8230;&#8203;.. ^^\nshared a presentation with the status of their 57 people for 25nodes network and the included services\nhttps://campiaperti.org/infra/2021-rc3.html\nMark Birss shared an interesting post from Luandro about LoRA+LibreMesh\nhttps://meshtastic.discourse.group/t/meshtastic-to-connect-remote-villages-deep-in-the-amazon/2643\n\n\n\n\nAnalysis of the implementation status of last meeting&#8217;s decisions\n\n\n\n\ntraspasar usuarios de lime-dev a lime-users y dejar de usar lime-dev - move the users from lime-dev to lime-users mailing list and stop using lime-dev mailing list\n\n\nSAn executed this\n\n\nred inicialmente geek-free: proponer en la lista de correo [ger ferrero: yo podría iniciar este hilo, luego de que San traspase los usuarios] - defining LibreMesh as a \"initially geek-free\" project, which means that we want to develop LibreMesh so that non-geek users can start using LibreMesh, but will be encouraged to understand the inner mechanisms if they want\n\n\nilario edited a bit the website https://github.com/libremesh/lime-web/commit/97223e8a830ca3e18e05b0b104a499db7d1e3583\nbut deeper edits are needed, mostly at the homepage\nCri proposes to add guides/interviews/pra for dealing with community management and human problems\nGer proposes to set the flow of the website so that is more human and less technical-topics oriented\nA submeeting has to be set for actually discussing the details and implementing them on the website\n\n\npublicamos el acta en la lista de correo - this meeting log will be published in the lime-users mailing list\n\n\nDone, but the archive of the mailing list is not working.\nSAn will push Gui to fix that\n\n\nla próxima reunión debería ser en febrero - the next meeting should be on February\n\n\nThe meeting has been in February (thanks to Cri for managing the scheduling) and the participation was of 8-9 people (more than what we expected from the Framadate)\n\n\n\n\nGSoC projects presentation deadline is tomorrow\n\n\n\n\nhttps://developers.google.com/open-source/gsoc/timeline\n\n\nilario points out that we should review our communication systems for avoiding that we get to know this the day before the deadline\n\n\nthe existing projects proposals are here https://projects.freifunk.net and all the LibreMesh-related proposals are from the last year.\nIn order for Freifunk to be accepted in the program, the projects are important.\nWe should contribute new projects here (and maybe delete some old ones):\nhttps://github.com/freifunk/projects.freifunk.net-contents/tree/main/collections/_projects\nthe template is here:\nhttps://github.com/freifunk/projects.freifunk.net-contents/blob/main/README.md\nAll of us will write the projects\nSAn will make the pull requests\n\n\nA brainstorming follows, more or less with the following proposals:\n\n\nSAn:\nthe projects have to be centered on coding\n\n\nilario:\nQuality of Service (Traffic Control) included in Pirania, for having a guests access with low priority and a \"node owner\" or \"person with voucher\" with high priority. This should be more or less easy for the gateway node (just creating two interfaces, an open one with low priority and a closed one with high priority), but less so for the others. Amuza and SAn could be mentors.\n\n\nname: \"Implement Smart Queue Management in Pirania captive portal for mesh networks\"\ndesc: \"Pirania captive portal is a voucher-based captive portal used in LibreMesh. In order to have guest access, this should have a lower priority, managed via Traffic Control.\"\nrequirements:\n - \"The applicant needs to have understanding of networking in mesh networks.\"\ndifficulty: \"high\"\nsize: \"full-time\"\nissues:\n - \"https://github.com/libremesh/lime-packages/issues/261\"\n - \"https://github.com/libremesh/lime-packages/issues/244\"\nmentors:\n - SAn\n - ??????????????????Amuza??????????\n - Ilario\ninitiatives:\n - GSoC\ntags:\n - LibreMesg\n - Pirania\n - TC\n - SQM\ncollaborating_projects:\n - \"LibreMesh\"\n\n\nPirania captive portal is already in production in some community networks running LibreMesh on their routers.\nThe usage of Pirania helps the community to pay the bill from the internet service provider.\nBut LibreMesh project also tries to open the access to the local and remote digital resources to everyone, and for this reason the availability of a guest access would be reccomended.\nThis will require that the presence of a connected guest client does not slow down the connection of the owner of the gateway or of who actually paid for having a Pirania voucher.\nIn order to achieve this, the data packets needs to have different priorities depending on the originating client, diregard the mesh node (access point) this client is connected to.\nThe problem is absolutely non-trivial, and the technical tools needed will be at least Traffic Control, Smart Queue Management, and iptables.\n\n\nMilestones GSOC 2022\n\nGSOC 2022 COMMUNITY BONDING\n\n\n\n\nConceptual work should produce a coherent proposal to be submitted to the community for the review.\n\n\nThe student have a fork of the lime-packages repository and have learnt the basics of Git.\n\n\nThe applicant should have joined all of the communication channel of the project and met the community in the periodic online meetings.\n\n\nAn initial blog post will be written, with the invitation to propose alternative solutions for the identified challenges.\n\n\n\n\nGSOC 2022 MIDTERM\n\n\n\n\nConceptual work should be completed, the functions to be implemented and the tools should be fixed.\n\n\nThe applicant should have a working testing platform, either physical or virtual.\n\n\nThe applicant should be familiarized with LibreMesh configuration and running.\n\n\nThe applicant should be familiarized with Pirania configuration and running.\n\n\nThe applicant should be familiarized with iptables configuration and running.\n\n\nThe applicant should be familiarized with Traffic Control for Smart Queue Management configuration and running.\n\n\nA mid term blog post will be written.\n\n\n\n\nGSOC 2022 FINAL\n\n\n\n\nThe patch for Pirania should be functional even if not completely polished.\n\n\nEverything has to be reviewed and merged.\n\n\nUnit testing tests should be ready.\n\n\nDocumentation should be available.\n\n\nA final blog post will be written.\n\n\n\n\nCri:\nproblem of self-signed SSL certificates for services internal to mesh networks (e.g. if one member offers a file server, its HTTPS certificate should be recognized as valid), should we offer some solution? Or a guide on how to register a certificate for the public domain and how to use this for issuing certificates for the subdomains to copy on the local services? Luandro could be mentor.\n\n\nCri:\nLibreMesh on OpenWrt 21.02 seems working but surely it will require more work\n\n\nGer:\ndocumenting a clear way for techie people to test LibreMesh in a virtual environment so that they can understand and try it before actually buying the routers. SAn proposes to make a Docker with everything configured for this scope.\nsome ways of managing the virtual machines with LibreMesh are described here:\nhttps://github.com/libremesh/lime-packages/issues/389\n\n\nilario:\nan smartphone app for easing the connection to thisnode.info\nGer &amp; SAn: this is already included in Thomas' app made in last year&#8217;s GSoC\nhttps://github.com/Patacon13/LimeApp\nbut more work could be needed and it could be included in an app store (F-Droid?)\n\n\nGer?:\nproblems with the routing protocols, which are made for dealing with stuff like mobility that we do not usually have (nodes are fixed)\n\n\n\n\nPróxima reunión de proyecto / Next project meeting\n\n\n\n\nThere is consensus on the fact that the next meeting should be in April.\n\n\n\n"}
,{
"location": "/report_2023.html",
"lang": "en",
"title": "LibreMesh 2023 Meetings",
"content": "\n2023-12-02 PROJECT MEETING\n\n\nSaturday the 2th of December 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nTime: 13:00-14:16 UTC\n\n\nPeople: Cri, Chris\n\n\nWelcome Chris, he is a Linux System Administrator from Minnesota, U.S.A\nCri shared documentation from antennine network\n\n\nWebsite\n\nwe have the possibility to keep the same structure of the old website: jeckyll + ascii-doc but with a different theme: this is good because the content input can be txt file, and we reuse txt file to put the doc in the firmware and be readable by browser.\n\n\nCris: I&#8217;m happy that we keep the old habits about the structure oof the content, but with this restyl we move in a more fashionable shape. And I think is motivating also to update the documentation :) that probably the next work that we have to do&#8230;&#8203; for the new year\nChris: I think the new theme looks nice. (But I am not a designer)\n\n\nFrom this assembly the opinion looks positive to the merge of the \"new restyle\" of the website. we wait a week to see reaction in mailinglist, and after I(Cris) can accept merge request.\n\n\n\nTesting\n\ntwo people answered to this call https://lists.autistici.org/message/20231101.163202.5a0742ed.en.html\nI, Cris, think that both are trustable people.. I expected that some of them come to this meeting, but this not happen.\n\n\nScenarios to check:\n\n\n\n\nchecking if the internet connection internet1 goes down, if the wifi\nclients (common AP name) still have connection\n\n\nchecking if the internet connection internet2 goes down, if the wifi\nclients (common AP name) still have connection\n\n\nchecking if the internet connection internet1 goes down, if the cabled\nclients (on dual_band#2) still have connection\n\n\nchecking if the internet connection internet2 goes down, if the cabled\nclients (on dual_band#2) still have connection\n\n\nchecking roaming, e.g. with an audio call\n\n\ndefine exactly how router wire to router is connected: LAN to LAN with\nmesh configuration e.g.\nhttps://github.com/libremesh/network-profiles/tree/master/calafou#lime-community-configuration-3\n\n\n\n\nPony proposal and devices: https://lists.autistici.org/message/20231126.160655.2b35dc1f.en.html\nCris: good point that the devices are with DSA.. not clear \"None of them are running babeld though\" and not clear if this is give problem to test, for example the first 2 scenarios:\n\n\nHiure https://lists.autistici.org/message/20231106.130003.64e0e1be.en.html\nCris: Good point is that can have a test in a real infrastructure. I would like know if the devices are with DSA or not..\n\n\nwe can wait answer in the mailinglist, if is present DSA on the devices is better to test because is one of the new feature present in openwrt23 and 23.\n\n\n\nName of the new release\n\nGio proposed Fantastic Forwarder https://lists.autistici.org/message/20231027.124816.b94a37d1.en.html\n\n\nFor this assembly the name sounds good!\n\n\n\nGSoC2024\n\nwe just introduced the topics.. we are happy to listen proposals in the next weeks in the mailinglist.\nthe last year with the opportunity and money (circa 3k euro) from th GSoC we wrote Ansible roles to automated the build of the Libremesh release candidate. and this was really good for the Libremesh project.\nSo lets go to think something of improving for the next year. The work will be done in summer 2024 and we need also 2 people that apply as Mentor.\nwe can propose probably 2 projects.. but all the year depend from freifunk and google how many project can be really realized.\n\n\nTopics:\n* Assign the work-grant for testing the release candidate\n* Website restyling, e.g. https://libremesh.antennine.campiinrete.org\n* Next release name\n* GSoC2024\n\n\n\n\n\n2023-11-01 PROJECT MEETING\n\n\nWednesday the 1st of November 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nPeople\n\n\nSAn, Ilario, Ger, Cri, Gothos, Maden\n\n\nTopics\n\n\n\n\nHow to use donations (buying hardware?)\n\n\nNews about Altermundi roadmap 2023\n\n\nWhere to store the log of the meetings\n\n\nOpenWrt 22 or OpenWrt 23 as a base for the next release candidate?\n\n\nOutdated release server\n\n\nFree discussion about other projects and LibreMesh\n\n\nFirmware signatures\n\n\nNext meeting\n\n\n\n\nPast meeting topics:\n* news\n* website and documentation update\n* need of a Docker image for unit testing on OpenWrt 22.03\n* decide the list of targets for being compiled for release 2020.2 based on OpenWrt 19.07\n* upcoming release LibreMesh 2020.2\n* News about Altermundi roadmap 2023 ?\n* how to use the donations on OpenCollective (e.g. a compilation server, or donation to Battlemesh) https://opencollective.com/libremesh\n* news about battlemesh\n* next meetings dates\n* resume of previous technical meetings and announcement of next technical meeting date\nfor the next TECH meeting:\n* proposal: move the report in the wiki of github? another wiki? what is thi?https://gitlab.com/libremesh\n* Check that issues and the label is:issue is:open label:\"in progress\"  is actulized\n    https://github.com/libremesh/lime-packages/issues/\n* future release LibreMesh 2023.1 (based on openwrt-22.03)\n* prioritise a list of issues to be resolved for the next LibreMesh 2023.1 release based on OpenWrt 22.03 https://github.com/orgs/libremesh/projects/3/views/1\n* decide a list of packages to be included in next LibreMesh 2023.1 https://github.com/libremesh/libremesh.github.io/issues/103\n* This question from Elektra during past tech meeting: - How are people porting new devices?\n    Relevant?:\n    https://communitynetworks.group/t/expanding-openwrt-libremesh-hardware-support/790/5\n    https://communitynetworks.group/t/openwrt-libremesh-image-building-learning-group/823\nFor next project meeting:\n* introductions and recent projects and contributions related with LibreMesh\n\n\nHow to use donations (buying hardware?)\n\nOld decision: stickers to be printed by people attending events.\n\n\nCurrently we have 617 $\nhttps://opencollective.com/libremesh#category-BUDGET\n\n\nWe need to write an email defining for what the money can be spent. The decision would be taken in the project meetings.\n\n\nFrom the meeting minute of 2023-04-01:\n\n\n\n\npay the travel to the battlemesh for some of librerouter/altermundi (maybe next year or another event)\n\n\npay the travel for the travel to battlemesh for some people of Antennine (maybe next year or another event)\n\n\npay the update of the server of downloads CodigoSur? Chiede Cri\n\n\nbuy some stickers LibreMesh YES\n\n\ndonation for the domain name? for the newsletter?\n\n\nemail @libremesh.org? [20231101 nah]\n\n\nhardware per testare il supporto?\n\n\n\n\nGer: the priority should be having a release\n\n\nNew proposals:\n\n\n\n\nPay someone for some testing hours\n\n\nGothos? (Ilario asks)\n\n\nProposing to everyone in the mailing list (Ilario writes) and the final decision is taken in the project meeting\n\n\nWe can offer 550 $, keeping 67 $ for stickers\n\n\nDefine object for payment: make a release\n\n\nTest on two different router models\n\n\nReport the observed issues\n\n\nSolve the issues if possible\n\n\nDefine price per hour: 20 $/h\n\n\nThis could also attract more donations, as now they will have a clear use\n\n\nPay hardware for testing for the release\n\n\n\n\nMinimum testing scenario:\n\n\ninternet1 --wire-- dual_band#1 --wifi-- dual_band#2 --wire-- single_band#1 --wifi-- single_band#2 --wire or wifi-- internet2\n\n\nRequirements for dual_band router:\n* at least 1 radio at 2.4 GHz\n* at least 1 radio at 5 GHz\n* DSA supported\n\n\nRequirements for single_band router:\n* maximum 1 radio at either 2.4 GHz or 5 GHz\n* DSA supported\n\n\nRequirements for internet connections:\n* internet1 and internet2 should preferably be two different internet connections, but if they are the same it is ok\n\n\nPhysical setup requirements:\n* none, even if all the routers are on the same table it is ok\n* wifi channels have to be selected for avoiding wifi connections between routers that are not indicated as connected (i.e. dual_band#1 and dual_band#2 should be on the same channels. single_band#1 and single_band#2 should be on the same channel, but a different one from the one used by the dual band routers)\n\n\nScenarios to check:\n\n\n\n\nchecking if the internet connection internet1 goes down, if the wifi clients (common AP name) still have connection\n\n\nchecking if the internet connection internet2 goes down, if the wifi clients (common AP name) still have connection\n\n\nchecking if the internet connection internet1 goes down, if the cabled clients (on dual_band#2) still have connection\n\n\nchecking if the internet connection internet2 goes down, if the cabled clients (on dual_band#2) still have connection\n\n\nchecking roaming, e.g. with an audio call\n\n\ndefine exactly how router wire to router is connected: LAN to LAN with mesh configuration e.g. https://github.com/libremesh/network-profiles/tree/master/calafou#lime-community-configuration-3\n\n\n\n\nAdditional tasks:\n\n\n\n\ndocument how to set ethernet interfaces for mesh only or clients only\n\n\n\n\n\nNews about Altermundi roadmap 2023\n\nCri asked in the ML\nSAn answered that is working in the hardware of LibreRouter2\n\n\n\nWhere to store the log of the meetings\n\nML is ok\nWebsite also ok (the archive of the ML is public anyway, so public is ok)\nCri will copy the info to the website\n\n\n\nOpenWrt 22 or OpenWrt 23 as a base for the next release candidate?\n\nCurrently, the release candidate 2023.1 is based on OpenWrt 22\n\n\nIlario: 23\nSAn: 23\nMadez: 23\nCri: 22 or 23 are ok\nGothos: 23\n\n\nIlario: let&#8217;s name the new release candidate 2024.1-rc1\n\n\nSCENARIO ESISTENTE:\n\n\nrete mista openwrt &amp; libremesh, feedback that the developing of libremesh is not enought fast as openwrt to releasing. Which relation there is with gluon? and which different?\n\n\nIMAGES ARE ALREADY AVAILABLE:\nhttps://firmware-libremesh.antennine.campiinrete.org/releases/master-ow23/\n\n\n\nFree discussion about other projects and LibreMesh\n\nDiscussing technical solutions in Gluon\nGothos: Would be good to have a network-profile compatible with Gluon\nDiscussing the problem of slow release cycle in LibreMesh\n\n\n\nOutdated release server\n\nThe server is outdated and is impossible to install anything.\nFor some next meetings we need to think about it!\n\n\n\nFirmware signatures\n\nCheck the \"# Add new signing keys\" section of this email:\nhttps://lists.autistici.org/message/20230929.142923.34529fc1.en.html\n\n\nScreenshots from Github:\n\n\n![](http://pad.cas.cat/uploads/upload_4b83edf87044537c4fb31a3d41dff49d.png)\n\n\n\nSeems that the keys cannot be accessed, so we either find who has the original key or we upload a new one.\n\n\n\n![](http://pad.cas.cat/uploads/upload_e233e33ddc420710505b5d67e86df88d.png)\n\n\nIlario writes to the people who could have the original key.\nIf noone has it, we will just upload a new one/pair during the next project meeting.\nMaybe the key on Github is the same also on the repo server.\nGothos will check.\n\n\n\nNext meeting\n\nSaturday the 2th of December 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\n\n\n\n2023-10-07 PROJECT MEETING\n\n\nPeople &amp; list of Topics\n\n\ncri, ilario, mwarning42\n\n\n\n\nAnnuncing the new releases\n\n\nScheduling next meeting\n\n\nTesting release candidate\n\n\nChecking status of decisions of last meeting\n\n\nCommunication problem\n\n\n\n\nChatting for audio test\n\n\nNice fresh video:  https://media.ccc.de/v/camp2023-57058-resilient_solar_energy_autonomous_infrastructure_with_freifunk_openmppt_controllers\n\n\nAnnuncing the new releases\n\n\\o/ yhuuuu Lime 2023.1 is out!\nhttps://lists.autistici.org/message/20230929.142923.34529fc1.en.html\nhttps://lists.autistici.org/message/20230929.152044.f1940e95.en.html\n\n\nfirmware selector!!\nhttps://repo.libremesh.org/selector\n\n\nOne small problem with the compiled images:\nthey already include a populated /etc/config/lime-community.\nThis should create a conflict when someone will include (compiling it in or via OPKG) a network-profile\nGothos will compile them again. He originally included the libremesh-default network-profile\nAlso, some lines are different from the lime-defaults: https://github.com/libremesh/network-profiles/issues/91\n\n\nTO DO:\n- write a News in the news section (Cri, done)\n- change the menu item in the website: Get the last release! (ilario, done)\n\n\nA new stable release and a release candidate for Openwrt 22!\n\n\nWe released a new version of Libremesh based on OpenWrt 19!\n\n\nhttps://downloads.libremesh.org/releases/2020.4-ow19/\n\n\nand a new release candidate based on OpenWrt 22:\nhttps://downloads.libremesh.org/releases/2023.1-rc2-ow22/\n\n\nThis means that the release candidate needs testing, bug fixing and\nloads of community love so that we can have an amazing release that can\nactually ease the creation of community networks everywhere.\n\n\nCheck out the: https://lists.autistici.org/message/20230929.142923.34529fc1.en.html\nhttps://lists.autistici.org/message/20230929.152044.f1940e95.en.html\nfor more detailed information.\n\n\nAnother great gourgeous news is that from now we have a Firmware Selector, check it out here:\nhttps://repo.libremesh.org/selector\n\n\n\nScheduling meetings 2024\n\nKeeping each 2 months, first Saturday of month, but adding some extra infraweek days to ease the participation to people who cannot on Saturdays\n\n\nNext year we use a new pad XD  &#8594; disroot use the plugin to have header and it is possible have a Table of Contents\nhttps://pad.disroot.org/p/LibreMesh_meetup_2024\n\n\nAdding some meetings matching the Spanish bank holidays&#8230;&#8203;\nRemember to invite developers that we never see during 2023 and remember to them about \"community meeting\": konejo, javier,\n\n\nUpdate: https://libremesh.org/communication.html &#8594;\nWednesday the 1st of November 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\nSaturday the 2th of December 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\nThursday 4th of January 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\nSaturday the 3rd of February 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\nSaturday the 6th of April 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\nSaturday the 1st of June 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\nMonday the 24th of June 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\nSaturday the 3rd of August 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\nWednesday the 11th of September 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\nSaturday the 5th of October 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\nFriday the 1st of November 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\nSaturday the 7th of Dicember 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\n&#8230;&#8203;\n\n\n\nTech topics to discuss:\n\n\n\nfirmware signatures\n\n\nil server delle releases has barely enough storage space and old software.\n\n\n\n\n\nDonations\n\n\n\nFatto curioso di donazioni \"spontanee\" in chat, che ne pensiamo? Good, but it would be better to have them managed via OpenCollective.\n\n\nWe should announce that the donation money is available for buying hardware for developers\n\n\nFSFE sono interessati a community wireless network per sapere che hardware proprietario ma con software libero usiamo, Cristina gli scrive..\n\n\n\n\n\n\n\n2023-08-05 PROJECT MEETING\n\n\nPeople &amp; list of topics\nilario(cat), Cri(it), Troian(br), mwarning(berlin), Arinc(Türkiye), Gothos(it)\n15:07 - hope to finish 16:07\n\n\n\n\nnew release based on old OpenWrt\n\n\nnew release candidate based on recent OpenWrt\n\n\nadding and removing people with access to repo server and Github organization\n\n\nstickers done for battlemesh - https://repo.libremesh.org/tmp/stickers/\n\n\nStarting using Attended SysUpgrade\n\n\nTechnical meeting: - proposal-\n\n\n\n\nNew release based on old OpenWrt\n\n\n\nbased OpenWrt 19\nThere is a tag\nhttps://github.com/libremesh/lime-packages/tree/2020.3\n\n\n\n\nhttps://github.com/libremesh/lime-packages/commits/master\n\n\nWe are waiting to decide whether to increase the default distance parameter\n\n\nwe want relase after decide about \"default distance\"\nhttps://github.com/libremesh/lime-packages/issues/201\nhttps://github.com/libremesh/lime-packages/blob/v2020.3/packages/lime-system/files/etc/config/lime-defaults#L62-L75\n\n\nSome data from Gothos and Ilario, with a script for replicating the analysis\nhttps://github.com/ilario/wifi-distance-setting-exploration\n\n\nExperience on distance parameter:\nCri: in our community with directional links, 10 km is a good default because people can flash the antenna/router by themself and see that Lime works. in other case, they\nTroian: we are using omnidirectional routers 80 m away from each other, in a line of 3 to 5 routers, so we flash the firmwares with other distances\n\n\n\nNew release candidate based on recent OpenWrt\n\n\n\nbased OpenWrt 22\n\n\n\n\nPossible point for a release: https://github.com/a-gave/lime-packages/tree/v2023.1\n\n\nAnsible tool used to do this release candidate: https://gitlab.com/a-gave/libremesh-ansible-playbooks\n\n\nhere local community repo with this release, but with name Master, that is not the best..\nhttps://firmware-libremesh.antennine.campiinrete.org/releases/master-ow22/targets/\n\n\nLet&#8217;s create the 2023.1 branch, add the commit for setting the release name\nhttps://github.com/libremesh/lime-packages/commit/88251b8dbca19783a24b56d29205f8c1d63244ca\nand tag v2023.1-rc1\nIlario will do this.\n\n\nGothos will use the new Ansible tools for compiling the release candidate\n\n\n\nAdding and removing people with access to repo server and Github organization\n\nPeople with access to the repo.libremesh.org:\n\n\n\n\naparcar\n\n\ndbellomo\n\n\ngio\n\n\ngui\n\n\nilario\n\n\nnicopace\n\n\npablo\n\n\nspiccinini\n\n\ndaniel\n\n\ngferrero\n\n\nguido\n\n\njoaquin\n\n\nnicolas\n\n\np4u\n\n\n\n\nAdding: Gothos, Cri\nIlario asks if it is ok to add them, with a deadline of a week.\n\n\nPeople in the LibreMesh organization on Github:\n\n\n\n\naltergui    Gui\n\n\namuuza    amuza\n\n\nandrenarchy    André Gaul\n\n\nAngiieOG    Angie\n\n\naparcar    Paul Spooren\n\n\naxn    Axel Neumann\n\n\nbennlich    Benny Lichtner\n\n\nbrunovianna    bruno vianna\n\n\ndangowrt    Daniel Golle\n\n\nfnbellomo    fnbellomo\n\n\nFreifunkUFO    FreifunkUFO\n\n\nG10h4ck    G10h4ck\n\n\ngabri94    Gabriele Gemmi\n\n\ngermanferrero    Germán Ferrero\n\n\nhiurequeiroz    Hiure\n\n\nilario    Ilario Gelmetti\n\n\nnicoechaniz    nicoechaniz\n\n\nnicopace    Nicolás Pace\n\n\nnordurljosahvida    Nicolas North\n\n\np4u    Pau\n\n\nPabloCastellano    Pablo Castellano\n\n\nraylas    Raymond Douglas\n\n\nselankon    selankon\n\n\nspiccinini    Santiago Piccinini\n\n\n\n\nHow to add people: once per year sending an email explaining the criteria for applying. Then during the community meetings in August, accept people is there are not contrary reason.\nCri sends the first email\n\n\nAdding:\n* Cri github.com/digitigrafo\n* Daniel Golle? https://github.com/dangowrt - let&#8217;s ask\n* Gothos https://github.com/a-gave\n* Jorge https://github.com/javierajorge - let&#8217;s ask\n\n\nIlario asks to Jorge, Daniel Golle\nUpdate: I don&#8217;t have any contact of Jorge\n\n\n\nStickers\n\nwe have to give back the money to ilario\nIlario will try to collect them from OpenCollective\nUpdate: I managed to request the money on OpenCollective, it is easy!\n\n\nSome people on the chat asked stickers\nIf a big community or an event wants to have the stickers they can print them and we pay the printing with the money from donations on OpenCollective\n\n\ndetails for printing stickers:\nhttps://lists.autistici.org/message/20230509.143549.d28a5cc1.en.html\n\n\nfiles:\nhttps://repo.libremesh.org/tmp/stickers/\n\n\nsome events where we can be and give stickers https://foss.events/:\n   *  https://hackmeeting.org/hackit23/\n   * https://www.internetfreedomfestival.org/\n   * https://2k22.balccon.org/\n\n\n\nStarting using Attended SysUpgrade\n\nASU is amazing. It uses the OpenWrt ImageBuilder\n   If we want to use the official ASU server, we need to use ODHCPD for IPv6:\n       https://github.com/libremesh/lime-packages/issues/294\n   I we set up our own ASU server, then there are just tiny things to fix:\n       https://github.com/libremesh/lime-packages/issues/1000\n\n\n\nTechnical meeting: - proposal-\n\n13 UTC Thursday 17th August\n\n\nfinish at 16:20\n\n\n\n\n\n2023-07-03 PROJECT MEETING\n\n\nPeople &amp; list of topics\n\n\nCri, Gio, gothos\n\n\nThurdayday the 13rd of July 2023 at 14:00 UTC (16:00 CEST, 11:00 ART).\n\n\nUpdates\n\nGio sta lavorando sul plugin(?) shared state, non è un pacchetto essenziale nell&#8217;ultima release LiMe2020, ma lo sarà nel futuro xchè da un sacco di info, in pratica lo si sta riscrivendo da LUA a C++. il tempo per fare altro è poco.\n\n\nCome supportare Openwrt 22.05? stan cambiando un sacco di cose, si rischia che la prossima non sia di nuovo compatibile con la precedente\n\n\ndalla comunity antennine.noblogs.org abbiamo sperimentato e funziona LiMe 2023.1 per le tplink CPE 510 v3\n, che non supportano la versione 19 di OpenWrt, ora stiam testando anche le mikrotik Router Board Light Head 5 https://openwrt.org/toh/hwdata/mikrotik/mikrotik_lhg_5\n\n\nGio per lavorare si basa perlo più su OpenWrt development\n\n\nCri dice che pubblicherebbe i devices provati in valle per dare segno dal sito che LiMe sta andando a supportare le nuove release di OpenWrt\n\n\nCome si fa una release candidate?\n\n\nin teoria si fa un tag e poi si fa andare una suite di test, e poi un po a mano la lime-app\n\n\nIndividuare il commit che si è testato:\n    siam sulla master\nCommit: 10e9bf65684708d5739ada850fd280a6abf3cc72  di https://github.com/libremesh/lime-packages\n\n\nATTENZIONE ci sn differenze di build tra il buildroot e l&#8217;imagebuilder: non ci stampa nel banner il commit della versione libremesh usata per buildare, non abbiam indagato sul perchè..\nAltro esempio inserisce batctl-tiny invece che completo\n\n\nConveniamo che Libremesh è basato sul buildroot, e in realtà non garantiamo da nessuna parte che davvero concluda le build identiche con l&#8217;image builder\n\n\nArchitetture da compilare x la Release Candidate:\n    ath79\n    mediatek   ( per tutti e 2 ? )\n    qualcom atheros\n    ralink\n    x86\n    usermod linux\n\n\nverificati in questa lista: https://downloads.openwrt.org/releases/22.03.4/targets/\n    ath79\n    mediatek\n    x86\n\n\nuna volta compilati i pacchetti con la buildroot&#8230;&#8203;  o anche la buildroot completa, conviene metterla sul server http che esponiamo: https://downloads.libremesh.org/releases/\n\n\nMettere anche i pacchetti volendo tutti buildati uno per uno, però è una mega sbatta, mettendo la buildroot intera, cmq ha tutto. Pacchetti singoli flaggato M, si potrebbe mettere anche nel file di configurazione di opkg.. alcuni device vogliono i pacchetti aggiuntivi compilati nella stessa build con cui è stato compilato il kernel.\n\n\nhttps://downloads.libremesh.org/releases/2020.1/targets/ath79/generic/packages/\n\n\noppure un tar.gz con tutta la buildroot che ha buildato.\nOppure mettere una immagine docker che ha dentro  il tutto, così è riproducibile totalmente.\n\n\nOK, ci vuole un po di tempo per buildarle tutte.. le mettiamo a fare.\n\n\nUna volta che si hanno i bin e il tar.gz della buildroot. scrivere in lista LiMe ed o Ilario o .. che possono pubblicare il tutto.\n\n\nVARIE: rispetto a libremesh curtigghio, è  una possibile strada del futuro in quanto 802.11s è una vita che non lo aggiornano.\nGio riprenderebbe più avanti a lavorare su quello. Bello se ci lavorano altri di OpenWrt.. lui può supportare\n\n\n\n\n\n2023-06-03 PROJECT MEETING\n\n\nPeople &amp; list of topics\n\n\nSaturday the 3rd of June 2023 at 13:00 UTC (15:00 CEST, 9:00 ART).\n\n\nTopics:\n* Analysis of the implementation status of last meeting&#8217;s decisions\n* Next tech meeting dates\n* sending stickers to communities or allowing communities to print stickers and pay them from the donations on the OpenCollective?\n* check if communication channel is working and if is clear the decision making workflow (the method is not decided but the workflow yes&#8594; dic 2021 ), write in website.\n* write a roadmap of LibreMesh for the next 6month\n\n\n\n\nrelease of lime 2020.3 (openwrt19)\n\n\nrelease of lime 2023.1 (openwrt22)\n\n\n\n\nTo do for next meetings\n\n\n\ncheck the design of the project after half and 1 year (dic 2021&#8594;june 2023)\n\n\nchecking our web presence match with the design of the project\n\n\nupdate the list of \"owners\" and \"members\" on the Github organization \"libremesh\"\n\n\nfix translation from &#8230;&#8203;\n\n\ndecide and planning where move the website (we said that github is temporary&#8230;&#8203;)\n\n\nfix the list of older release,\n\n\ntest how publish next release,  (2023.1 release based on OpenWrt 22.03 is quite far from being ready)\n\n\nannuncing/documenting next release (2020.3 based on OpenWrt 19.07 would be ready to release, but we could release it as 2020.4 with an increased default \"distance\" parameter for the 5 GHz radios)\n\n\nupdate list of used hardware.. (e.g. adding PlasmaCloud PA1200, Xiaomi MiRouter 4A Gigabit Edition)\n\n\n\n\n\nLong list of topics by the previous meetings: decision making, etc&#8230;&#8203;\n\nhttps://pad.codigosur.org/LibreMesh_meetup_dic_2021#L1438\n- resume of the BattleMesh\n- resume of the network installed at Calafou for the BattleMesh with the technical tricks included in its network-profile https://github.com/libremesh/network-profiles/tree/master/calafou\n- list of issues observed during BattleMesh and traspassing this list to the LibreMesh issues list\n\n\n\n\ntest OpenWISP with LibreMesh (install both OpenWISP packages https://github.com/openwisp/openwrt-openwisp-monitoring/tree/0.1.0#install-pre-compiled-packages and https://openwisp.io/docs/user/configure-device.html#install-openwisp-config , figure out how to set up an OpenWISP server and set it up, maybe virtualized with Docker Compose)\n\n\nanalyze the poor performances of the mesh link (maybe due to VHT80 channel width? The routers see each other at -80 dBm that is too low for this very good line of sight)\n\n\nget two outdoor routers (PlasmaCloud PA1200, Duy should have some) and flash them as the mesh link, check the speed and check if with different channels, channel width or other things it gets better\n\n\nunderstand how BATMAN_V is getting the master interface (now it does not find it. It runs on a VLAN, but needs info from the original interface) and fix something so that it works in LibreMesh\n\n\n(unrelated to Calafou) make a release of LibreMesh 2020.3, still based on old OpenWrt 19.07\n\n\nimplement Opportunistic Wireless Encryption easy setup in LibreMesh and use it in Calafou. Also, encrypt the mesh link\n\n\nfix the super annoying Makefile of hostapd (wpad-*) in OpenWrt (see https://github.com/openwrt/openwrt/issues/8312 )\n\n\nset up monitoring with prometheus (in case doing it with OpenWISP is too difficult)\n\n\ndouble check the documentation from Aparcar on the usage of the ImageBuilder\n\n\nupdate unit testing script to work with OpenWrt 22.03\n\n\nunderstand what should we/odhcpd developers do for stopping using dnsmasq-dhcpv6 and start using odhcpd for DHCP on IPv6 as in OpenWrt. Someone (Aparcar? Marek?) said that in LibreMesh we are not using odhcpd because it cannot read the leases list from and external source (e.g. a file). Maybe Daniel Golle can implement that.\n\n\nreboot the router once every week only if the internet connectivity is not present https://github.com/libremesh/lime-packages/issues/1023\n\n\ntxt.file mentioned that there are two settings in OpenWrt that would be useful:1) for telling the clients to use a specific country code (e.g. if the router country code is set to ES, also the clients should use the same)2) for telling the clients which channels are in use in the current network (I hope it can increase the speed of the roaming switching)\n\n\nMake sure that from the \"events' network\" clients cannot ping/reach hosts in \"classic network\" except the fiber router * Put LibreMesh and BattleMesh stickers on every router of the \"events' network\" * Label the ports with a marker writing on the router * Coordinate with Konejo for fixing the support of lime-app for OpenWrt 22.03  Please add anything you consider useful :) then we can take this list and use its items to create new tickets-issues on Github :)\n\n\nunderstand why eth1 (wan) in PlasmaCloud PA1200 router used as gateway gets added in br-lan, and this should not happen. Checking network.lua in lime-system. If we don&#8217;t have time for fixing this, hardcode a fix.\n\n\nunderstand why static IP configuration didn&#8217;t work as expected. For the gateway LibreMesh node, at some point the dhcp client was not getting anything, so we tried with a static IP but did not do anything. What we added to /etc/config/lime-node is:\n\n\nconfig net usingLANasWAN\noption linux_name 'eth1'\nlist protocols 'wan'\nlist protocols 'static'\noption static_ipv4 '172.31.17.254/24'\noption static_gateway_ipv4 '172.31.17.1'\n\n\n\n\n\n\n\n\n\n2023-05-12 TECH MEETING\n\n\nPeople &amp; list of topics\n\n\nCri, Gothos, Arinç, DangoWrt, notplants, Catuaba, Ilario, Ivana, Sergey, robbe, Jesi, Ivan, Cypherhippie, txt.file\n\n\n\n\nhow to connect a new device\n\n\nhow to use cable connections, wan and mesh\n\n\nlist of mesh routing protocols\n\n\n\nbatman-adv on layer-2\n\n\nbabeld per default on layer-3, but also bmx6 an bmx7 are in active use, olsrd is also supported but probably not use anywhere\n\n\n\n\n\n\n\nsituations for which routing protocol\nhow to understand which interface is which (example interface list: https://pad.commoninternet.net/p/lr-interfaces)\nprocess to build the firmware on top of OpenWrt 22.03\nstill present bug on LibreMesh support of OpenWrt 22.03\n\n\n\n\nweb interface bugs, something changed between 19.07 and 22.03 and things are broken now&#8230;&#8203; we will fix it last once everything else works\n\n\nthisnode.info (anygw) doesn&#8217;t work well to connect to next router when conneting via wired link\n\n\ndiagnostic info (traceroute?)\n\n\nthisnode.info (anygw) should have been fixed now by p0ny\n\n\npirania captive portal may need adjustment to nftables\n\n\ntell babeld to silently ignore interfaces which are down or without addresses (log spam)\n\n\nwireless band names have changed (not very important)\n\n\ndependency mess of wpad-*\n\n\n\n\nimagebuiler support status\n\n\n\n\nx86 images are broken?\n\n\nconfig.buildinfo? &#8658; it&#8217;s next to where you downloaded ImageBuilder\n\n\nconfig.buildinfo? Doesn&#8217;t it should change if I add feeds and rebuild? &#8658; but then you should also have a new ImageBuilder. If you are only building a single feed from source, then this would change config.buildinfo, but it cannot be easily merged or represented again in a single file\n\n\nbzImage for x86 (needed for qemu) is missing &#8658; using *generic-kernel.bin instead and it works\n\n\nBATMAN V protocol doesn&#8217;t work well in situations when ExpectedThroughput is not available from the hardware. Also hidden-link behind a wifi-link can limit bandwidth and is not discovered by BATMAN V.\n\n\n\n\nAltermundi roadmap\nhow to isolate your home network if you do not want to have people from the mesh to see your local shares or reach your printer\n\n\nHow to connect a new device\n\nas a community approach of managing mesh, so if you are 1 probably libremesh is overkill, but you can use as range extender for example. you flash 2 devices and you try. minimal configuraion. the difficult is at the begin to flashing the device but after you should not need a tech team. also Lime is modular. double mesh protocol, in layer 2 batman and 3 with babbeld. you isolate the layer 3 in your house or the place that you want isolated.\n\n\n\nHow to use cable connections, wan and mesh\n\nwan just plug and works&#8230;&#8203;\nLAN-LAN if you connect two libremesh nodes via their LAN ports with a cable, you should configure the port for not being included in the br-lan bridge, see https://github.com/libremesh/network-profiles/commit/57eeae71781abb2403ff61afda9ca7d2664bfc7e\nanyway, modern routers have a chip that cuts the loops or the CPU should realize and stop the loops\n\n\n\nHow to understand which interface is which\n\nip6tnl created by a kernel module even if not used\nifb0 for traffic shaping\nbr-lan switch\ndummy0 fake interface for having a stable MAC that does not depend on interfaces going up or down\neth0.1 virtual interface with all the LAN ports\nanygw a dummy interface, member of br-lan\n\n\nhttps://openwrt.org/playground/arinc9/network.interfaces\n\n\n\nStill present bug on LibreMesh support of OpenWrt 22.03\n\nlime app with some issues, coneco is workin on this.\nhttps://github.com/libremesh/lime-app/issues/378\n\n\nconnecting by cable to a router connected by cable\nand using the thisnode.info IP, all the wire-connected nodes answer, breaking ssh connections\nbug present also in previous versions!!!\nhttps://github.com/libremesh/lime-packages/issues/1008\nit could have been fixed by Pony\n\n\nwe need a filter for babeld over batman\n\n\nbabeld is complaining a lot\nhttps://github.com/libremesh/lime-packages/issues/1003\n\n\nwpad-* for mesh encryption has a weird Makefile that makes thing complicated to select in menuconfig\nhttps://github.com/openwrt/openwrt/issues/8312\none option, to write what you want in the .config:\nhttps://github.com/libremesh/network-profiles/blob/master/calafou/indoor2/DOTconfig-xiaomi_mirouter_4A_gigabit_edition\n\n\n\nImagebuiler support status\n\naparcar added documentation for using the ImageBuilder in the readme:\nhttps://github.com/libremesh/lime-packages/blob/master/README.md#using-the-imagebuilder\n\n\ngothos: using it with x86 does not work on qemu\n\n\ndocumentation on network-profiles\nhttps://libremesh.org/development-network_profiles.html\nhttps://github.com/libremesh/network-profiles/tree/master/calafou\n\n\n\nCompany for stickers\n\ngerman company\nexplain them the project, they are community-friendly\nhttps://www.stickma.de/\n\n\n\n\n\n2023-04-07 TECH MEETING\n\n\nPeople &amp; list of topics\nCri, Sam, Ilario\n\n\nUpdates\n\nCreating the \"v2020.2\" tag for the release based on OpenWrt 19.07\n\n\n\ngit pull upstream OpenWrt_19.07_compatible:OpenWrt_19.07_compatible\ngit tag -a v2020.2\ngit push upstream-git --tags\n\n\n\nAnd now build!\n\n\nBuild on repo.libremesh.org stops with an error. Maybe due to the old software running on the server??\n\n\n\n\n\n2023-04-01 PROJECT MEETING\n\n\nPeople &amp; list of topics\nCri, Sam, Ilario\n\n\nTopics:\n* news\n* website and documentation update\n* need of a Docker image for unit testing on OpenWrt 22.03\n* decide the list of targets for being compiled for release 2020.2 based on OpenWrt 19.07\n* upcoming release LibreMesh 2020.2\n* News about Altermundi roadmap 2023 ?\n* how to use the donations on OpenCollective (e.g. a compilation server, or donation to Battlemesh) https://opencollective.com/libremesh\n* news about battlemesh\n* next meetings dates\n* resume of previous technical meetings and announcement of next technical meeting date\n\n\nfor the next TECH meeting:\n\n\n\n\nproposal: move the report in the wiki of github? another wiki? what is thi?https://gitlab.com/libremesh\n\n\nCheck that issues and the label is:issue is:open label:\"in progress\"  is actulized\nhttps://github.com/libremesh/lime-packages/issues/\n\n\nfuture release LibreMesh 2023.1 (based on openwrt-22.03)\n\n\nprioritise a list of issues to be resolved for the next LibreMesh 2023.1 release based on OpenWrt 22.03 https://github.com/orgs/libremesh/projects/3/views/1\n\n\ndecide a list of packages to be included in next LibreMesh 2023.1 https://github.com/libremesh/libremesh.github.io/issues/103\n\n\nThis question from Elektra during past tech meeting: - How are people porting new devices?\n\n\n\n\nRelevant?:\n\n\nhttps://communitynetworks.group/t/expanding-openwrt-libremesh-hardware-support/790/5\n\n\nhttps://communitynetworks.group/t/openwrt-libremesh-image-building-learning-group/823\n\n\nFor next project meeting:\n* introductions and recent projects and contributions related with LibreMesh\n\n\nNews\n\nIn the Google Summer of Code we have a solid application by \"samlo\" for the LibreMesh-related project\nResume about the workflow of GsoC for mentors and students: send reports, write posts in the freifunk website\n\n\nSuper nice that Gluon is a new tag standard of hardware supporting openwrt.\nGluon added Librerouter in supported hardware\n\n\n\nWebsite and documentation update\n\nThere are translations on TranslateWiki that have not been copied to LibreRouterOrg/docs\nhttps://github.com/libremesh/lime-packages/issues/257#issuecomment-1453891582\n\n\n\nTranslations\n\nhttps://translatewiki.net/wiki/Category:LibreMesh we need to have an appointment with Altermundi and Libremesh so we organize to update translation on the website.\n\n\nWHEN?\n\n\nUpdates about Home page of website https://libremesh.org/ , update of organizations\nNote about website:  https://pad.disroot.org/p/libremeshwebsitechecks_ifuemhfjk\n\n\n\n\nemail back the organizations that aswered: Cri\n\n\nsend to Luandro email to have feedback about:  https://www.redfusalibre.org,\nhttps://www.coolab.org/ -  https://ibebrasil.org.br/  - https://nupef.org.br (Cri) DONE\n\n\nSend email Gio to ask about the names of the 25 new community this year of Semillero (Cri) DONE\n--&#8594; https://communitynetworks.group/ Chiedo, ? aggiungiamo nei promotori Sì\n\n\n\n\nOrganizations supporting LibreMesh:\n\n\n\n| Guifi.net    | Iberian peninsula | http://guifi.net          | image:img/guifi-logo.png[\"Guifi.net\",role=\"right\"]\n| FreiFunk     | Germany           | http://freifunk.net       | image:img/logo_freifunknet.png[\"FreiFunk\",role=\"right\"]\n| FunkFeuer    | Austria           | https://www.funkfeuer.at  | image:img/0xff_logo.png[\"FunkFeuer\",role=\"right\"]\n| Ninux.org    | Italy             | http://ninux.org          | image:img/ninux_logo.png[\"NiNux\",role=\"right\"]\n| AlterMundi   | Argentina         | http://altermundi.net     | image:img/altermundi_logo.png[\"Altermundi\",role=\"right\"]\n| Wakoma       | Global            | https://wakoma.co/        |\n| LibreRouter   | Global           | https://librerouter.org/   | image:img/librerouter_isologo.png[\"LibreRouter\",role=\"right\"]\n\n\n\nCommunity mesh networks using Libremesh:\n\n\n\n| Antennine       | Appennino Bolognese | https://antennine.noblogs.org            | image:img/ninux_logo.png[\"NiNux\",role=\"right\"]\n| Janastu CowMesh | Rural Karnataka     | https://open.janastu.org/projects/cowmesh|\n\n\n\nSeveral other community networks are using or used LibreMesh on their devices with their own customizations (network profiles), some of these are listed here.\n\n\n\n\nAdd News on the website? the last is about battlemesh, ok. we can update with the date..( Cri)\n\n\nAdd list of sure supported device?\nhttps://libremesh.org/docs/hardware/\nwe have a long list of hardware used in various communities, but we don&#8217;t know whether they used LibreMesh or not on that!\n\n\nAdd icon for hardware in documentation page menu\nwe are using FontAwesome 4.3, which is old. We could use newer FontAwesome&#8230;&#8203;\nhttps://fontawesome.com/v4/icons/\nIlario will update FontAwesome\n\n\n\n\nIlario rewrites the Get It! page once we have the 2020.2 release\n\n\n\nNeed of a Docker image for unit testing on OpenWrt 22.03\n\nQuestion: about virtualization for testing Libremesh?&#8594; there is the project of the last year and docker images.. moved the conversation on the next topic: need of a Docker image for unit testing on OpenWrt 22.03\n\n\nhttps://github.com/libremesh/lime-packages/pull/938\nhttps://github.com/libremesh/lime-packages/issues/389\n\n\nSam can ask to aparcar on Element/Matrix list how to buid a Docker image for that\n\n\n\n\ndecide the list of targets for being compiled for release 2020.2 based on OpenWrt 19.07\nath79/generic\nramips/mt7621\nx86/64\n\n\n\n\n??ar71xx/generic??\n\n\n\n\nAdd targets to the firmware? https://downloads.libremesh.org/releases/2020.1/targets/\nwe can add more target for the new release that will be soon?\nsam: I would propose to keep ar71xx/generic targets like\n\n\n\nubnt-lbe-m5\n\n\nubnt-loco-m-xw\n\n\nubnt-nano-m-xw\n\n\nubnt-nano-m\n\n\n\n\n\n\n\nar71xx/generic will also be compiled\n\n\n\nUpcoming release LibreMesh 2020.2\n\nvorremmo compilarla ed esporre dal server da cui esponiamo ora: https://downloads.libremesh.org/releases/\nIl server non è aggiornato e non builda, quindi bisogna compilare in locale e poi solo uploadarli.\nUna volta che ci sono dalla Valsamoggia possiamo testare alcuni target\nPoi facciamo annuncio ufficiale\nhttps://github.com/libremesh/lime-packages/tags\n\n\nIlario creates a v2020.2 tag at the commit where G10h4ck created the OpenWrt_19.07_compatible branch.\n\n\nhttps://libremesh.org/development-kernel_vermagic.html\n\n\n\nNews about Altermundi roadmap 2023 ?\n\nWe have no news, so we can write an email in list and personally to know news.. (Cri)\n\n\n\nHow to use the donations on OpenCollective\n\n(e.g. a compilation server, or donation to Battlemesh) https://opencollective.com/libremesh\n\n\nWhishlist:\n- pay the travel to the battlemesh for some of librerouter/altermundi (maybe next year or another event)\n- pay the travel for the travel to battlemesh for some people of Antennine (maybe next year or another event)\n- pay the update of the server of downloads CodigoSur? Chiede Cri\n- buy some stickers LibreMesh YES\n- donation for the domain name? for the newsletter ?\n- email @libremesh.org?\n- hardware per testare il supporto?\n\n\n\nNews about battlemesh\n\nThis year there is not support for the travel\nC&#8217;è stata un acquisto economico di router per fare la rete di Calafou, c&#8217;è il piano di usare Libremesh,\nplasmacloud pa1200, che hanno openwrt 22.03(?)\nquindi vorremmo arrivare al battlemesh con libremesh basato su openwrt22.03\n\n\n\nNext meetings dates\n\n\n\nproject meeting:\n\n\n\n\nDuring battlemesh, online and in real life , 13utc, 3rd day of the vent &#8594; 10 may\n\n\nSaturday the 3rd of June 2023 at 13:00 UTC (15:00 CEST, 9:00 ART).\n\n\n\n\ntechnical meeting:\n\n\n\n\nFriday the 7th of April 2023 at 13:00 UTC (15:00 CEST, 9:00 ART).\n\n\nClosing at 17:24 CEST\n\n\n\n\n\n2023-02-15 TECH MEETING\n\n\nPeople &amp; list of topics\n\nCri, Gio\n\n\n\n\nHardware support\n\n\nUpdate doc &amp; homepage\n\n\nGSoC news\n\n\nNext meeting\n\n\n\n\n\nSupport for OpenWrt 22.03\n\nWe  use this issue for keeping track of the updates:\nhttps://github.com/libremesh/lime-packages/issues/951\n\n\n\n https://github.com/libremesh/lime-packages/pull/959\nWhen I wrote that pull request, I thought that the new configuration format was due to the swconfig-DSA migration.  But instead it is due to the OpenWrt 19.07 vs &gt;19.07 versions, so I have to rewrite the pull request.\n\n\n\nProposing:\n* supporting only OpenWrt 22.03 in the lime-packages' \"master\" branch.\n* create a \"target_OpenWrt_19.07\" branch for the extended support to OpenWrt 19.07 and a tag with a minor release \"2020.2\" which can be considered as an updated version of the 2020.1 LibreMesh release \"Expansive Emancipation\".\n\n\nHOW we will make available this to the users as builded firmware?\n- images of master on Owrt22.03 will be linked here: https://libremesh.org/getit.html\n- the extended support to Openwrt19.07 can be explicited here: https://libremesh.org/development.html\n\n\nOther relevant issues for using OpenWrt 22.03 are:\nhttps://github.com/libremesh/lime-packages/pull/971 (Dnsmasq now can access only specific folders)\nhttps://github.com/libremesh/lime-packages/pull/950 (we were creating a file that now is provided by an OpenWrt package)\n\n\n\nQoS,using TC (traffic control)\n\nFROM Ilario by mailinglist:\nMy (too complex) dream-solution would be to have an integrated solution with:\n* if you access the AP via a WPA interface, you access a VPN made with Tinc (or Wireguard) and have max priority access to the gateway you own in your house, and mid priority access to the other gateways\n* if you access the AP via an open interface, you get Pirania captive portal, if you have granted access, you have mid-priority access to all the gateways\n* instead, if you Pirania does not grant you the access, you have low priority access to all the gateways\n\n\n\n\n\n2023-02-06 GSoC MEETING\n\n\nProjects page:\nhttps://projects.freifunk.net\n\n\nAll the mentors mentioned on the projects page were added in CC to these emails:\nhttps://lists.autistici.org/thread/20230206.101747.6e33f174.en.html\nand also contacted directly either on Element/Matrix or on Telegram.\n\n\nSAn answered he will not manage to mentor this year.\n\n\nDeleted the disabled projects\nDisabled the open projects\n\n\nNew project:\n\n\ncollaborating_projects:\n  - libremesh\ndesc: \"Automate the compilation system, configuration and monitoring of LibreMesh using Ansible. Integrate with its web interface Lime-App\"\n\n\ndevelopers_involved:\n  - cristina\n  - ilario\ndifficulty: medium\nsize: \"350 hours\"\nstatus: open\nemail:\n- ilario@sindominio.net\n- kiki@digitigrafo.it\ninitiatives:\n  - GSoC\n  - GSoC2023\nmarkdown: libremesh-automation_monitoring.md\nmentors:\n  - cristina\n  - ilario\nname: \"Automation tools for Lime firmware build and monitoring\"\nrequirements:\n  - \"Analyzing and coding\"\n  - \"Prometheus\"\n  - \"Grafana\"\n  - \"Ansible\"\n  - \"OpenWrt\"\n  - \"lua, bash\"\ntags:\n  - GSoC2023\n  - libremesh\n\n\nCreate a set of automated tasks to install services on a Raspberry Pi to meet the needs of small community-network with an administration/tech team, e.g. a set of commonly needed monitoring tools, such as Prometheus, Prometheus-node-exporter, Blackbox-exporter, Altermanager, Grafana, VPN and an editing map service.\n\n\nSimilar projects or packages:\nhttps://gitlab.com/librerouter/miniserver\nhttps://github.com/libremesh/lime-packages/blob/master/packages/altermundi-grafana\n\n\nThe use case is a growing fragmented network with islands of nodes and users; but with a collective management having an overarching vision on what is happening in the network and giving feedback to the users by the [Lime-App](https://github.com/libremesh/lime-app).\n\n\nCreate a set of Ansible roles to replicate the OpenWrt build-system, to speed-up the process of self-building images for OpenWrt and/or LibreMesh for newcomers, and to easily setup a dedicated machine, with the possibility to later extend the process of build to other automated tasks, like a pub-keys-exchange needed for configuring a VPN, or to update documentations or a webapp.\nThe Ansible roles would include tasks to build for: different architectures and targets; different OpenWrt and LibreMesh versions; keeping trace of devices with particular needs and related patches; keeping a local list of supported targets; provide a basic functionality to setup a VPN. This should also provide a main configuration file for each device, and the use of the main configuration tools available on LibreMesh, like /etc/config/lime-* and especially lime-macaddress files, \"generic-uci-config, lime-asset\" functionalities, and configurations and packages provided by community [network-profiles](https://github.com/libremesh/network-profiles) or local packages.\nThese will be published and shared also on Ansible Galaxy or similar repository as a standalone project.\n\n\nMilestones\n\n\n\n\nAutomation on LibreMesh build system\n\n\nAutomation on monitoring\n\n\nCollectors of data\n\n\nData visualization\n\n\nIntegration in Lime-App\n\n\n\n\nPreparation/Bonding\n\n\n\n\nGetting familiar with LibreMesh compilation using the OpenWrt buildroot\n\n\nLearn to develop a basic LibreMesh package and compile it in a firmware image\n\n\nFlashing of at least 3 wifi routers with the compiled LibreMesh\n\n\nHave these routers connected in a (indoor) mesh network\n\n\nGet familiar with the LibreMesh web interface \"Lime-App\"\n\n\nGet familiar with the OpenWrt basic folders structure and acquainted with its command line interface\n\n\nGet familiar with the tools for quantifying the quality of single wireless links, both the ones provided by the Linux kernel and the ones from the router protocols employed in LibreMesh (Batman-adv, Babeld)\n\n\nDeploying the already existing monitoring systems on at least 1 Raspberry-Pi\n\n\nDocument the entire process at least with a post on the Freifunk blog\n\n\n\n\nCoding period\n\n\n\n\nDevelop automation on LibreMesh build system\n\n\nWrite and publish sets of configuration management on Ansible Galaxy\n\n\nDeploying automated LibreMesh build system on at least 2 computers\n\n\nPublish a \"LibreMesh observer\" deploy instruction for Arm architecture\n\n\nSet up multiple observation points, including at least 2 Raspberry-Pi, to collect data from LibreMesh routers\n\n\nVerify if it is possible to integrate a Grafana dashboard in Lime-App to receive feedback about traffic and develop a basic demonstrator\n\n\nWrite a post on the Freifunk blog detailing which of the monitoring tools under development are suited for being integrated with the LibreMesh web interface \"lime-app\" and documenting the proof-of-concept integration of Grafana in Lime-App, if achieved\n\n\nPropose in the LibreMesh repositories the pieces of code that are standalone\n\n\n\n\nGSoC final\n\n\n\n\nPushing upstream to OpenWrt or to other repositories all the general interest code\n\n\nPushing on Ansible Galaxy\n\n\nPushing on Lime-App repository of LibreMesh\n\n\n\n\n\n\n2023-02-04 PROJECT MEETING\n\n\nList of topics:\n\n\n\n\npresentations and recent projects and contributions related with LibreMesh\n\n\nresume of previous technical meetings and announcement of next technical meeting date: 15th February 2023 wednesday\n\n\nhow to use the donations on OpenCollective (e.g. a compilation server, or donation to Battlemesh) https://opencollective.com/libremesh\n\n\nremove old projects and add new projects to Freifunk list for GSoC https://projects.freifunk.net before the 7th of February\n\n\nupdate of organizations on the website homepage (explicit consent by&#8230;&#8203;? Cowmesh, Ninux&#8230;&#8203;)\n\n\n\n\n\n\n2023-01-21 TECH MEETING\n\n\nPeople and List of topics\nCri, Hiure, Elektra, Eric, Tania\n\n\n\n\nServices\n\n\ndebug connectivity problems with local services (Hiure) 2 router connected by wifi and both cable, interest most BATMAN (level2),\n\n\nIntegration w/ local services and content (LokaLR and beyond)\n\n\n\n\nHiure: Looping issue investigation. Sanketh found solution? https://www.open-mesh.org/projects/batman-adv/wiki/Bridge-loop-avoidance\n\n\nIs a new version needed where this is included? What work is entailed?\n\n\nElektra: Potential easy Fix. Shellscript to execute. LM system doesn&#8217;t currently enable this. Workaround: Add the line \"batctl bl 1\" to /etc/rc.local\n\n\nUCI: add commands to change /etc/config/batman, or manually edit this.\n\n\nHiure: need to find this in LM.\n\n\nElektra: To investigate and propose way forward and any support required. (Done. See 1.5 ;)\n\n\nCristina: network profile of our community, and to show where some comunity configuration can be written and applied: https://github.com/libremesh/network-profiles/blob/master/valsamoggia.ninux.org/vs-ninux-generic/root/etc/config/lime-community\n\n\nNext meeting dates\n\n\n\n4th february Organizaion of LiMe http://libremesh.org/communication.html\n\n\nwednesday tech meeting 1 of February  (same week of the other meeting) or 8 of February (just near to the other) or 15 of february\n\n\n\n\n\nHardware\n\n\"Legacy hardware that is actually in use in real world community networks\"\n\n\nWhat hardware are others already using.  What hardware CAN be used.\n\n\nWhere is the most up to date list? Should/how can this be organized, and shared on LM website/github, etc\n\n\n\nhttp://libremesh.org/docs/en_quick_starting_guide.html\n\n\n\nCompatible Hardware\n\n\nIt is recommended that the router has at least 8 MB of flash memory and 64 MB of RAM. For routers with 4 MB flash memory or 32 MB of RAM, use the special firmware named -mini or compile one yourself excluding some heavy packages (e.g. opkg or the LuCI and lime-app web interfaces).\n\n\nNot all the OpenWrt supported routers work with LibreMesh (at least, not with its default configuration), for a list of the tested hardware, see our hardware page. http://libremesh.org/docs/hardware/index.html\n\n\nTested Hardware (from the list in the website)\n\n\nThis is a list of devices that were tested by the community and reported as fully compatible with LibreMesh, it is by no means a complete list of the working devices.\n\n\n\n\nXiaomi MiWiFi R3\n\n\nXiaomi Mi WiFi R3G\n\n\nYouHua WR1200JS\n\n\nLibreRouter\n\n\nTP-Link WDR3500\n\n\nTP-Link WDR3600\n\n\nTP-Link WDR4300\n\n\nDragino MS14\n\n\nAlix 2d2\n\n\nUbiquiti UniFi AP\n\n\nUbiquiti AirRouter\n\n\nUbiquiti AirGateway\n\n\nUbiquiti NanoBridge M2 and M5\n\n\nUbiquiti NanoStation M2 XW and LoCo M2 XW\n\n\nUbiquiti NanoStation M5 XW and LoCo M5 XW\n\n\nUbiquiti PicoStation M2\n\n\nUbiquiti Bullet M2 and M5\n\n\nUbiquiti Rocket M2 and M5\n\n\nBuffalo WSR-1166DHP\n\n\nFlex mARC\n\n\nWestern Digital My Net N600\n\n\n\n\nEXAMPLE, now I&#8217;m using Cristina : Device Ubiquiti Litebeam M5\n\n\nFirmware LiMe 2020.1 ExpansiveEmancipation ((no branch) rev. 6f1730e 20210612_1552)\n\n\nopenwrt-19.07 branch (git-21.044.30835-34e0d65) And we have the same firmware also on CPE 510 v2\n\n\nUpdated Hardware List\n\n\n\n\nG10h4ck:\n\n\n\nLibreRouter v1\n\n\nTP-Link TL-WDR3600\n\n\nTP-Link TL-WDR4300\n\n\nTP-Link TL-WDR4310\n\n\nTP-Link TL-WDR3500\n\n\n\n\n\nTroian - Nupef : TPLinks-  WDR 3500, 3600, 4300 Archer C7v5 Archer C50v4, CPE210v1-3,\n\n\n\n\nEquippment ported only to owrt22 - Archer C50 v5, Archer C6 (to test new LIME version)\n\n\n\n\nbologna appennino:  Ubiquity Litebeam M5 - TPlink CPE 510 (ath79)\n\n\n\n\nhttps://antennine.noblogs.org/post/2021/12/15/tipi-di-antenne-che-usiamo/\n\n\n\n\nHiure - Brasil / India : Cpe510/v1,v2,v3, Cpe210/v1,v2,v3 Cpe220, A7v5, tl-wdr3500, tl-wdr3600, tl-wdr4310, C60, C7, C5\n\n\n\n\nAre we limited to the devices on the OpenWRT list? https://openwrt.org/toh/start\n\n\nHow are people porting new devices?\n\n\nBig changes w/ new OpenWRT version.  Sometimes previous LM versions on OpenWRT 18 worked, now with v.19, things break.\n\n\nHow do we define the process of using more hardware, including hardware not on OpenWRT listhttps://github.com/libremesh/lime-packages/issues/.\n\n\nRelevant?:\n\n\nhttps://communitynetworks.group/t/expanding-openwrt-libremesh-hardware-support/790/5\n\n\nhttps://communitynetworks.group/t/openwrt-libremesh-image-building-learning-group/823\n\n\n\nQoS,using TC (traffic control)\n\nwhat do yuo think about aplly QoS in a mesh network, how to know how much bandwith do you share with the others. can you set a distribution of this.\non AP and Client, but difficult in nodes of mesh, because that are running the mesh routing\n\n\nBologna: we collect the data by Prometheus + Graphana and show to the community, we have meeting to show with the others, 1 meeting closed with everyone inside the mesh network; ither 3 public meeting in a public place, and we have every season a public tech meeting. we started to do that meeting for show the privacy problem but at he end is usefull for the know the consumtion of bandwith\nin my island we are 15 with a connction of 30Mbs down /10Mbs up\n\n\nElektra: traffic shaping to go on AP that clients are using.\nIs there a more centralized way to do this?\n\n\nTraffic Control Talk:\nhttps://videos.apc.org/u/nicopace/m/traffic-control-on-openwrt-and-libremesh/\n\n\nhttps://communitynetworks.group/t/traffic-control-on-openwrt-and-libremesh-second-round/888\n\n\nWho else is doing this, or interested in this?\n\n\nHiure:\nPirhana, in Brazil. Allow people to access by Voucher. PiHole - to block sites.\n\n\n\nSupport for OpenWrt 22.03\n\nA the moment, about the support for OpenWrt 22.03, from Bologna/appennino we have in use a link done on Tplink CPE 510 v2.3\n\n\nworking to merge this https://github.com/libremesh/lime-packages/pull/959\n\n\nClosing at 14:27 utc\nNext tech meeting will be on Wednesday 15th February 2023\n\n\n\n\n\n2023-01-04 TECH MEETING\n\n\nPeople &amp; list of topics:\n\n\nRodrigo, Cri, Hiure, Gio, Ilario, Henrik, S K, Dinesh, Ger\n\n\nWish list:\n\n\n\n\ndecide if both swconfig and DSA should be supported in the next release\n\n\nLegacy hardware that is actually in use in real world community networks\n\n\nNext meeting dates\n\n\ndebug connectivity problems with local services (Hiure)\n\n\nChannel for technical discussions\n\n\nLibreMesh support for OpenWrt 22.03 (or better next release?)\n\n\nsupport for OpenWrt 22.03, QoS,using TC (traffic control)\n\n\nreview all the pull requests\n\n\nprioritise a list of issues to be resolved for the next LibreMesh release\n\n\n\n\nNext Meeting\n\nSaturday 21 of january at 13 UTC\n\n\n\nDecide if both swconfig and DSA should be supported in the next release\n\nGio: to introduce the topic: openwrt22.3 is using DSA (Distributed Switch Architecture), [1] [2]and we in Lime2020 we use SWconfig. Support both could be difficult.\n[1] https://openwrt.org/docs/guide-user/network/dsa/start\n[2]https://openwrt.org/docs/guide-user/network/dsa/dsa-mini-tutorial\n[3] https://openwrt.org/docs/guide-user/network/dsa/converting-to-dsa\nTalk at battlemesh https://youtu.be/1BqrX0-ICBQ?t=3462\n\n\nNot all targets that we use a lot have been ported to DSA, like:\n- LibreRouter v1\n- TP-Link TL-WDR3600\n- TP-Link TL-WDR4300\n- TP-Link TL-WDR4310\n- TP-Link TL-WDR3500\n\n\nThere is a big pull request in OpenWrt porting all ath79 to DSA.\nhttps://github.com/openwrt/openwrt/pull/4622\nWe can take that PR and split it in smaller ones to send to OpenWrt for easing its merging.\n\n\nHenrik: it is too messy to support both. There are many devices still with swconfig. Have anyone used any router with two real ports (like HiveAP), no switches?\n\n\nIlario: The proposal to wait for the merge of DSA for our favourite ATH79 routers would mean waiting for more years and our last release is already very old (2020). Can we make one release that supports both and then dropping swconfig for the following one?\n\n\nHenrik: Some routers do not work well with swconfig, so if possible we should move to DSA.\n\n\nCri: we use Ubiquiti LiteBeam (Atheros). We are patching LibreMesh for using it on OpenWrt 22.03, we listed our patches in the mailing list\nhttps://lists.autistici.org/message/20221210.180941.ac807e16.en.html\n\n\nIlario: some of your patches have been used for making this pull request https://github.com/libremesh/lime-packages/pull/959\n\n\nHenrik: what has been planned?\n\n\nIlario: does Altermundi have planning? This meeting is also for making this planning\n\n\nGio: old devices are important to support Libremesh, The new devices will be all DSA, but how we do with the old? Are we sure that old devices will support DSA?\n\n\nIlario: we have old devices to test and I already checked that can support it\nthe DSA presence check is already included in https://github.com/libremesh/lime-packages/pull/959\n\n\nHenrik: OpenWrt is moving away from Lua, going to ucode (own scripting language, better integrated with UCI, similar to JavaScript), rewriting all their scripts. How is this going to affect LibreMesh? Lua is not going to be included by default. I think they do a great work but the problem is the conversion to the new scripts.\n\n\nhttps://lxr.openwrt.org/source/ucode/README.md\nhttps://forum.openwrt.org/t/luci-rewrite-in-ucode-testers-wanted/137250\nucode https://github.com/ynezz/openwrt-ucode\nucode git https://github.com/jow-/ucode#about\n\n\nIlario: hopefully, if we include the Lua interpreter, our stuff should go on working\n\n\nGio: I hate JavaScript\n\n\nHenrik: they fixed many things, seems like a good step. The major issue is the memory impact of having both UCode and Lua. Anyway Lua is not too big and the impact should be ok.\n\n\nRodrigo: Archer C660 C50 C600 only work with OpenWrt 22\nIs there some line where help to move forward? Where I can start?\n\n\nIlario: start testing a couple of pull request:  this for example https://github.com/libremesh/lime-packages/pull/959 is useful if you try others devices. I can propose to use the chat element of Lime, or in the Mailinglist.\nAlso you will need to include https://github.com/libremesh/lime-packages/pull/950\n\n\nRodrigo: I can build myself and test, I can open this server to you for compiling http://compila.ax.org.br:5000/\nSounds good to open a specific channel for testing.\n\n\nGio: why not move to a json like format for configuration of.. ?\n\n\nHenrik: the config format is trying to stay compatible. There are issues with the use of labels and names. E.g. the main device in the /etc/config/network does not have a name. Important that the config file is human readable\n\n\nIlario: this issue we hit when preparing the pull request, it is the [0] here: https://github.com/libremesh/lime-packages/pull/959/files#diff-f3b71b4df527c1cf41e8c74bddde83a63cc2424814a06db3e415a640c0e480efR54\n\n\nHenrik: I made a script for getting around the positional reference issue, I will try to share it on the linked pull request in a few days\n\n\nIlario: let&#8217;s test the pull requests and talk about this swconfig+DSA vs DSA-only decision in the next meeting\n\n\nCri: ok we finshed the first hour of meeting, lets' go to try to set the next meeting\n\n\n\nLegacy hardware that is actually in use in real world community networks\n\nG10h4ck:\n- LibreRouter v1\n- TP-Link TL-WDR3600\n- TP-Link TL-WDR4300\n- TP-Link TL-WDR4310\n- TP-Link TL-WDR3500\n\n\nTroian - Nupef : TPLinks-  WDR 3500, 3600, 4300 Archer C7v5 Archer C50v4, CPE210v1-3,\n\n\nEquippment ported only to owrt22 - Archer C50 v5, Archer C6 (to test new LIME version)\n\n\nbologna appennino:  Ubiquity Litebeam M5 - TPlink CPE 510 (ath79)\n\n\nHiure - Brasil / India : Cpe510/v1,v2,v3, Cpe210/v1,v2,v3 Cpe220, A7v5, tl-wdr3500, tl-wdr3600, tl-wdr4310, C60, C7, C5\n\n\n\nNext meeting dates\n\nIlario: what about one technical meeting every two months?\n\n\nHiure: what about one or two weeks?\n\n\nIlario: ok 2 weeks\nCri: ok,could be on 18th of January? wednesday..\n\n\nIlario: is Saturday ok?\n\n\nGio: better for me to do it in weekdays, but my agenda is changing so you can organize it in any day and then I will try to join\n\n\nHiure, for me is good, but after of 19th of january\n\n\nilario: not able to connect during week, available only at night. And weekends.\nIlario: what about alternating meetings on Saturdays with meetings on Wednesdays?\n\n\nRodrigo: better during week days at work time\n\n\nCri: Saturday the 21st?\n\n\nIlario: great! Same time?\n\n\nHiure: yes\nCri: yes\nTroian: yes\n\n\nNEXTmeeting: saturday 21 of january at 13 UTC\n\n\n\nDebug connectivity problems with local services (Hiure)\n\n-&#8594; from India some feedbacks about issues on \"How he data are routed inside of the network\"?\nex: wireless network, more wired connection, more internal service exposed also to external, DNS configuration works, the server sometimes is not connected due to routing of network..\n\n\nThe problem starts when we use cables, things get unstable\nif I try to extend network by cable, I get the problem: the 2 libremesh routers use &#8230;&#8203;..  and start loops and\ncallbacks, problems with Batman-adv\n\n\nIlario: Can you list a minumal setup for reproducing? Do you only use the LAN ports or also the WAN ports? If you connect via cable a LAN port to a WAN port of another LibreMesh router things are going to be broken for sure.\n\n\nGio: are not supperted connect WAN and LAN by cable\n\n\nS K: The problem appears when you are doing ethernet mesh and connect local servers on the same router\n\n\nCri: how do you keep the problem? just a pig with DUP? or what?\n\n\nGio: the local server is just as the other clients, should not trigger any issue. Maybe the already existing issue gets more visible when it happens with a server.\n\n\nS K: One problem is that ip of the local server changes now and then. But the main problem is latency.\n\n\nHiure: yes we use the local server with fixed ip in libremesh, editing /etc/config/dhcp and /etc/dnsmasq.d/localserver.conf\n\n\nIlario: for leaving some IP ranges out of the auto-configuration and the IP assigned to the DHCP clients https://github.com/libremesh/lime-packages/blob/master/packages/lime-docs/files/www/docs/lime-example.txt#L33-L35\n\n\nS K: Sorry, my point is that the problem could be that there are two DHCP servers (two nodes) connected with each other through ethernet and then there are clients on the same switch. So that might cause routing problems?\n\n\nHiure: when we have only one service it works.\nnginx servers with lot of services, using CNAME, some servers have fixed IP.\n\n\nIlario: can you share the modifications you do to those two files, for understanding?\n\n\nHiure:\n    /etc/config/dhcp\n    config hostrecord 'server'\n      option ip '10.x.y.z'\n        list name 'servidor.com'\n\n\n\n/etc/dnsmasq.d/localservice.conf\ncname=serv2.iruway.in,janastunuc\ncname=nextcloud.iruway.in,serv2.iruway.in\ncname=prometheus.iruway.in,janastu.iruway.in\ncname=grafana.iruway.in,janastu.iruway.in\ncname=collaborate.iruway.in,janastu.iruway.in\n\n\n\nand we copy this on every router.\n\n\n\nChannel for technical discussions\n\nWe have two channels:\nhttps://libremesh.org/communication.html\nand also the Github Issues and Pull Requests.\n\n\nGio: no time for following the chat but I follow the mailing list\n\n\nIlario: prefer to use the chat, so that is easier to share simple observations in a casual way\n\n\nRodrigo: I prefer the chat\n\n\nIlario: no consensus, no decision.\n\n\n\nClosing\n\nClosing at 14:56 UTC\nNext technical meeting is going to be on Saturday the 21st of January 2023 at 13:00 UTC\n\n\n\n"}
,{
"location": "/docs/hardware/tp-link.html",
"lang": "en",
"title": "tp-link",
"content": "Because of the http://ml.ninux.org/pipermail/battlemesh/2016-February/004379.html[new FCC rules], new TP-Link models would require a special method to install third party firmwares like LibreMesh.\nOn TP-Link devices, you can typically identify that your router is FCC locked if you get a 18005 and/or Invalid Filename error when trying to flash.\nThese instructions can help bypass these new restrictions.\n\n.They have been tested with:\n* WDR3500\n* WDR4300\n\n.Instructions\n. Install dd-wrt: Select your router from ftp://ftp.dd-wrt.com/betas/2016/02-05-2016-r29048/[dd-wrt.com]. Download US version, factory-to-ddwrt-us.bin, if applicable.\n. Rollback to factory firmware: Follow instructions below to download correct file. You will have to set a username and password before continuing to dd-wrt's Administration Page and selecting Upgrade Firmware. It does not matter if you choose to reset configuration after reset.\n  .. Official reverts: Go to the official dd-wrt page for your router. For example, http://www.dd-wrt.com/wiki/index.php/TP-Link_TL-WDR4300[WDR4300]. Download the webrevert.rar package. Don't forget to decompress.\n  .. Unofficial reverts: The original instructions for this guide pointed to a http://www.dd-wrt.com/phpBB2/viewtopic.php?t=85237&postdays=0&postorder=asc&start=30[forum] with revert links. To see the files, you will need to http://www.dd-wrt.com/phpBB2/profile_sec.php?mode=register_wtf[register] and http://www.dd-wrt.com/phpBB2/viewtopic.php?t=85237&postdays=0&postorder=asc&start=30[login at the bottom of the page].\n. Install LibreMesh: Download factory version of LibreMesh, not sysupgrade. You must rename the file to the name of one of the official\nTP-Link firmware files (e.g. wdr3500v1_en_us_3_14_3_up_boot(151104).bin or wdr4300v1_en_3_14_3_up_boot(150518).bin). If you are unsure of the name for your device, try searching the OpenWrt page for your device and searching the page for some variation of the filenames above.\n\n\n.Original discussion and solution\n----\nhttps://forum.openwrt.org/viewtopic.php?id=63123\n----\n"}
,{
"location": "/docs/hardware/xiaomi-miwifir3.html",
"lang": "en",
"title": "Xiaomi MiWiFi R3",
"content": "== How to install LibreMesh on the Xiaomi MiWiFi R3\n\n\nThis is a pretty good device with lots of memory, one of the last dual band devices easily hackable. Installing LibreMesh/OpenWrt is a bit more work but can be done. Here are the instructions:\n\nFollow these steps:\n\n* First, get ssh/dropbear access: https://openwrt.org/toh/xiaomi/mir3#get_sshdropbear_access (don't forget to downgrade the firmware before)\n\n* Download LibreMesh rootfs and kernel files from here:\n - https://mega.nz/#!8A9CUJLQ!gJNC3SfwDdmMZ4y9BXlWp4mcn1FTAU3vWgsVYK2vW4w\n - https://mega.nz/#!1QdkxKgb!7htQD4bE9AbYotPkEQYriI5zF2LDe27A62h7S2tq9VM\n\n* Copy these files over scp to the router:\n----\nscp lede-ramips-mt7620nand-miwifi-r3-squashfs-kernel1.bin   root@192.168.15.1:/tmp/\nscp lede-ramips-mt7620nand-miwifi-r3-squashfs-rootfs0.bin   root@192.168.15.1:/tmp/\n----\n\n* login through ssh:\n----\nssh root@192.168.15.1\n----\n\n* type in the commands (from chen's instructions https://github.com/ptpt52/lede-source/issues/1)\n----\nnvram set flag_last_success=1\nnvram set boot_wait=on\nnvram set uart_en=1\nnvram commit\nmtd write /tmp/lede-ramips-mt7620nand-miwifi-r3-squashfs-kernel1.bin kernel1\nmtd write /tmp/lede-ramips-mt7620nand-miwifi-r3-squashfs-rootfs0.bin rootfs0\nreboot\n----\n\n* and it should be meshing already!\n\n== Upgrading from OpenWrt\n\nIf you somehow installed OpenWrt before installing LibreMesh, here is the sysupgrade file:\n\nhttps://mega.nz/#!tV0EzJZD!XblvULWZgjvx0d9RqdwJYbKkZOKTeHT-J6oBRQYw0Ls Not available any more\n\n"}

,{
"location": "/packages/altermundi-grafana.html",
"lang": "en",
"title": "altermundi-grafana",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) metapackage\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\n  DEPENDS:= \\\n            +prometheus-node-push-influx \\\n            +prometheus-node-exporter-lua \\\n            +prometheus-node-exporter-lua-openwrt \\\n            +prometheus-node-exporter-lua-wifi_stations \\\n            +prometheus-node-exporter-lua-wifi-stations-extra \\\n            +prometheus-node-exporter-lua-wifi-survey \\\n            +prometheus-node-exporter-lua-wifi-params \\\n            +prometheus-node-exporter-lua-location-latlon \\\n\nendef\n\ndefine Package/$(PKG_NAME)/description\n  This metapackage installs and configures a statistics collector system\n  that gathers data on the node and pushes to https://grafana.altermundi.net\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/auto-usb-wwan.html",
"lang": "en",
"title": "auto-usb-wwan",
"content": "\nReadme\n\n\n\n\n# auto-usb-wann\nAfter installing  auto-usb-wann, a hotplug.d script will detect when any USB WiFi device is connected, automatically configure it to connect as client to a predefined SSID/password and ask for DHCP.\nThe idea is to provide internet access to a router, without needing to mess with LuCI or CLI.\nJust insert a supported USB device on the router, and open an AP with 3g/4g tethering on a phone.\n\n\nBy default, it will try connect to SSID \"internet\" with password \"internet\", you can edit this configuration in  /etc/hotplug.d/ieee80211/11_auto-usb-wwan\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) configures any USB WiFi device as WWAN upon plugging in.\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  After installing $(PKG_NAME), a hotplug.d script will detect when any USB WiFi device is connected,\n  automatically configure it to connect as client to a predefined SSID/password and ask for DHCP.\n  The idea is to provide internet access to a router, without needing to mess with LuCI or CLI.\n  Just insert a supported USB device on the router, and open an AP with 3g/4g tethering on a phone.\n  By default, it will try connect to SSID \"internet\" with password \"internet\"\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/babeld-auto-gw-mode.html",
"lang": "en",
"title": "babeld-auto-gw-mode",
"content": "\nReadme\n\n\n\n\n# babeld-auto-gw-mode\n\n\nBy default babeld will redistribute all the routes installed even if they \"don&#8217;t work\". For example\nwhen the internet provider use DHCP and the service is not working but interface is up, the route is\ninstalled but not working and babeld will anounce the non working route to the network and also\nthis route will be used by this node to route the packets so also all its clients won&#8217;t have internet.\n\n\nThis package provides a solution using watchping hooks that:\n* on wan OK\n  - adds a route with a special protocol number (7)\n* on wan FAIL\n  - removes the default route with proto 7\n  - changes the metric of the default route to 84831. If other nodes are also gateways their babel\n  redistributable routes will have priority over this route at this node and for that reason the\n  default gateway won&#8217;t be the local non working connection.\n\n\n\n\n\n\nMakefile\n\n\n\n# Copyright (C) 2021 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=Babel auto Internet gateway module.\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+libubus-lua +watchping +lime-proto-babeld +lime-system\n  PKGARCH:=all\nendef\n\n\ndefine Package/$(PKG_NAME)/description\n\tWatchping hooks to set babeld Internet automatic announcements.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bandwidth-test.html",
"lang": "en",
"title": "bandwidth-test",
"content": "\nReadme\n\n\n\n\n## bandwidth-test\n\n\nbandwidth-test is a tool for estimating the maximum available download bandwidth from the internet. In order to work even on restricted connections, it just uses port 80 with HTTP connections. It has be designed for working also on a common Linux machine (requires lua, wget and pv), not only on OpenWrt.\n\n\nBy default, a few large files are downloaded during 20 seconds. After this timeout, the download gets interrupted and the speed estimated. The failed downloads gets ignored and more files gets downloaded until having 5 successful tests. At this point the outputted value is the median of the 5 results.\n\n\n\nroot@ql-anaymarcos:~# bandwidth-test --help\nUsage: /bin/bandwidth-test [SINGLE_TEST_DURATION] [NONZERO_TESTS] [SERVERS_LIST]\nMeasures maximum available download bandwidth downloading a list of files from the internet.\nThe measurement will take approximately SINGLE_TEST_DURATION*NONZERO_TESTS seconds.\nDownload of each URL is attempted at most one time: multiple URLs should be provided.\nSpeed in B/s is printed to STDOUT.\n\n  SINGLE_TEST_DURATION  fixed duration of each download process,\n                          if missing reads from UCI status-report (default 20)\n  NONZERO_TESTS         minimum number of successful downloads,\n                          if missing reads from UCI status-report (default 5)\n  SERVERS_LIST          a space-separated list of files' URLs to download,\n                          preferably large files.\n                          When running with Busybox wget, has to include http://\n                          and will likely fail with https://\n                          if missing reads from UCI status-report\n                          (defaults to a list of 10 MB files on various domains)\n\n\n\nThis software was developed during the course of [GSoC 2019](https://blog.freifunk.net/2019/08/18/load-correlated-distributed-bandwidth-analysis-for-libremesh-networks-4-conclusions-and-further-work/).\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Ilario Gelmetti\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Internet download bandwidth measurement\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org\n  DEPENDS:=+pv\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  \tMeasure the maximum available bandwidth towards the internet, in the download direction.\n\tDownloading a list of files via HTTP connections.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/batman-adv-auto-gw-mode.html",
"lang": "en",
"title": "batman-adv-auto-gw-mode",
"content": "\nReadme\n\n\n\n\n## batman-adv-auto-gw-mode\n\n\nThis package adds watchping hooks that set gw_mode=server when WAN port gets internet access and gw_mode=client when connection is severed.\n\n\nAlso adds a hotplug.d hook that sends a DHCP request when another batman-adv router announces itself as a gw_mode=server.\n\n\nSo if you install this package on every node of a batman-adv mesh network, you can connect internet access to the WAN port of any (one or more) nodes, it will be autodetected and the rest of the nodes will route through it (or them).\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2012-2014 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=Set batman-adv gw_mode by internet availability\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  URL:=http://libremesh.org\n  DEPENDS:= +batctl +kmod-batman-adv +watchping +dnsmasq-dhcpv6 +ip\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\nAdds watchping hooks that set\ngw_mode=server when WAN port gets internet access\ngw_mode=client when connection is severed\n\nAlso adds a hotplug.d hook that sends a DHCP request\nwhen another batman-adv router announces itself\nas a gw_mode=server.\n\nSo if you install this package on every node of a batman-adv\nmesh network, you can connect internet access to the WAN\nport of any (one or more) nodes, it will be autodetected\nand the rest of the nodes will route through it (or them)\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bmx7-auto-gw-bw-mode.html",
"lang": "en",
"title": "bmx7-auto-gw-bw-mode",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2018 Pau Escrich\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\nPKG_VERSION:=0.0.1\nPKG_RELEASE:=1\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  Section:=net\n  TITLE:= bmx7 auto Internet gateway bandwidth module\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.et&gt;\n  URL:=http://libremesh.org\n  DEPENDS:=+bmx7-auto-gw-mode +pv\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/config\n  select CONFIG_BUSYBOX_CONFIG_CROND\n  select CONFIG_BUSYBOX_CONFIG_CRONTAB\nendef\n\ndefine Package/$(PKG_NAME)/description\n  \tWatchping hooks to set bmx7 Internet bandwidth announcement\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bmx7-auto-gw-mode.html",
"lang": "en",
"title": "bmx7-auto-gw-mode",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2014 Pau Escrich\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=bmx7 auto Internet gateway module\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.et&gt;\n  URL:=http://libremesh.org\n  DEPENDS:=+bmx7 +watchping +ip\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tWatchping hooks to set bmx7 Internet automatic announcements\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bmx7-mdns.html",
"lang": "en",
"title": "bmx7-mdns",
"content": "\nMakefile\n\n\n\n#    Copyright (C) 2018 Pau Escrich\n#\n#    This program is free software; you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation; either version 2 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License along\n#    with this program; if not, write to the Free Software Foundation, Inc.,\n#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n#    The full GNU General Public License is included in this distribution in\n#    the file called \"COPYING\".\n#\n# Contributors:\n#\tPau Escrich &lt;p4u@dabax.net&gt;\n#\n\ninclude ../../libremesh.mk\n\nPKG_VERSION:=0.0.1\nPKG_RELEASE:=1\nPKG_LICENSE:=GPL-2.0+\n\ndefine Package/$(PKG_NAME)\n  SECTION:=net\n  CATEGORY:=Network\n  SUBMENU:=Routing and Redirection\n  TITLE:=bmx7 distributed DNS system\n  URL:=http://bmx6.net\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.net&gt;\n  PKGARCH:=all\n  DEPENDS:=+bmx7 +bmx7-sms +luci-lib-nixio\nendef\n\ndefine Package/$(PKG_NAME)/config\n  select CONFIG_BUSYBOX_CONFIG_CROND\n  select CONFIG_BUSYBOX_CONFIG_CRONTAB\nendef\n\ndefine Package/$(PKG_NAME)/description\n Distributed DNS system using bmx7 sms plugin\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/check-date-http.html",
"lang": "en",
"title": "check-date-http",
"content": "\nReadme\n\n\n\n\n# check-date-http\n\n\nNTP daemon shipped with busybox is not capable to gracefully handle cases of extreme time skew, that are common enough in some community networks, this package detect that situation and restart sysntpd and/or reset the date depending on the configuration.\n\n\nCheck local time against a list of HTTP(s) services, if the time skew is more then 15 minutes, restart sysntpd to force time syncronization, or reset trought date command depending on configuration.\n\n\n## Configurations\nYou can change the behavior and the list of servers in /etc/config/check-date\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Keep local date under NTP too far away skew\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+libuci-lua +lua \\\n\t\t+luci-lib-httpclient\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tCheck local time against a list of HTTP(s) services, if the time skew is\n\tmore then 15 minutes, restart sysntpd to force time syncronization, or\n\treset trought date command depending on configuration.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/check-internet.html",
"lang": "en",
"title": "check-internet",
"content": "\nReadme\n\n\n\n\n# check-internet\n\n\nSimple script to verify that there is internet access using HTTP.\nAccepts a timeout parameter, in seconds, that defaults to 10s.\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2020 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Check internet connection\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tMAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n\tPKGARCH:=all\n\tDEPENDS:=+uclient-fetch +lime-system +luci-lib-jsonc +libubus-lua\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSimple script to verify that there is internet access.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/cotonete.html",
"lang": "en",
"title": "cotonete",
"content": "\nReadme\n\n\n\n\n# cotonete is temporarily hosted on https://github.com/nicopace/cotonete\n\n\n# cotonete [beta]\n\n\ncotonete is a daemon that monitors the deafness of radios and reacts instantly to it, working around the issue.\n\n\n## issue\n\n\nEvery now and then, certain wifi radios manifest an issue that is called deaf radio: the radio has good link, has associated links, but no traffic goes through it.\n\n\n## solution\n\n\ncotonete monitors the traffic over the wireless links by doing a link local ping6 to all the associated peers. If the ping doesn&#8217;t increment the transmitted bandwidth announced by the statistics of the interface, then the radio is deaf and needs to be restarted.\n\n\n\n\n\n\nMakefile\n\n\n\n404: Not Found\n\n\n\n"}
,{
"location": "/packages/deferrable-reboot.html",
"lang": "en",
"title": "deferrable-reboot",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides a deferrable reboot.\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+lua +lime-system\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis $(PKG_NAME) provides a deferrable reboot mechanism. The system\n\twill be rebooted when the uptime of the system reach a specified amount\n\tof seconds and if /tmp/deferrable-reboot.defer file does not contain a\n\tnumber that is greater than the current uptime.\n\tThis way if anyone wants to postpone the reboot, the way is to store the\n\tnext checkpoint in seconds. For example if the system must not reboot from\n\tnow and up to 120 seconds in the future then something like this can be donde\n\tawk '{print $1 + 120}' /proc/uptime &gt; /tmp/deferrable-reboot.defer\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/eupgrade.html",
"lang": "en",
"title": "eupgrade",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2020 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides semi automated firmware upgrades\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+lua +lime-system +luci-lib-jsonc +luci-lib-nixio +libubus-lua +libuci-lua\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis $(PKG_NAME) provides semi automated firmware upgrades.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/first-boot-wizard.html",
"lang": "en",
"title": "first-boot-wizard",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n    TITLE:=$(PKG_NAME)\n    CATEGORY:=LibreMesh\n    MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n    URL:=http://libremesh.org\n    DEPENDS:= +lua +libubox-lua +libuci-lua +luci-lib-nixio +luci-lib-jsonc +libiwinfo-lua \\\n              +ubus-lime-utils +lime-system\n    PKGARCH:=all\n    DEPENDS:=+lime-system\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tScans surrounding LibreMesh networks and joins them.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/hotplug-initd-services.html",
"lang": "en",
"title": "hotplug-initd-services",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Hotplug events of init.d services\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+libubox-lua +libubus-lua \\\n\t\t+lua +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tProvide trigger hotplug events when init.d services are started and\n\tstopped. Put your hooks into /etc/hotplug.d/initd/.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/",
"lang": "en",
"title": "Index of Packages",
"content": "\n\n\nhttps://github.com/libremesh/lime-packages/tree/master/packages\n\n\n\n\nPackages list\n\n\n\n\naltermundi-grafana\n\n\nauto-usb-wwan\n\n\nbabeld-auto-gw-mode\n\n\nbandwidth-test\n\n\nbatman-adv-auto-gw-mode\n\n\nbmx7-auto-gw-bw-mode\n\n\nbmx7-auto-gw-mode\n\n\nbmx7-mdns\n\n\ncheck-date-http\n\n\ncheck-internet\n\n\ncotonete\n\n\ndeferrable-reboot\n\n\neupgrade\n\n\nfirst-boot-wizard\n\n\nhotplug-initd-services\n\n\nlime-ap-watchping\n\n\nlime-app\n\n\nlime-curtigghio\n\n\nlime-debug\n\n\nlime-docs\n\n\nlime-eth-config\n\n\nlime-hwd-ground-routing\n\n\nlime-hwd-openwrt-wan\n\n\nlime-hwd-usbradio\n\n\nlime-hwd-watchcat\n\n\nlime-proto-anygw\n\n\nlime-proto-babeld\n\n\nlime-proto-batadv\n\n\nlime-proto-bgp\n\n\nlime-proto-bmx7\n\n\nlime-proto-olsr\n\n\nlime-proto-olsr2\n\n\nlime-proto-olsr6\n\n\nlime-proto-wan\n\n\nlime-report\n\n\nlime-smart-wifi\n\n\nlime-system\n\n\nminiserver-client\n\n\npirania\n\n\nprometheus-node-exporter-lua-location-latlon\n\n\nprometheus-node-exporter-lua-wifi-params\n\n\nprometheus-node-exporter-lua-wifi-stations-extra\n\n\nprometheus-node-exporter-lua-wifi-survey\n\n\nprometheus-node-push-influx\n\n\nrandom-numgen\n\n\nsafe-reboot\n\n\nsafe-upgrade\n\n\nshared-state-async\n\n\nshared-state-babel_links_info\n\n\nshared-state-babeld_hosts\n\n\nshared-state-bat_hosts\n\n\nshared-state-bat_links_info\n\n\nshared-state-dnsmasq_hosts\n\n\nshared-state-dnsmasq_leases\n\n\nshared-state-dnsmasq_servers\n\n\nshared-state-network_nodes\n\n\nshared-state-node_info\n\n\nshared-state-nodes_and_links\n\n\nshared-state-persist\n\n\nshared-state-pirania\n\n\nshared-state-ref_state_commons\n\n\nshared-state-wifi_links_info\n\n\nshared-state\n\n\nsoporteremoto\n\n\nsprunge\n\n\nubus-lime-batman-adv\n\n\nubus-lime-groundrouting\n\n\nubus-lime-location\n\n\nubus-lime-metrics\n\n\nubus-lime-openairview\n\n\nubus-lime-utils\n\n\nubus-tmate\n\n\nwatchping\n\n\nwifi-unstuck-wa\n\n\n\n\n"}
,{
"location": "/packages/lime-ap-watchping.html",
"lang": "en",
"title": "lime-ap-watchping",
"content": "\nReadme\n\n\n\n\nIn MESH networks with high density of nodes,\nif a single node is working in a wrong way (bad channel, VLAN, random crash, etc.),\nas the AP SSID is always the same, the client devices attached to it\nwill keep trying to use it, but their network connection will be broken.\n\n\nInstead, lime-ap-watchping provides a simple ICMP based watching system\nwhich changes the AP SSID to let other working nodes handle the clients.\nBy default the new SSID will be $HOSTNAME-down, so it will be easy to find and fix it if possible.\nBecause of the layer2 batman-adv roaming feature included in LibreMesh,\nclients won&#8217;t even notice the difference if there is another neighbour node which can handle them.\n\n\nThere are two options available in /etc/config/lime config file under the lime network section:\n\n\n\n\nautoap_enabled: [1/0] turn on/off this feature\n\n\nautoap_hosts: list of hosts used for watchping, usually one or more backbone nodes of the network\n\n\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2017 Pau Escrich\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  Section:=net\n  TITLE:= Watchping hooks to manage AP SSID if network problems\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.et&gt;\n  URL:=http://libremesh.org\n  DEPENDS:= +watchping +lime-system\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Watchping hooks to change AP ssid when the network is down (i.e LibreMesh-Error).\n  So the WiFi roaming is broken and the clients are not using the AP anymore until fixed.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-app.html",
"lang": "en",
"title": "lime-app",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) Libremesh 2017\n#\n# This is free software, licensed under the GNU General Public License v3.\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=lime-app\nPKG_VERSION:=0.2.26\nPKG_RELEASE:=2\n\nPKG_SOURCE:=$(PKG_NAME)-v$(PKG_VERSION).tar.gz\nPKG_HASH:=afb74137af470f1a07d75870d569776e0eef05cce30682f58fed601e4a457d62\nPKG_SOURCE_URL:=https://github.com/libremesh/lime-app/releases/download/v$(PKG_VERSION)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tCATEGORY:=LibreMesh\n\tTITLE:=LimeApp\n\tMAINTAINER:=German Ferrero &lt;germanferrero@altermundi.net&gt;\n\tURL:=http://github.com/libremesh/lime-app\n\tDEPENDS:=+rpcd +uhttpd +uhttpd-mod-ubus +uhttpd-mod-lua \\\n\t\t+ubus-lime-location +ubus-lime-metrics +ubus-lime-utils \\\n\t\t+rpcd-mod-iwinfo +ubus-lime-groundrouting\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tLight webApp for LibreMesh over uhttpd\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\n\t$(INSTALL_DIR) $(1)/www/app/\n\t$(CP) $(BUILD_DIR)/build/* $(1)/www/app/\nendef\n\ndefine Package/$(PKG_NAME)/postinst\n#!/bin/sh\n[ -n \"$${IPKG_INSTROOT}\" ] ||\t( /etc/init.d/rpcd restart &amp;&amp; /etc/init.d/uhttpd restart ) || true\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-curtigghio.html",
"lang": "en",
"title": "lime-curtigghio",
"content": "\nReadme\n\n\n\n\n= README\n:email: gio@altermundi.net\n:revdate: May 08, 2023\n:lang: en\n\n\nTL;DR Fiddling with hostapd code I have managed to successfully establish WiFi\ncommunication between multiple APs. Each of them sends and receives traffic from\nthe other as if they were associated stations, even though they are all configured in\nAP mode. This P2P-like behavior has multiple advantages compared to the usual\nsetup where one of them is configured as AP and all the others as stations, and\nalso compared to Ad-Hoc, WDS, 802.11s, Multi-AP and EasyMesh.\nI have named this operating mode APuP (Access Point Micro Peering).\n\n\n== A bit of context\n\n\nIn community networks we need to maximize the possible paths of communications\nbetween nodes. In a classical AP-STA approach it is not possible to guarantee\ncommunication between all possible nodes in all scenarios. As an example, we might\nhave 4 nodes A, B, C and D where A and B see each other, B and C see each\nother, and C and D see each other. With AP-STA mode each radio must operate either\nas AP or as STA, each STA must connect to only one AP at a time, and a STA needs an AP to\nrelay communication between them. In each combination, restricting each node\nto be an AP or STA you will see that some of them will end up not being able to\nconnect.\n\n\nTo overcome this issue in the past, adhoc mode was used which solved the\nbasic connectivity issue. However, its implementation wasn't high quality and\nits design had important flaws, and it became\nunmaintained after a few years. Luckily while adhoc was growing outdated, 802.11s\nemerged with a few improvements. Its design choices such as complex\nways to bridge other networks and routing between nodes were fossilized into the\nstandard. The increased WiFi driver complexity became problematic and ultimately\ndetermined its silent demise. New radios drivers and firmware don't\nsupport 802.11s well. Nor do the WiFi standards bring much improvement to\n802.11s mesh mode, while they do improve a lot AP-STA modes. Our need for\nnodes to communicate to anyone in range remains strong.\n\n\nWith this as background, I started asking myself: is there some hard-to-resolve\nproblem that impedes AP nodes in sight from talking each other?\nOr is there a simple solution?\n\n\nTalking with Felix Fietkau (nbd), we agreed that it might be\npossible for AP nodes to communicate directly with each other.\nThis would be additionally important because AP mode continues to receive\nmore support and improvements. If there were some slight modification\nthat allowed APs to talk to other \"visible\" APs,\nwe could solve a problem that afflicted us since WiFi creation.\nFelix suggested that this should be possible and with a bit of luck should not\neven need kernel and driver modifications: modifying hostapd in a way that each\nAP adds other visible APs to its station list could be enough. This was indeed\nthe starting point for my experiments.\n\n\n== Deep diving into hostapd\n\n\nFile src/hostapd/drivers/driver.h contain API specification and documentation\nof hostapd &#8594; WiFi driver interface.\n\n\nFile src/hostapd/drivers/driver_nl80211.c hostapd WiFi driver interface\nimplementation for nl80211 based wireless devices.\n\n\n=== Adding STA flow\n\n\nap_sta_add(&#8230;&#8203;)\n\n\nRelevant functions:\n\t- wpa_driver_nl80211_sta_add(&#8230;&#8203;)\n\n\nFile src/hostapd/drivers/driver_nl80211_event.c hostapd receives and handle\nevents from nl80211 based wireless devices.\n\n\nRelevant functions:\n\t- do_process_drv_event(&#8230;&#8203;)\n\n\nFile wpa_supplicant/events.c\n\n\nRelevant functions:\n\t-  wpa_supplicant_event(&#8230;&#8203;)\n\n\nAdding STA function flow:\n\n\ndo_process_drv_event(&#8230;&#8203;) driver_nl80211_event.c &#8594;\n`case NL80211_CMD_NEW_STATION: &#8594;\nnl80211_new_station_event(&#8230;&#8203;) &#8594;\ndrv_event_assoc(&#8230;&#8203;) driver.h &#8594;\nwpa_supplicant_event(&#8230;&#8203;, EVENT_ASSOC, &#8230;&#8203;) wpa_supplicant/events.c  &#8594;\ncase EVENT_ASSOC: &#8594;\nwpa_supplicant_event_assoc(..) &amp;&amp; wpa_supplicant_event_assoc_auth(&#8230;&#8203;)\n\n\nwpa_supplicant_event_assoc(..) &#8594;\nhostapd_notif_assoc(&#8230;&#8203;) drv_callbacks.c &#8594;\nap_sta_add(&#8230;&#8203;) ; hostapd_sta_assoc(&#8230;&#8203;) &#8594;\n\n\nap_sta_add(&#8230;&#8203;) stainfo.c the new station is finally added to the list of\nassociated station to this AP in hostapd\n\n\nhostapd_sta_assoc(&#8230;&#8203;) &#8594; driver&#8594;sta_assoc(&#8230;&#8203;) driver.h\ndriver_nl80211.c does nothing for nl80211 devices\n\n\nwpa_supplicant_event_assoc_auth(&#8230;&#8203;) wpa_supplicant/events.c seems to deal\nwith WPA authentication specific stuff\n\n\n=== Adding WDS station flow\n\n\nRelevant functions:\n - wpa_driver_ops&#8594;set_wds_sta(&#8230;&#8203;) file src/drivers/driver.h pointer to\n\thostapd\n\tdriver specific function to add or remove WDS stations, along with some\n\tdocumentation about it\n - hostapd_set_wds_sta(&#8230;&#8203;) file src/ap/ap_drv_ops.c do a few checks and\n\toperations about bridging configuration then call\n\thapd&#8594;driver&#8594;set_wds_sta(&#8230;&#8203;) aka i802_set_wds_sta(&#8230;&#8203;)\n - i802_set_wds_sta(&#8230;&#8203;) file src/hostapd/drivers/driver_nl80211.c\n\timplementation of wpa_driver_ops&#8594;set_wds_sta(&#8230;&#8203;) for mac80211 driver\n\n\nWhen an AP receive an association request handle_assoc_cb(&#8230;&#8203;) file\nsrc/ap/ieee802_11.c is called if WLAN_STA_WDS flag is set then\nhostapd_set_wds_sta(&#8230;&#8203;) is called\n\n\n=== Other APs beacon handling flow\n\n\n\n * @NL80211_CMD_REGISTER_BEACONS: Register this socket to receive beacons from\n *\tother BSSes when any interfaces are in AP mode. This helps implement\n *\tOLBC handling in hostapd. Beacons are reported in %NL80211_CMD_FRAME\n *\tmessages. Note that per PHY only one application may register.\n\n\n\nnl80211_register_beacons(&#8230;&#8203;) driver_nl80211.c register hostapd to\nreceive events from the kernel when beacons from other BSS are received, inside\nthis function no specific callback is passed to the kernel.\nInside nl80211_get_wiphy_data_ap(&#8230;&#8203;) driver_nl80211.c I have found the only\nusage of the former function, process_beacon_event(&#8230;&#8203;) driver_nl80211.c is\nregistered as\ncallback and then nl80211_register_beacons(&#8230;&#8203;) is finally called if\neverything goes fine another function\nnl80211_recv_beacons(&#8230;&#8203;) driver_nl80211.c is register with a call to\nnl80211_register_eloop_read(&#8230;&#8203;) driver_nl80211.c .\n\n\nnl80211_recv_beacons(&#8230;&#8203;) driver_nl80211.c which just call the more obscure\nnl_recvmsgs(handle, w&#8594;nl_cb); where w&#8594;nl_cb seems to be\nprocess_beacon_event(&#8230;&#8203;) again&#8230;&#8203;\n\n\nprocess_beacon_event(&#8230;&#8203;) driver_nl80211.c do a few checks and then forward\nthe event to wpa_supplicant_event(drv&#8594;ctx, EVENT_RX_MGMT, &amp;event); which if\nthe beacon was received on an AP interface just call\nap_mgmt_rx(wpa_s, &amp;data&#8594;rx_mgmt); at line 5598 of wpa_supplicant/events.c.\n\n\nap_mgmt_rx(&#8230;&#8203;) wpa_supplicant/ap.c just call\nieee802_11_mgmt(&#8230;&#8203;) src/ap/iee802_11.c which at line 6337 calls\nhandle_beacon(&#8230;&#8203;); src/ap/iee802_11.c which do a few checks and then calls\nap_list_process_beacon(&#8230;&#8203;) src/ap/ap_list.c which finally seems to add the\nAP from where the beacon originated to the list of known APs and do a few more\nchecks about overlapping legacy BSS condition.\n\n\n== OpenWrt hostapd packaging\n\n\nhostapd openwrt package is shipped together with OpenWrt sources, and it is\nfound at package/network/services/hostapd/. In this directory we find\nREADME.md file which show a few interesting methods of the hostapd ubus\ninterface and Makefile where all the hostapd OpenWrt variants like wpad\nare defined. The Makefile is complex because there are many variants\ndepending on which subset of hostapd features are enabled, on what SSL/TLS\nlibrary is used, etc. The Makefile is structured to avoid duplicating code and\ncommon options all around that effectively reduces the size of the Makefile\nand probably ease the work for the maintainer.\n\n\nDepending on package variant OpenWrt hostapd package Makefile sets multiple\nconfigs with statements like DRIVER_MAKEOPTS += CONFIG_AP=y or\nDRIVER_MAKEOPTS += CONFIG_TLS=openssl CONFIG_SAE=y. Those configurations\ndon&#8217;t seem to impact directly in the hostapd C code #ifdef but are handled\nwithin hostapd and wpa_supplicant sources Makefile which depend on the\npassed configs to set the proper CFLAGS, C source files and output objects files.\n\n\nTo use our customized hostapd source in OpenWrt we use source tree override\nas explained by Jow\n\n\nPlus a couple more steps to integrate OpenWrt hostapd specific patches and\nadditional sources.\n\n\nrsync -aPh ~/Builds/openwrt/package/network/services/hostapd/src/ ./\nfor mPatch in ~/Builds/openwrt/package/network/services/hostapd/patches/*.patch  ; do patch -p1 &lt; $mPatch ; done\n\n\nThe modified hostapd code I published on my\ngitlab sandbox already\nincludes those so you don&#8217;t need to reapply them.\n\n\nTo clean and re-build only hostapd package use\nmake package/network/services/hostapd/clean\nmake package/network/services/hostapd/compile\n\n\n== hostapd modifications\n\n\nTo enable WDS AP - AP I have modified handle_beacon(&#8230;&#8203;) function defined in\nsrc/ap/ieee802_11.c, so when a beacon from another AP is received, hostapd also\nchecks if the advertised SSID is the same as one advertised\nby current instance. If so, information from that beacon is extracted and\nadapted to look like station information, and a station entry is populated\ninto the hostapd station list. These modifications should be put into their own\nfunction later.\n\n\nTo avoid loops from all specific interfaces created for each AP-AP connection\nbeing bridged automatically by hostapd, I have temporarily\ndisabled bridging in hostapd_set_wds_sta defined in src/ap/ap_drv_ops.c.\nThis should become a runtime configuration later.\n\n\nI have also added a compile time config CONFIG_APUP in hostapd/Makefile so\nthese modifications can be easly enabled at compile time.\n\n\nI have tested the modifications and after a round of trial and error, it\nworks as expected with good performance. You can see the test.sh script\nwhich configures four vanilla OpenWrt routers into a working testbed to see how\nto use this.\n\n\nThe modified hostapd code is published on my\ngitlab sandbox\n\n\n== Useful snippets\n\n\nLog: TL-WDR3600 and TL-WDR4300 WDS AP - AP connection success\n\nFri Apr 28 22:24:11 2023 daemon.notice hostapd: Configuration file: /var/run/hostapd-phy1.conf (phy phy1-ap0) --&gt; new PHY\nFri Apr 28 22:24:11 2023 daemon.notice netifd: wan (1619): udhcpc: broadcasting discover\nFri Apr 28 22:24:12 2023 kern.info kernel: [   39.574041] IPv6: ADDRCONF(NETDEV_CHANGE): phy1-ap0: link becomes ready\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy1-ap0: interface state UNINITIALIZED-&gt;ENABLED\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy1-ap0: AP-ENABLED\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: Configuration file: /var/run/hostapd-phy0.conf (phy phy0-ap0) --&gt; new PHY\nFri Apr 28 22:24:12 2023 kern.info kernel: [   39.827175] IPv6: ADDRCONF(NETDEV_CHANGE): phy0-ap0: link becomes ready\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy0-ap0: interface state UNINITIALIZED-&gt;ENABLED\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy0-ap0: AP-ENABLED\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy1-ap0: AP-STA-CONNECTED 64:70:02:de:c5:1e auth_alg=open\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy1-ap0: WDS-STA-INTERFACE-ADDED ifname=phy1-ap0.sta1 sta_addr=64:70:02:de:c5:1e\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: handle_beacon(...) Added WDS AP at phy1-ap0.sta1 with flags: 35491, capabilities 33\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy0-ap0: AP-STA-CONNECTED 64:70:02:de:c5:1d auth_alg=open\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: phy0-ap0: WDS-STA-INTERFACE-ADDED ifname=phy0-ap0.sta1 sta_addr=64:70:02:de:c5:1d\nFri Apr 28 22:24:12 2023 daemon.notice hostapd: handle_beacon(...) Added WDS AP at phy0-ap0.sta1 with flags: 35491, capabilities 1057\n\n\n\nLog: Two DAP-X1860-A1 WDS AP - AP connection success\n\nThu May 25 21:55:04 2023 daemon.notice hostapd: phy0-ap0: AP-STA-CONNECTED a8:63:7d:2e:97:d9 auth_alg=open\nThu May 25 21:55:05 2023 daemon.notice hostapd: phy0-ap0: WDS-STA-INTERFACE-ADDED ifname=phy0-ap0.sta1 sta_addr=a8:63:7d:2e:97:d9\nThu May 25 21:55:05 2023 daemon.notice netifd: Interface 'curtigghio' is now down\nThu May 25 21:55:05 2023 daemon.notice hostapd: handle_beacon(...) Added WDS AP at phy0-ap0.sta1 with flags: 35491, capabilities 1057\nThu May 25 21:55:05 2023 daemon.notice netifd: Interface 'curtigghio' is setting up now\nThu May 25 21:55:05 2023 daemon.notice netifd: Interface 'curtigghio' is now up\nThu May 25 21:55:05 2023 daemon.notice netifd: Network device 'phy0-ap0.sta1' link is up\nThu May 25 21:55:05 2023 daemon.notice hostapd: phy1-ap0: AP-STA-CONNECTED a8:63:7d:2e:97:dc auth_alg=open\nThu May 25 21:55:05 2023 daemon.notice hostapd: phy1-ap0: WDS-STA-INTERFACE-ADDED ifname=phy1-ap0.sta1 sta_addr=a8:63:7d:2e:97:dc\nThu May 25 21:55:05 2023 daemon.notice hostapd: handle_beacon(...) Added WDS AP at phy1-ap0.sta1 with flags: 297635, capabilities 33\nThu May 25 21:55:05 2023 daemon.notice netifd: Network device 'phy1-ap0.sta1' link is up\n\n\n\nLog: plain station connecting and desconnecting to the AP\n\nSun Jan  1 22:06:54 2023 daemon.notice hostapd: phy0-ap0: interface state UNINITIALIZED-&gt;ENABLED\nSun Jan  1 22:06:54 2023 daemon.notice hostapd: phy0-ap0: AP-ENABLED\nSun Jan  1 22:06:54 2023 daemon.notice hostapd: LIME_CURTIJJO nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for phy0-ap0\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for phy0-ap0\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO ap_sta_add addr: b4:9d:0b:87:ed:06\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO ap_sta_add addr: b4:9d:0b:87:ed:06 New STA\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO hostapd_sta_add explicit params addr=b4:9d:0b:87:ed:06 aid=0 capability=0 supp_rates=0x77aee688 supp_rates_len=3 listen_interval=0 ht_capab=0 vht_capab=0 he_capab=0 he_capab_len=0 eht_capab=0 eht_capab_len=0 he_6ghz_capab=0 flags=0 qosinfo=0 vht_opmode=0 supp_p2p_ps=0 set=0\nSun Jan  1 22:07:09 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 IEEE 802.11: authentication OK (open system)\nSun Jan  1 22:07:09 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 MLME: MLME-AUTHENTICATE.indication(b4:9d:0b:87:ed:06, OPEN_SYSTEM)\nSun Jan  1 22:07:09 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 MLME: MLME-DELETEKEYS.request(b4:9d:0b:87:ed:06)\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO nl80211: Drv Event 19 (NL80211_CMD_NEW_STATION) received for phy0-ap0\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for phy0-ap0\nSun Jan  1 22:07:09 2023 daemon.info hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 IEEE 802.11: authenticated\nSun Jan  1 22:07:09 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 IEEE 802.11: association OK (aid 1)\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO hostapd_sta_add explicit params addr=b4:9d:0b:87:ed:06 aid=1 capability=1057 supp_rates=0x77aee688 supp_rates_len=8 listen_interval=1 ht_capab=0x7f7aec04 vht_capab=0 he_capab=0 he_capab_len=0 eht_capab=0 eht_capab_len=0 he_6ghz_capab=0 flags=35459 qosinfo=0 vht_opmode=0 supp_p2p_ps=0 set=1\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: LIME_CURTIJJO nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for phy0-ap0\nSun Jan  1 22:07:09 2023 daemon.info hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 IEEE 802.11: associated (aid 1)\nSun Jan  1 22:07:09 2023 daemon.notice hostapd: phy0-ap0: AP-STA-CONNECTED b4:9d:0b:87:ed:06 auth_alg=open\nSun Jan  1 22:07:09 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 MLME: MLME-ASSOCIATE.indication(b4:9d:0b:87:ed:06)\nSun Jan  1 22:07:09 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 MLME: MLME-DELETEKEYS.request(b4:9d:0b:87:ed:06)\nSun Jan  1 22:07:09 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 IEEE 802.11: binding station to interface 'phy0-ap0'\nSun Jan  1 22:07:12 2023 daemon.info dnsmasq-dhcp[1]: DHCPDISCOVER(br-lan) b4:9d:0b:87:ed:06\nSun Jan  1 22:07:12 2023 daemon.info dnsmasq-dhcp[1]: DHCPOFFER(br-lan) 192.168.1.122 b4:9d:0b:87:ed:06\nSun Jan  1 22:07:12 2023 daemon.info dnsmasq-dhcp[1]: DHCPREQUEST(br-lan) 192.168.1.122 b4:9d:0b:87:ed:06\nSun Jan  1 22:07:12 2023 daemon.info dnsmasq-dhcp[1]: DHCPNAK(br-lan) 192.168.1.122 b4:9d:0b:87:ed:06 wrong server-ID\nSun Jan  1 22:07:28 2023 daemon.notice hostapd: phy0-ap0: AP-STA-DISCONNECTED b4:9d:0b:87:ed:06\nSun Jan  1 22:07:28 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 IEEE 802.11: deauthenticated\nSun Jan  1 22:07:28 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 MLME: MLME-DEAUTHENTICATE.indication(b4:9d:0b:87:ed:06, 3)\nSun Jan  1 22:07:28 2023 daemon.debug hostapd: phy0-ap0: STA b4:9d:0b:87:ed:06 MLME: MLME-DELETEKEYS.request(b4:9d:0b:87:ed:06)\nSun Jan  1 22:07:28 2023 daemon.notice hostapd: LIME_CURTIJJO nl80211: Drv Event 20 (NL80211_CMD_DEL_STATION) received for phy0-ap0\n\n\n\nDump ieee802_11_elems\n\n\twpa_printf( MSG_INFO,\n\t            \"handle_beacon(...) elems: \"\n\t            \"ssid %.*s \"\n\t            \"supp_rates_len %d, \"\n\t            \"ds_params %p, \"\n\t            \"challenge_len %d, \"\n\t            \"erp_info %p, \"\n\t            \"ext_supp_rates_len %d, \"\n\t            \"wpa_ie_len %d, \"\n\t            \"rsn_ie_len %d, \"\n\t            \"rsnxe_len %d, \"\n\t            \"wmm_len %d, \"\n\t            \"wmm_tspec_len %d, \"\n\t            \"wps_ie_len %d, \"\n\t            \"supp_channels_len %d, \"\n\t            \"mdie_len %d, \"\n\t            \"ftie_len %d, \"\n\t            \"timeout_int %p, \"\n\t            \"ht_capabilities %p, \"\n\t            \"ht_operation %p, \"\n\t            \"mesh_config_len %d, \"\n\t            \"mesh_id_len %d, \"\n\t            \"peer_mgmt_len %d, \"\n\t            \"vht_capabilities %p, \"\n\t            \"vht_operation %p, \"\n\t            \"vht_opmode_notif %p, \"\n\t            \"vendor_ht_cap_len %d, \"\n\t            \"vendor_vht_len %d, \"\n\t            \"p2p_len %d, \"\n\t            \"wfd_len %d, \"\n\t            \"link_id %p, \"\n\t            \"interworking_len %d, \"\n\t            \"qos_map_set_len %d, \"\n\t            \"hs20_len %d, \"\n\t            \"bss_max_idle_period %p, \"\n\t            \"ext_capab_len %d, \"\n\t            \"ssid_list_len %d, \"\n\t            \"osen_len %d, \"\n\t            \"mbo_len %d, \"\n\t            \"ampe_len %d, \"\n\t            \"mic_len %d, \"\n\t            \"pref_freq_list_len %d, \"\n\t            \"supp_op_classes_len %d, \"\n\t            \"rrm_enabled_len %d, \"\n\t            \"cag_number_len %d, \"\n\t            \"ap_csn %p, \"\n\t            \"fils_indic_len %d, \"\n\t            \"dils_len %d, \"\n\t            \"assoc_delay_info %p,\"\n\t            \"fils_req_params_len %d, \"\n\t            \"fils_key_confirm_len %d, \"\n\t            \"fils_session %p, \"\n\t            \"fils_hlp_len %d, \"\n\t            \"fils_ip_addr_assign_len %d, \"\n\t            \"key_delivery_len %d, \"\n\t            \"wrapped_data_len %d, \"\n\t            \"fils_pk_len %d, \"\n\t            \"fils_nonce %p, \"\n\t            \"owe_dh_len %d, \"\n\t            \"power_capab_len %d, \"\n\t            \"roaming_cons_sel_len %d, \"\n\t            \"password_id_len %d, \"\n\t            \"oci_len %d, \"\n\t            \"multi_ap_len %d, \"\n\t            \"he_capabilities_len %d, \"\n\t            \"he_operation_len %d, \"\n\t            \"short_ssid_list_len %d, \"\n\t            \"he_6ghz_band_cap %p,\"\n\t            \"sae_pk_len %d, \"\n\t            \"s1g_capab %p, \"\n\t            \"pasn_params_len %d, \"\n\t            \"eht_capabilities_len %d, \"\n\t            \"eht_operation_len %d, \"\n\t            \"basic_mle_len %d, \"\n\t            \"probe_req_mle_len %d, \"\n\t            \"reconf_mle_len %d, \"\n\t            \"tdls_mle_len %d, \"\n\t            \"prior_access_mle_len %d, \"\n\t            \"mbssid_known_bss_len %d |END|\"\n\t            ,\n\t            (int) elems.ssid_len, elems.ssid,\n\t            elems.supp_rates_len,\n\t            elems.ds_params,\n\t            elems.challenge_len,\n\t            elems.erp_info,\n\t            elems.ext_supp_rates_len,\n\t            elems.wpa_ie_len,\n\t            elems.rsn_ie_len,\n\t            elems.rsnxe_len,\n\t            elems.wmm_len,\n\t            elems.wmm_tspec_len,\n\t            elems.wps_ie_len,\n\t            elems.supp_channels_len,\n\t            elems.mdie_len,\n\t            elems.ftie_len,\n\t            elems.timeout_int,\n\t            elems.ht_capabilities,\n\t            elems.ht_operation,\n\t            elems.mesh_config_len,\n\t            elems.mesh_id_len,\n\t            elems.peer_mgmt_len,\n\t            elems.vht_capabilities,\n\t            elems.vht_operation,\n\t            elems.vht_opmode_notif,\n\t            elems.vendor_ht_cap_len,\n\t            elems.vendor_vht_len,\n\t            elems.p2p_len,\n\t            elems.wfd_len,\n\t            elems.link_id,\n\t            elems.interworking_len,\n\t            elems.qos_map_set_len,\n\t            elems.hs20_len,\n\t            elems.bss_max_idle_period,\n\t            elems.ext_capab_len,\n\t            elems.ssid_list_len,\n\t            elems.osen_len,\n\t            elems.mbo_len,\n\t            elems.ampe_len,\n\t            elems.mic_len,\n\t            elems.pref_freq_list_len,\n\t            elems.supp_op_classes_len,\n\t            elems.rrm_enabled_len,\n\t            elems.cag_number_len,\n\t            elems.ap_csn,\n\t            elems.fils_indic_len,\n\t            elems.dils_len,\n\t            elems.assoc_delay_info,\n\t            elems.fils_req_params_len,\n\t            elems.fils_key_confirm_len,\n\t            elems.fils_session,\n\t            elems.fils_hlp_len,\n\t            elems.fils_ip_addr_assign_len,\n\t            elems.key_delivery_len,\n\t            elems.wrapped_data_len,\n\t            elems.fils_pk_len,\n\t            elems.fils_nonce,\n\t            elems.owe_dh_len,\n\t            elems.power_capab_len,\n\t            elems.roaming_cons_sel_len,\n\t            elems.password_id_len,\n\t            elems.oci_len,\n\t            elems.multi_ap_len,\n\t            elems.he_capabilities_len,\n\t            elems.he_operation_len,\n\t            elems.short_ssid_list_len,\n\t            elems.he_6ghz_band_cap,\n\t            elems.sae_pk_len,\n\t            elems.s1g_capab,\n\t            elems.pasn_params_len,\n\t            elems.eht_capabilities_len,\n\t            elems.eht_operation_len,\n\t            elems.basic_mle_len,\n\t            elems.probe_req_mle_len,\n\t            elems.reconf_mle_len,\n\t            elems.tdls_mle_len,\n\t            elems.prior_access_mle_len,\n\t            elems.mbssid_known_bss_len\n\t            );\n\n\n\nhttp://www.bradgoodman.com/bittool/\n\n\n== WDS Station interface bridging\n\n\nhostapd adds WDS STA interfaces to a bridge either the same of plain station\npassed with the bridge option or to another one passed with the wds_bridge.\nIn our use case this is not ideal as we might want to give routing protocols access\ndirectly to the station interface. Moreover in a mesh setup, multiple links could\neasily cause a bridge loop: linux simple bridge will not avoid this\nas is. To disable automatic bridging set wds_bridge to an empty string in the\nhostapd config file.\n\n\n== Interesting conversations\n\n\n\n[16:11] &lt;dwfreed&gt; G10h4ck: ovsdb is what actually contains the switch configuration; it's needed\n[16:13] &lt;-- Guest2984 (~srslypasc@0002bff5.user.oftc.net) has left this server (Ping timeout: 480 seconds).\n[16:19] &lt;-- Borromini (~Jean-Jacq@0001344c.user.oftc.net) has left this server (Quit: Lost terminal).\n[16:27] &lt;-- cbeznea (~claudiu@82.78.167.116) has left this server (Quit: Leaving.).\n[16:41] &lt;-- borek (~Thunderbi@2001:1488:fffe:6:e258:8d45:f844:67) has left this server (Ping timeout: 480 seconds).\n[17:11] &lt;G10h4ck&gt; dwfreed in my case the heig level configuration is managed by another custom compontent which is able to output openflow\n[17:11] --&gt; csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) has joined this channel.\n[17:12] &lt;G10h4ck&gt; in that case I guess only only ovs-vswitchd should be needed\n[17:13] &lt;G10h4ck&gt; anyway I see  libopenvswitch is 2.3M it seems huge for an embedded device, and used by even the most basic tool ovs-ctl -_-  is this the toll to use openvswitch ?\n[17:14] &lt;-- csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) has left this server.\n[17:14] --&gt; csrf (~csrf@ip72-199-118-215.sd.sd.cox.net) has joined this channel.\n[17:19] &lt;dwfreed&gt; I mean, yeah\n[17:20] &lt;dwfreed&gt; ovs is not intended for microscopic devices\n[17:21] &lt;dwfreed&gt; equally I would not expect non-trivial configs to work well with the barebones DSA implementations of embedded devices\n[17:22] &lt;G10h4ck&gt; dwfreed the idea is to use openvswitch mainly as datapath, another component which understand mesh networks would configure it\n[17:22] &lt;-- csrf (~csrf@ip72-199-118-215.sd.sd.cox.net) has left this server (Remote host closed the connection).\n[17:22] &lt;G10h4ck&gt; sadly batman-adv seems not much alive anymore so we are looking for alternatives way\n[17:22] --&gt; csrf (~csrf@ip72-199-118-215.sd.sd.cox.net) has joined this channel.\n[17:23] &lt;G10h4ck&gt; the idea we had was \"let's implement layed 2 mesh logic in userspace and then configure openvswitch as kernel space datapath\"\n[17:23] &lt;G10h4ck&gt; and we are investigating the fesibility\n[17:24] &lt;G10h4ck&gt; so basically we would have an ovs bridge with ethernet ports and wifi mesh ports, and then the table of the switch would be manipulated by a mesh aware compontent, to deal with loops, lossy links etc..\n[17:25] &lt;nbd&gt; if you're doing your own datapath thing anyway, why not just implement the datapath in ebpf?\n[17:29] &lt;G10h4ck&gt; I have thinked of that too nbd to use openvswitch was to avoid implementing the datapath, and just implement the mesh logic\n[17:29] &lt;G10h4ck&gt; nbd did you recognized me? it's Gio from libre-mesh\n[17:29] &lt;nbd&gt; yes\n[17:29] &lt;nbd&gt; it's been a while\n[17:30] &lt;G10h4ck&gt; how ar ere you?\n[17:31] &lt;nbd&gt; doing fine, thanks. how about you?\n[17:31] &lt;G10h4ck&gt; I am good too, in Argentina right now with the Altermundi people\n[17:31] &lt;nbd&gt; cool\n[17:31] &lt;G10h4ck&gt; so I thinked that openvswitch datapath should be fine for libre-mesh setup, but was just exploring that\n[17:32] &lt;G10h4ck&gt; do you think reimplementing the datapath in ebpf would endup working better then attempting to reuse openvswitch stuff?\n[17:32] &lt;nbd&gt; depends on the needs of the routing algorithm, i guess\n[17:32] &lt;nbd&gt; with ebpf you can have more control over the datapath\n[17:33] &lt;G10h4ck&gt; my idea was to keep the datapath kernel-space and move the wole mesh login like link discovery. quality measure, calculatinc best path etc. in user space\n[17:33] &lt;nbd&gt; but it takes a while to learn how to fight the verifier :)\n[17:33] &lt;nbd&gt; that makes sense\n[17:34] &lt;nbd&gt; either way, if you choose ovs, i would recommend simply not using any of the existing ovs user space code\n[17:35] &lt;nbd&gt; and just write your own thing that talks to the kernel ovs api\n[17:35] &lt;nbd&gt; i don't think there's any easy way to cut down on the amount of bloat in the ovs user space\n[17:36] &lt;G10h4ck&gt; it is a pity the ovs userspace is so bloated...\n[17:37] &lt;G10h4ck&gt; thanks nbd i was feeling a bit lost exploring all that stuff and your opinion helps a lot\n[17:38] &lt;nbd&gt; i think a ebpf data path in the kernel might actually end up being rather simple\n[17:39] &lt;nbd&gt; the routing table is basically a map that uses the destination mac as primary key\n[17:39] &lt;nbd&gt; and points to an entry in another map that keeps track of links\n[17:39] &lt;nbd&gt; containing metadata such as the output device, packet counters, etc.\n[17:40] &lt;nbd&gt; the program should recognize protocol data packets and simply bounce them to user space on a separate device\n[17:41] &lt;nbd&gt; if you're using a custom eth type for encapsulation and don't use IP, the header overhead should be small as well\n[17:41] &lt;nbd&gt; initially i would recommend simply bouncing all multicast traffic into user space and forwarding it from there\n[17:42] &lt;nbd&gt; multicast/broadcast\n[17:42] &lt;nbd&gt; makes it easier to deal with special cases for dhcp, arp, etc.\n[17:43] &lt;G10h4ck&gt; thanks!\n[17:43] &lt;nbd&gt; you're welcome. let me know how it goes and which approach you decide on\n[17:43] &lt;nbd&gt; i'm definitely interested in this\n[17:44] &lt;nbd&gt; i also have some experience writing ebpf programs, so i can offer some advice if you get stuck somewhere\n[17:44] &lt;G10h4ck&gt; great!\n[17:45] &lt;nbd&gt; for openwrt, i wrote 'bridger', which is a fast path for the linux bridge code and 'qosify' which does rule based dscp marking\n[17:45] &lt;G10h4ck&gt; in current openwrt compiling ebpf stuff is already integrated in the toolchain?\n[17:46] &lt;nbd&gt; there's some makefile magic to make it easy to build and package ebpf code\n[17:46] &lt;G10h4ck&gt; didn't know of those new components at all!\n[17:47] &lt;nbd&gt; inside qosify or unetd you can also find a header file bpf_skb_utils.h which makes it much easier to parse ip protocol stuff in skbs\n[17:47] &lt;G10h4ck&gt; qosify seems something we my end up using in libre-mesh\n[17:47] &lt;nbd&gt; maybe you might be interested in unetd as well\n[17:48] &lt;nbd&gt; my goal with it was to create the easiest way to deploy and manage fully meshed decentralized wireguard networks\n[17:48] &lt;G10h4ck&gt; very interesting\n[17:49] &lt;nbd&gt; it also makes it easy to layer vxlan on top to bridge l2 segments over the network\n[17:50] &lt;G10h4ck&gt; it seemsto have many interesting overlapping area which what i was investigating :D\n[17:50] &lt;nbd&gt; https://openwrt.org/docs/techref/unetd\n[17:50] &lt;nbd&gt; :)\n[17:51] &lt;nbd&gt; unetd can also do direct connections over double-NAT, assuming at least one node is publicly reachable (or you're using DHT + a STUN server)\n[17:52] &lt;G10h4ck&gt; and what happens if some connections are over lossy wifi links ? (smirk smirk)\n[17:53] &lt;nbd&gt; it doesn't do any form of mesh routing\n[17:53] &lt;nbd&gt; though i guess that might be interesting too\n[17:54] &lt;nbd&gt; it has some limited configuration where you configure a node as a gateway for another node\n[17:55] &lt;nbd&gt; it works on the basis of having a cryptographically signed network topology with wireguard keys, hostnames and ip/subnet addresses reachable over nodes with those keys\n[17:56] &lt;nbd&gt; you can update the network topology and it'll spread across participating nodes\n[17:56] --&gt; minimal (~minimal@0002b71e.user.oftc.net) has joined this channel.\n[17:56] &lt;nbd&gt; and it'll exchange peer endpoint information to try to get every node to be able to talk to all other nodes directly\n[17:58] &lt;nbd&gt; anyways... it was good talking to you, i need to get some sleep now\n[17:58] &lt;nbd&gt; the kids wake me up early in the morning\n[17:58] &lt;G10h4ck&gt; have a good sleep\n[17:58] &lt;nbd&gt; thanks\n[17:58] &lt;G10h4ck&gt; hugs to the family\n[17:58] &lt;G10h4ck&gt; and thanks for sharing all the interesting ideas\n\n[11:24] &lt;G10h4ck&gt; hi all!\n[11:24] --&gt; Gaspare (~Gaspare@177-38-99-106.netway.psi.br) has joined this channel.\n[11:25] &lt;G10h4ck&gt; nbd I was diving into eBPF and found that linux have many helper functions like bpf_skb_vlan_push, i was wandering if it is powwible to manipulate wifi frames with similar helpers, in particular if there is a way to access and manypulate the 4 macaddress fields in the wifi data frames\n[11:29] &lt;nbd&gt; you can insert headers, manipulate frame data, etc.\n[11:29] &lt;nbd&gt; it's quite flexible\n[11:31] &lt;G10h4ck&gt; I was wondering about forwarding L2 frames without need to encapsulate them, encapsulating L2 stuff have gine MTU quirks historically expecially when both cabled ethernet and wifi links are involved\n[11:31] &lt;G10h4ck&gt; we managed to work around those hickups, but prevent them radically is tempting\n[11:32] &lt;G10h4ck&gt; so if we can access the four macs fields in the wifi frame we gould use one for real source and one for real destination\n[11:32] &lt;-- Gaspare (~Gaspare@177-38-99-106.netway.psi.br) has left this server (Ping timeout: 480 seconds).\n[11:34] &lt;nbd&gt; G10h4ck: in unetd vxlan i had mtu issues as well, so i wrote a BPF program that fixes the TCP MSS option to deal with that\n[11:34] &lt;G10h4ck&gt; yeah we have that sort of workaround in place in libremesh too\n[11:34] &lt;G10h4ck&gt; but they always fix only part of the problem\n[11:35] &lt;G10h4ck&gt; at some point we endup having reports from users the the app X that uses it's own UDP based transport protocol doesn't work as expected for example\n[11:36] &lt;G10h4ck&gt; in the end we have all user facing network interfaces setted with MTU 1350\n[11:36] &lt;G10h4ck&gt; we also telle the clients via DHCP that the mtu is 1350 and so on\n[11:36] &lt;G10h4ck&gt; but there is always some quirks\n[11:37] &lt;nbd&gt; you could bounce oversized packets to user space and let user space send back ICMP error packets to trigger path MTU discovery\n[11:37] &lt;G10h4ck&gt; in our case it seems we can avoid it almost completely in most of the case by avoiding encapsulation unless it is strictly needed\n[11:38] &lt;G10h4ck&gt; on cabled links we could just forward the frame as-is to the correct interface\n[11:38] &lt;G10h4ck&gt; in wireless link we should set DST macaddress to the nextop, and save the real_DST somewhere, maybe in 4 mac address field\n[11:39] &lt;nbd&gt; just make a real 4-address wireless link\n[11:39] &lt;nbd&gt; then you can treat it as an ethernet link\n[11:39] &lt;G10h4ck&gt; or we could encapsulate on wireless only which supports greater mtu, and then decapsulate when forwarding over cabled link\n[11:40] &lt;nbd&gt; at some point i was thinking of making a mesh-like mode which runs on top of a regular AP interface and simply creates 4-addr peer station entries/interfaces for its neighbors\n[11:40] &lt;nbd&gt; seems like it would fit nicely with what you're trying to do\n[11:40] &lt;G10h4ck&gt; also it seems that newer radios doesn'T supports 802,11s that well\n[11:40] &lt;nbd&gt; one useful property of this is that it doesn't require special addressing modes used for 802.11s\n[11:41] &lt;nbd&gt; it would work with any chipset that has normal mac80211 4-addr support\n[11:41] &lt;nbd&gt; and would work with the existing offload features\n[11:41] &lt;nbd&gt; e.g. encap offload on mtk chipsets\n[11:41] &lt;nbd&gt; with a bit of luck, it wouldn't even need user space changes\n[11:41] &lt;nbd&gt; sorry, kernel space changes\n[11:42] &lt;nbd&gt; it would work with a modified hostapd\n[11:42] &lt;nbd&gt; since all you're doing is creating extra station entries and handling mgmt/auth in user space\n[11:42] &lt;G10h4ck&gt; &gt; it would work with any chipset that has normal mac80211 4-addr support&lt; is this supported by most of the chips/drivers ?\n[11:42] &lt;nbd&gt; most common ones yes\n[11:42] &lt;nbd&gt; ath9k, ath10k, mt76\n[11:43] &lt;nbd&gt; it would definitely be a lot faster than 802.11s\n[11:45] &lt;G10h4ck&gt; do you think ath11k will be viable for this too ?\n[11:45] &lt;G10h4ck&gt; San was investigating 802.11ax radios for librerouter 2\n[11:46] &lt;nbd&gt; i think it could work, but i would definitely recommend going with mt7915 instead\n[11:46] &lt;nbd&gt; for 802.11ax\n[11:46] &lt;G10h4ck&gt; he has been playing with some mt7915e based radios\n[11:48] &lt;nbd&gt; from what i hear, ath11k still has a lot of firmware bugs\n[11:48] &lt;nbd&gt; and you can't really expect any reasonable support from qualcomm\n[11:48] &lt;G10h4ck&gt; so this AP + 4-addr custom mode you suggests seems very interesting\n[11:49] &lt;nbd&gt; with mt76, i can forward bug reports directly to mtk\n[11:49] &lt;nbd&gt; and they typically have been very responsive when it comes to dealing with firmware issues\n[11:49] &lt;G10h4ck&gt; so basically one should configure the radio in this mode on each router, and it would behave more or less like mesh node, but with better performances\n[11:49] &lt;nbd&gt; of course somebody would have to write the code for hostapd to do this\n[11:50] &lt;nbd&gt; one advantage is that you wouldn't even need a separate interface for meshing anymore. you could piggy-back on a normal ap interface with this\n[11:52] &lt;G10h4ck&gt; that would be great\n[11:53] &lt;G10h4ck&gt; from what I understand we will be also less dependant on driver support of \"more exotic\" features like virtual interfaces and 802.11s\n[11:53] &lt;G10h4ck&gt; so any radio with good AP support should work well\n[11:54] &lt;G10h4ck&gt; do I understand well?\n\n\n\n\n[16:21] &lt;nbd&gt; G10h4ck: hi\n[16:41] &lt;G10h4ck&gt; hi nbd how are you?\n[16:45] &lt;nbd&gt; G10h4ck: fine, thx\n[16:45] &lt;nbd&gt; how about you?\n[16:48] &lt;G10h4ck&gt; I had some stomachache but now seem going good, also have been reading hostapd code, I have now some undertanding, still I need your suggestion on what should be the flow to add an AP as a station in the station list, AFAIR right now when a station try to associato to our AP an event is bubbled from the kernel to the hostapd code and the hostapd code do a few stuff, authentication etc. then add it in it's station list and call a driver specific callback (\n[16:48] &lt;G10h4ck&gt; driver-&gt;add_station or something similar) that in case of mac80211 is NULL so does nothing\n[17:05] &lt;G10h4ck&gt; so in case there is another AP, I guess that event is not triggered because the APwill not attempt to associate\n[17:07] &lt;G10h4ck&gt; so there is some useful event bubbled to hostapd, for example when a beacon from another AP is received, where we can plug our code which create a station entry or should I \"scan\" for available AP in another way, and then trigger the station adding code?\n[17:09] &lt;nbd&gt; it's been a while since i looked at that part of hostapd\n[17:09] &lt;nbd&gt; so i don't have any answers yet\n[17:10] &lt;nbd&gt; i don't think you should scan\n[17:10] &lt;nbd&gt; beacons should be received already\n[17:10] &lt;nbd&gt; for coexistence purposes\n[17:10] &lt;nbd&gt; i just don't know in which part of the code\n[17:22] &lt;G10h4ck&gt; nbd: so in some part of the code hostapd should receive the beacons from other AP ?\n[17:23] &lt;nbd&gt; yes\n[17:25] &lt;G10h4ck&gt; so I need to keep digging into hostapd code and then come back with more questions :)\n\n\n\n\n[14:51] &lt;G10h4ck&gt; nbd It's me getting too old or it's hostapd/wpa_supplicant code utterly convoluted? digging into function calls one and up falling in the white rabbit hole every a couple of them...\n[14:53] &lt;dhewg&gt; it's not just you, been there yesterday\n[14:56] &lt;G10h4ck&gt; i feel less alone :p\n\n\n\n\n[11:41] &lt;G10h4ck&gt; Hi!\n[11:42] &lt;G10h4ck&gt; with device tree there is something wone can look at at runtime from userspace to explore the hardware? or it is available only at compile time ?\n[11:56] &lt;f00b4r0&gt; G10h4ck: /proc/device-tree\n[11:58] &lt;G10h4ck&gt; Great! thanks f00b4r0\n\n\n\n== Suggested reading\n\n\n\n\nhttps://wireless.wiki.kernel.org/en/users/Documentation/hostapd\n\n\nhttps://wireless.wiki.kernel.org/en/developers/documentation/glossary\n\n\n\n\n\n\n\n\nMakefile\n\n\n\n404: Not Found\n\n\n\n"}
,{
"location": "/packages/lime-debug.html",
"lang": "en",
"title": "lime-debug",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . | sed 's|-|.|g')\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME=lime-debug\nPKG_VERSION=$(GIT_COMMIT_DATE)~$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=libremesh debug utils\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+bandwidth-test \\\n\t\t+busybox +ethtool +iwinfo +iw +mtr +ip \\\n\t\t+iputils-ping \\\n\t\t+sprunge +safe-reboot +netperf +pv +tcpdump-mini +bwm-ng \\\n\t\t+lime-report +iperf3 +jq\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tDebug utilities for LibreMesh nodes\nendef\n\ndefine Package/$(PKG_NAME)/config\n\tselect BUSYBOX_CUSTOM\n\tselect BUSYBOX_CONFIG_NC\n\tselect BUSYBOX_CONFIG_NC_SERVER\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-docs.html",
"lang": "en",
"title": "lime-docs",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2017 Ilario Gelmetti\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . | sed 's|-|.|g' )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-docs\nPKG_VERSION=$(GIT_COMMIT_DATE)~$(GIT_COMMIT_TSTAMP)\n\nPKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)\nPKG_SOURCE_URL:=https://github.com/libremesh/libremesh.github.io/\nPKG_SOURCE_PROTO:=git\nPKG_SOURCE_VERSION:=HEAD\nPKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_VERSION)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=LibreMesh English documentation\n  DEPENDS:=+$(PKG_NAME)-minimal\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org/docs/\n  SUBMENU:=Offline Documentation\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)-it\n  CATEGORY:=LibreMesh\n  TITLE:=LibreMesh Italian documentation\n  DEPENDS:=+$(PKG_NAME)-minimal\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org/docs/\n  SUBMENU:=Offline Documentation\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)-minimal\n  CATEGORY:=LibreMesh\n  TITLE:=LibreMesh minimal documentation\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org/docs/\n  SUBMENU:=Offline Documentation\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\nOffline English documentation for LibreMesh firmware\nendef\n\ndefine Package/$(PKG_NAME)-it/description\nOffline Italian documentation for LibreMesh firmware\nendef\n\ndefine Package/$(PKG_NAME)-minimal/description\nMinimal offline English documentation for LibreMesh firmware containing\njust a commented example of the main config file.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/www/docs/\n\t$(INSTALL_DATA) $(PKG_BUILD_DIR)/docs/en_*.txt $(1)/www/docs/\n\t@ln -s /www/docs $(1)/docs\nendef\n\ndefine Package/$(PKG_NAME)-it/install\n\t$(INSTALL_DIR) $(1)/www/docs/\n\t$(INSTALL_DATA) $(PKG_BUILD_DIR)/docs/it_*.txt $(1)/www/docs/\n\t@ln -s /www/docs $(1)/docs\nendef\n\ndefine Package/$(PKG_NAME)-minimal/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\n\t@ln -s /www/docs $(1)/docs\nendef\n\n$(eval $(call BuildPackage,lime-docs))\n$(eval $(call BuildPackage,lime-docs-it))\n$(eval $(call BuildPackage,lime-docs-minimal))\n\n\n\n"}
,{
"location": "/packages/lime-eth-config.html",
"lang": "en",
"title": "lime-eth-config",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2025 Javier Jorge &lt;jjorge@inti.gob.ar&gt;\n# Copyright (c) 2025  Instituto Nacional de Tecnología Industrial\n# Copyright (C) 2025  Asociación Civil Altermundi &lt;info@altermundi.net&gt;\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Ethernet configuration for LibreMesh Lime-App\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Asociación Civil Altermundi &lt;info@altermundi.net&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+libubus-lua +lime-system +lua +luci-lib-jsonc\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tEthernet port configuration for LibreMesh Lime-App.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-hwd-ground-routing.html",
"lang": "en",
"title": "lime-hwd-ground-routing",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=Manage 802.1q VLANs for ground routing\n  CATEGORY:=LibreMesh\n  URL:=https://libremesh.org\n  DEPENDS:=+lime-system +lua +libuci-lua\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis package helps you to configure setups involving ground routing.\n\tWith ground routing we mean setups having LibreMesh on a router\n\twhich is connected via cable(s), eventually through a switch,\n\tto some wireless routers running the original firmware in WDS\n\t(transparent bridge) Ap/Sta mode. Configuring ground routing you\n\twill set up an interface with a different vlan or on a different\n\tswitch port for each connected device in WDS mode.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-hwd-openwrt-wan.html",
"lang": "en",
"title": "lime-hwd-openwrt-wan",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=Respect openwrt wan interface as default\n  CATEGORY:=LibreMesh\n  URL:=http://libremesh.org\n  DEPENDS:=+lime-system +lua +libuci-lua +lime-proto-wan\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-hwd-usbradio.html",
"lang": "en",
"title": "lime-hwd-usbradio",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=LiMe hardware detection usb radio support\n  CATEGORY:=LibreMesh\n  URL:=http://libremesh.org\n  DEPENDS:=+lime-system +lua +libuci-lua +luci-lib-nixio\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-hwd-watchcat.html",
"lang": "en",
"title": "lime-hwd-watchcat",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=Watchcat LibreMesh configurer\n  DEPENDS:=+lime-system +lua +watchcat\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\nIntegrates OpenWrt’s watchcat into LibreMesh as a hardware-detection\nmodule (HWD), reading ‘config hwd_watchcat’ from the LibreMesh UCI\nand generating the real /etc/config/watchcat entries.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-anygw.html",
"lang": "en",
"title": "lime-proto-anygw",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe anygw proto support\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+dnsmasq-dhcpv6 +kmod-nft-bridge +libuci-lua \\\n\t\t+lime-system +lua +kmod-macvlan \\\n\t\t+shared-state +shared-state-dnsmasq_leases \\\n\t\t+luci-lib-nixio +firewall4\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-babeld.html",
"lang": "en",
"title": "lime-proto-babeld",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe babeld proto support\n  DEPENDS:=+babeld +lime-system +luci-lib-nixio\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-batadv.html",
"lang": "en",
"title": "lime-proto-batadv",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe batman-adv proto support\n  DEPENDS:=+lime-system +lua +libuci-lua +kmod-batman-adv +luci-lib-nixio\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-bgp.html",
"lang": "en",
"title": "lime-proto-bgp",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=LiMe BGP proto support\n  CATEGORY:=LibreMesh\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@diveni.re&gt;\n  URL:=http://libremesh.org\n  DEPENDS:=+bird1-ipv4 +bird1-ipv6 +lime-system +lua +luci-lib-nixio\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-bmx7.html",
"lang": "en",
"title": "lime-proto-bmx7",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe Bmx7 proto support\n  DEPENDS:=+bmx7 +bmx7-json +bmx7-sms +bmx7-table +bmx7-uci-config +bmx7-tun \\\n           +lime-system +lua +libuci-lua +luci-lib-nixio +kmod-nft-bridge \\\n           +firewall4\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-olsr.html",
"lang": "en",
"title": "lime-proto-olsr",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe OLSR proto support (IPv4)\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=leonaard &lt;leone@inventati.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +libuci-lua +lime-system +olsrd +olsrd-mod-jsoninfo +kmod-ipip +luci-lib-ip \\\n\t\t +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-olsr2.html",
"lang": "en",
"title": "lime-proto-olsr2",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2016 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe OLSR2 proto support (IPv4/v6)\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gabriel &lt;gabriel@autistici.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +libuci-lua +lime-system +oonf-olsrd2 +luci-lib-ip \\\n\t\t +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-olsr6.html",
"lang": "en",
"title": "lime-proto-olsr6",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe OLSR proto support (IPv6)\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=leonaard &lt;leone@inventati.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +libuci-lua +lime-system +olsrd +olsrd-mod-jsoninfo +luci-lib-ip \\\n\t\t +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-wan.html",
"lang": "en",
"title": "lime-proto-wan",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe wan proto support\n  DEPENDS:=+firewall4 +lime-system +lua +libuci-lua\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-report.html",
"lang": "en",
"title": "lime-report",
"content": "\nMakefile\n\n\n\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LibreMesh status report utility\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n\tURL:=https://libremesh.org\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tOutputs a report about the status and the main configuration\n\tof a LibreMesh node, useful for debugging and issues reporting.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-smart-wifi.html",
"lang": "en",
"title": "lime-smart-wifi",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=Configure wifi mesh and ap hardware based\n  DEPENDS:=+lime-system\n  MAINTAINER:=Paul Spooren &lt;paul@spooren.de&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n\ndefine Package/$(PKG_NAME)/description\n\tAutomatically configure wifi mesh and ap based on existing radios\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-system.html",
"lang": "en",
"title": "lime-system",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . | sed 's|-|.|g' )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-system\nPKG_VERSION=$(GIT_COMMIT_DATE)~$(GIT_COMMIT_TSTAMP)\n\nLIME_ID:=LiMe\nLIME_RELEASE:=$(shell git branch | sed -n '/\\* /s///p')\nLIME_CODENAME:=development\nLIME_BRANCH:=$(shell git branch | sed -n '/\\* /s///p')\nLIME_REVISION:=$(shell git log -n 1 --pretty=%h)\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\nLIME_DESCRIPTION:=$(LIME_ID) $(LIME_RELEASE) $(LIME_CODENAME) ($(LIME_BRANCH) rev. $(LIME_REVISION) $(LIME_BUILDDATE))\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=LibreMesh system core\n  CATEGORY:=LibreMesh\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  URL:=http://libremesh.org\n  DEPENDS:=+firewall4 +libiwinfo-lua +lua +libuci-lua +luci-lib-ip +luci-lib-nixio +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tLibreMesh is a modular meta-firmare this package provide the core of it\n\twhich articulates all LiMe modules around it\nendef\n\ndefine Build/Compile\nendef\n\nLIME_VERSION_SED:=$(SED)   's,%LIME_ID%,$(LIME_ID),g' \\\n\t\t\t-e 's,%LIME_RELEASE%,$(LIME_RELEASE),g' \\\n\t\t\t-e 's,%LIME_CODENAME%,$(LIME_CODENAME),g' \\\n\t\t\t-e 's,%LIME_BRANCH%,$(LIME_BRANCH),g' \\\n\t\t\t-e 's,%LIME_REVISION%,$(LIME_REVISION),g' \\\n\t\t\t-e 's,%LIME_BUILDDATE%,$(LIME_BUILDDATE),g' \\\n\t\t\t-e 's,%LIME_DESCRIPTION%,$(LIME_DESCRIPTION),g'\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\n\t$(INSTALL_DIR) $(1)/etc/hotplug.d/lime-config/\n\t$(LIME_VERSION_SED) \\\n\t\t$(1)/etc/lime_release \\\n\t\t$(1)/etc/profile.d/10-lime-banner.sh\nendef\n\ndefine Package/$(PKG_NAME)/postinst\n#!/bin/sh\n#[ -n \"$${IPKG_INSTROOT}\" ] || /etc/init.d/firewall-lime enable || true\n# Add here stuff to be executed after installation at image creation time\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/miniserver-client.html",
"lang": "en",
"title": "miniserver-client",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) metapackage\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\n  DEPENDS:= \\\n            +prometheus-node-push-influx \\\n            +prometheus-node-exporter-lua \\\n            +prometheus-node-exporter-lua-openwrt \\\n            +prometheus-node-exporter-lua-wifi_stations \\\n            +prometheus-node-exporter-lua-wifi-stations-extra \\\n            +prometheus-node-exporter-lua-wifi-survey \\\n            +prometheus-node-exporter-lua-wifi-params \\\n            +prometheus-node-exporter-lua-location-latlon \\\n\nendef\n\ndefine Package/$(PKG_NAME)/description\n  This metapackage installs and configures a statistics collector system\n  that gathers data on the node and pushes to a local \"miniserver\"\n  reachable on the local network.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/pirania.html",
"lang": "en",
"title": "pirania",
"content": "\nReadme\n\n\n\n\n![PIRANHA](https://i.imgur.com/kHWUNOu.png)\n\n\n## Voucher and Captive Portal solution for community networks\n\n\nThis tool allows an administrator to manage a voucher system to get through the gateway.\n\n\nIt could be used in a community that wants to share an Internet connection and for that the user&#8217;s pay a fraction each, but needs the payment from everyone. So the vouchers allows to control the payments via the control of the access to Internet.\n\n\nAdditionally vouchers usage can be deactivated in order to use\nthe captive portal only to show valuable information for network\nvisitors.\n## Features\n\n\nThis are the currently implemented features:\n  * Runs directly from the OpenWRT/LEDE router: no need for extra hardware\n  * Integrates it&#8217;s administration with Ubus and LiMe App\n  * Has a command-line interface for listing, creating and removing vouchers\n  * Voucher database is shared among nodes in the network\n  * Portal \"splash\" screen content (logo, title, main text, etc)\n  is distributed accross the network.\n  * Can be used without vouchers.\n## Prerequisites\n\n\nThis software assumes that will be running on a OpenWRT/LEDE distribution (because uses uci for config). Needs nftables and ipset packages installed.\n\n\n## Install\n\n\n\n\nadd the libremesh software feed to opkg\n\n\nopkg install pirania\n\n\n\n\n## Command line\n\n\nepoc is expressed in [Unix Timestamp](https://en.wikipedia.org/wiki/Unix_time) format. You can use a tool like [unixtimestamp.com](https://www.unixtimestamp.com/) to get a date in the correct format.\n\n\n# captive_portal status\n\n\nPrints the status of pirania: enabled or disabled.\n\n\n# captive_portal start\n\n\nStarts pirania. If you want pirania to automatically turn on use: uci set pirania.base_config.enabled=1 &amp;&amp; uci commit\n\n\n# captive_portal stop\n\n\nStops pirania. If you want pirania to stop automatically turning on use: uci set pirania.base_config.enabled=0 &amp;&amp; uci commit\n\n\n## voucher list\n\n\nLists all the vouchers.\n\n\n# voucher list_active\n\n\nList all the vouchers that are currently active.\n\n\n# voucher add\n\n\nCreate a new voucher. This voucher will start deactivated and not bonded to any device.\n\n\nParams:\n- name: a name used to identify the voucher\n- duration-m: duration of the voucher in minutes. If no value is provided a permanent voucher will be created.\nThe duration takes affect when the voucher is activated.\n- activation-deadline: after this date (unix time) the voucher cannot be activated.\n\n\nTo create a 60 minutes voucher\nEx.: voucher add my-voucher-name 60\n\n\n# voucher activate\n\n\nActivates a voucher, asigning a mac address. After the activation, the device with this MAC\naddress will have internet access.\n\n\nParams:\n- secret-code: the password of the voucher.\n- mac: the MAC address of the device that will have access.\n\n\nEx: voucher activate mysecret 00:11:22:33:44:55\n\n\n# voucher deactivate\n\n\nDeactivate a voucher of the specified ID.\n\n\nParams:\n- ID: a string used to identify the voucher.\n\n\nEx: voucher deactivate Qzt3WF\n\n\n# voucher remove_voucher\n\n\nInvalidates a voucher by changing it&#8217;s expire date to 0.\n\n\nParams:\n- voucher: voucher secret\n\n\nEx.: voucher remove_voucher voucher-secret\n\n\n# voucher is_mac_authorized\n\n\nCheck if a specific mac address is authorized.\n\n\nParams:\n- mac: a device&#8217;s mac address\n\n\nEx.: voucher is_mac_authorized d0:82:7a:49:e2:37\n\n\n# voucher renew_voucher\n\n\nChange the expiration date of a voucher.\n\n\nParams:\n- id: the voucher ID.\n- expiration-date: the new date (unix time) that the voucher will expire\n\n\nEx.: voucher renew_voucher Qzt3WF 1619126965\n\n\n# How it works\n\n\nIt uses iptables rules to filter inbound connections outside the mesh network.\n\n\n## General overview of file hierarchy and function\n\n\n\nfiles/\n    /etc/config/pirania is the UCI config\n    /etc/pirania/vouchers/ (default path) contains the database of vouchers\n    /etc/init.d/pirania-uhttpd starts a uhttpd on port 59080 that replies any request with a redirect towards a preset URL\n\n    /usr/lib/lua/voucher/ contains lua libraries used by /usr/bin/voucher\n    /usr/bin/voucher is a CLI to manage the db (has functions list, list_active, show_authorized_macs, add, activate, deactivate and is_mac_authorized)\n    /usr/bin/captive-portal sets up iptables rules to capture traffic\n\n    /usr/libexec/rpcd/pirania ubus pirania API (this is used by the web frontend)\n    /usr/share/rpcd/acl.d/pirania.json ACL for the ubus pirania API\n\n    /etc/shared-state/publishers/shared-state-publish_vouchers inserts into shared-state the local voucher db\n    /etc/shared-state/hooks/pirania/generate_vouchers bring updated or new vouchers from the shared-state database into the local voucher db\n\n    /usr/lib/lua/read_for_access contains the library used by\n    /usr/lib/lua/portal to manage access  in read for access mode (aka without vouchers)\n\n\n\n## CLI usage example\n\n\n\n$ voucher list\n$ voucher add san-notebook 60\nQ3TJZS\tsan-notebook\tZRJUXN\txx:xx:xx:xx:xx:xx\tWed Sep  8 23:47:40 2021\t60\t           -            \t1\n$ voucher list\nQ3TJZS\tsan-notebook\tZRJUXN\txx:xx:xx:xx:xx:xx\tWed Sep  8 23:47:40 2021\t60\t           -            \t1\n$ voucher list_active\n$ voucher activate ZRJUXN 00:11:22:33:44:55\nVoucher activated!\n$ voucher list\nQ3TJZS\tsan-notebook\tZRJUXN\t00:11:22:33:44:55\tWed Sep  8 23:47:40 2021\t60\tThu Sep  9 00:48:33 2021\t2\n\n$ voucher list_active\nQ3TJZS\tsan-notebook\tZRJUXN\t00:11:22:33:44:55\tWed Sep  8 23:47:40 2021\t60\tThu Sep  9 00:48:33 2021\t2\n\n$ voucher deactivate Q3TJZS\nok\n$ voucher list_active\n$ voucher list\nQ3TJZS\tsan-notebook\tZRJUXN\txx:xx:xx:xx:xx:xx\tWed Sep  8 23:47:40 2021\t60\t           -            \t3\n\n\n\n## ubus API\n\n\n\n\nenable() &#8594; calls to captive-portal start and enables it in the config\n\n\ndisable() &#8594; calls to captive-portal stop and disables it in the config\n\n\nshow_url() &#8594; return config pirania.base_config.portal_url\n\n\nchange_url(url) &#8594; change config pirania.base_config.portal_url\n\n\n&#8230;&#8203;\n\n\n\n\n## Under the hood\n\n\n# Trafic capture\n/usr/bin/captive-portal sets up iptables rules to capture traffic.\nIt creates a set of rules that apply to 3 allowed \"ipsets\":\n* pirania-auth-macs: authorized macs go into this rule. starts empty.\n* pirania-allowlist-ipv4: with the members of the allowlist in the config file (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n* pirania-allowlist-ipv6: same as ipv4 but for ipv6\n\n\nRules:\n* DNS packets, that are not from the allowed ipsets, are redirected to our own captive portal DNS at 59053\n* HTTP packets, that are not from the allowed ipsets, are redirected to our own captive portal HTTP at 59080\n* packets from the allowed ipsets are allowed\n* the rest of the packets are rejeted (drop and send an error to the client)\n\n\n# HTTP flow\n\n\n/etc/init.d/pirania-uhttpd starts a HTTP server (uhttpd) on port 59080 that replies any request with a redirect towards a preset URL.\n - In case that voucher usage is activated: pirania.base_config.url_auth.\n - Otherwise: pirania.read_for_access.url_portal\nThis is performed by the lua script /www/pirania-redirect/redirect. As both url are in the allowlist ip range (http://thisnode.info/portal/ by default) then the \"normal\" HTTP server listening in port 80 will answer after the redirect.\n\n\nSo the flow when using vouchers is:\n* navigate to a non allowed ip: for example http://orignal.org/baz/?foo=bar\n* get redirected with a 302 where you can put a voucher code to enter: http://thisnode.info/cgi-bin/portal/auth.html?prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\n* submiting the form should perform a GET to http://thisnode.info/cgi-bin/pirania/preactivate_voucher?voucher=secretcode&amp;prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\n* The preactivate_voucher script does two different depending on javascript support:\n    * If nojs=true then the voucher is activated with the client MAC (taken from the ARP table with its IP) and the voucher code. If the activation succeeds it redirects to url_authenticated.\n    * If nojs=false there is a check if the voucher code would be valid (there is an unused and valid voucher with that code). If the voucher would be valid then a redirect to the portal INFO page(pirania.base_config.url_info) is performed with the voucher code as param url. The portal info shows the updated information of the community and there is a time that you have to wait to be able to continue (This is done with JS). When the timer reaches 0 you can click in continue. This redirects now to http://thisnode.info/cgi-bin/pirania/activate_voucher?voucher=secretcode. The activate_voucher script does the voucher activation. then it redirects to url_authenticated. If the code fails it will redirect to http://thisnode.info/cgi-bin/portal/fail.html that is identical to auth.html but with an error message.\n\n\nThe flow without using vouchers (read for access mode) is:\n* navigate to a non allowed ip: for example http://orignal.org/baz/?foo=bar\n* get redirected with a 302 to: http://thisnode.info/cgi-bin/portal/read_for_access.html?prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\n* Once there if the client has js support then a countdown of 15 seconds is shown and when it reaches 0 the user can click on continue, which sends a GET request to http://minodo.info/cgi-bin/pirania/authorize_mac?prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\nwhich will trigger a redirection to prev url.\n* If there the client has no js support, then the buttonis enabled inmediately, and after clicking in continue a redirection to url_authenticated is triggered.\n\n\n\n\n\n\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SUBMENU:=Captive Portals\n  SECTION:=net\n  CATEGORY:=Network\n  MAINTAINER:=Asociación Civil AlterMundi &lt;info@altermundi.net&gt;\n  TITLE:=Captive portal with vouchers.\n  DEPENDS:=+ip6tables-mod-nat +ipset +shared-state +shared-state-pirania \\\n\t+uhttpd-mod-lua +lime-system +luci-lib-jsonc \\\n\t+liblucihttp-lua +luci-lib-nixio +libubus-lua +libuci-lua\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tCaptive Portal for routers that want to share their Internet connection via vouchers.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-location-latlon.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-location-latlon",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (location_latlon collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +libuci-lua +iw +libubus-lua\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-wifi-params.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-wifi-params",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (wifi_params collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +libuci-lua +iw\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-wifi-stations-extra.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-wifi-stations-extra",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (wifi_stations_extra collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +libuci-lua +iw +libubus-lua\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-wifi-survey.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-wifi-survey",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (wifi_survey collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +iw +libubus-lua\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-push-influx.html",
"lang": "en",
"title": "prometheus-node-push-influx",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) pushes influx line protocol over TCP\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\n  DEPENDS:= +lua +libuci-lua +luasocket +libubus-lua\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Collects the same statistics as prometheus-node-exporter-lua,\n  but instead of exposing them as a server, with prometheus syntax,\n  pushes them using influx line protocol over TCP\n  to a remote VictoriaMetrics server.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/random-numgen.html",
"lang": "en",
"title": "random-numgen",
"content": "\nMakefile\n\n\n\n# This is free software, licensed under the GNU General Public License v3.\n# See /LICENSES for more information.\n#\n\ninclude ../../libremesh.mk\n\nPKG_VERSION:=0.0.1\nPKG_RELEASE:=1\n\nPKG_MAINTAINER:=Ilario Gelmetti &lt;ilario@sindominio.net&gt;\nPKG_LICENSE:=GPL-3.0-or-later\n\ndefine Package/random-numgen\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Generates a random number 0-65535\n  PKGARCH:=all\nendef\n\ndefine Package/random-numgen/description\n  Offers an alternative to the RANDOM shell variable,\n  generating a pseudo-random integer number from 0 to\n  65535 using /dev/urandom as a random data source.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/safe-reboot.html",
"lang": "en",
"title": "safe-reboot",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) falls back to a last-known-good config after an ill-fated reboot.\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  When you run $(PKG_NAME) specifying a grace time, it makes a backup of /etc at that point,\n  and after the grace time reboots the system. At the next boot, it waits again for a timeout;\n  if you can't login and delete the backup, it will restore it and reboot.\n  This mechanism makes it possible to run $(PKG_NAME), try risky operations (like restarting\n  the network), and if something goes wrong, just wait for the fallback timeout.\n  Even more, you can make actual changes to /etc config and reboot. If it comes back up right,\n  you can login and delete the backup. If something went wrong with the new /etc, just wait\n  for the revert timeout.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/safe-upgrade.html",
"lang": "en",
"title": "safe-upgrade",
"content": "\nReadme\n\n\n\n\n# safe-upgrade\n\n\nsafe-upgrade provides safe firmware upgrades using two partitions and a confirmation step. Only the\nLibreRouter is supported.\n\n\n## Usage\n\n\nTo perform an upgrade you have to:\n1. run safe-upgrade upgrade xxx-sysupgrade.bin to install a firmware to the non current (other) partition.\n2. reboot\n3. validate that the new firmware is good. If it is not good just reboot.\n4. safe-upgrade confirm before a defined period of time (the default is 10 minutes). If you don&#8217;t\nconfirm (or you can&#8217;t because the configuration is not good) in this period of time then\nan automatic reboot will be performed and the device will boot the last confirmed partition.\n\n\n# help\n\n\nrun safe-upgade --help to get the list of commands available. Use safe-upgrade CMD --help to\nget the help for the command CMD.\n\n\n# show\n\n\nsafe-upgrade show shows the current status of the system partitions.\n\n\n# upgrade\n\n\nsafe-upgrade upgrade [-n][--reboot-safety-timeout=600][--disable-reboot-safety] xxx-sysupgrade.bin\n\n\nsafe-upgrade upgrade performs the first step of the upgrade procedure.\nOptions\n* use -n or --do-not-preserve-config to not save the current configuration to the new partition.\n* use --disable-reboot-safety`to disable the automatic reboot safety mechanism.\n* use `--reboot-safety-timeout=600 to set the timeout in seconds of the automatic reboot safety mechanism.\n\n\nAfter running this command to test the new image you have to restart the device.\n\n\n# confirm\n\n\nsafe-upgrade confirm confirms the current partition as the new default partition. Use after booting\ninto a new partition after running safe-upgrade upgrade or safe-upgrade test-other-partition.\n\n\n# bootstrap (advanced)\n\n\nUse safe-upgrade bootstrap to install the safe-upgrade mechanism in the bootloader. Run this only\nif safe-upgrade exits with 'safe-upgrade is not installed, aborting.'\n\n\n## How safe-upgrade works\n\n\nsafe-upgrade works installing the following script into the bootloader (in pseudo-code):\n\n\n\nif testing_partition != None:\n    boot_partition = testing_partition\n    testing_partition = None # a testing partition will boot just once\nelse:\n    boot_partition = stable_partition\n\nboot(boot_partition)\n\n\n\nstable_partition allowed values are 1 or 2. testing_partition allowed values are None, 1 or 2, with\nNone as starting value.\n\n\nLets suppose an initial state of stable_partiton = 1 and testing_partition = None.\nIn this configuration the bootloader always boots the partition 1.\nWhen safe-upgade upgrade is performed the testing_partition value changes to the other partition, the non stable\npartition, in this case it will be the partition 2. When the device is rebooted the bootloader script will\nset the testing_partition to None again but will boot the partition 2. If this partition is confirmed\nthen the stable_partition will change from 1 to 2.\nSo safe-upgrade works having always a stable partition value of a good partition with a temporary\nstate (testing_partition != None) that only lasts for one boot.\n\n\nThe bootloader script and the variables stable_partition and testing_partition are stored in the flash\nu-boot environment.\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides safe firmware upgrades using two partitions.\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+lua-argparse +luci-lib-jsonc +lime-system\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\t$(PKG_NAME) provides safe firmware upgrades using two partitions and a\n\tconfirmation step. See $(PKG_NAME)/Readme.md for more details.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/shared-state-async.html",
"lang": "en",
"title": "shared-state-async",
"content": "== Readme\n____\n= LibreMesh: Shared State Overview\n:toc:\n:toclevels: 3\n\n== Introduction\n\nLibreMesh is an open-source framework designed to facilitate the creation of community mesh networks. A key component of this framework is the **Shared State**, a Conflict-Free Replicated Data Type (CRDT) daemon. This module enables seamless information exchange between nodes in a decentralized network, ensuring consistency and reliability.\n\nThe official repository is: https://github.com/LibreMesh/shared-state-async.\n\nFeatures:\n\n- **Conflict-Free Synchronization**: Shared State ensures data consistency across nodes without requiring a central authority or lock mechanism.\n- **Decentralized Communication**: Nodes exchange data directly, allowing the network to function even in the absence of a central controller.\n- **Flexible Data Types**: Supports various data types, including Wi-Fi link information, node details, and more.\n\n== Available Commands\n\nShared State provides several commands to interact with and manage data types. Below is an overview of the most commonly used commands for getting and managing data.\n\n--------------------------------------------------------------------------------\nshared-state-async\nUsage: shared-state-async OPERATION [ARGUMENTS]\nSupported operations: discover, dump, get, insert, peer, register, sync\n--------------------------------------------------------------------------------\n\n\n\n**Get**  \n\nIn LibreMesh, shared-state is already included and running so you can run this command. This command allows you to retrieve the current state of a specific data type.\n\n   shared-state-async get \n\nExample:\n\n--------------------------------------------------------------------------------\nshared-state-async get net-stats\n--------------------------------------------------------------------------------\n\n**Insert**\n\nThis command is used to insert data into Shared State. You can specify the data type and the information you want to insert using std input.\n\n    echo '{}' | shared-state-async insert \n\nExample:\n\n--------------------------------------------------------------------------------\necho '{\"cheche\":{\"src_loc\":{\"long\":\"-64.4228178\",\"lat\":\"-31.8019512\"},\"links\":{\"ae40411f73a8c64a00fc3abe\":{\"freq\":2462,\"iface\":\"wlan0-mesh\",\"tx_rate\":144400,\"dst_mac\":\"c6:4a:00:fc:3a:be\",\"channel\":11,\"chains\":[-40,-35],\"signal\":-34,\"rx_rate\":144400,\"src_mac\":\"ae:40:41:1f:73:a8\"}}}}'| shared-state-async insert wifi_links_info_ref\n--------------------------------------------------------------------------------\n\n**Dump**\n\nIs like get but with extended shared state debug info of a datatype. It will report \"Author\"             and \"Ttl\"\n\n    shared-state-async dump \n\nExample:\n\n--------------------------------------------------------------------------------\nshared-state-async get bat-hosts\n{\n...\n    \"ae:40:41:22:55:78\": \"estela_y_julio_wlan1_mesh_17\",\n    \"ae:40:41:22:55:7b\": \"estela_y_julio_wlan2_mesh\"\n}\n\n\nshared-state-async dump bat-hosts\n\n...\n\n    {\n        \"key\": \"ae:40:41:22:55:78\",\n        \"value\": {\n            \"mAuthor\": \"estela-y-julio\",\n            \"mTtl\": {\n                \"xint64\": 1422,\n                \"xstr64\": \"1422\"\n            },\n            \"mData\": \"estela_y_julio_wlan1_mesh_17\"\n        }\n    },\n    {\n        \"key\": \"ae:40:41:22:55:7b\",\n        \"value\": {\n            \"mAuthor\": \"estela-y-julio\",\n            \"mTtl\": {\n                \"xint64\": 1422,\n                \"xstr64\": \"1422\"\n            },\n            \"mData\": \"estela_y_julio_wlan2_mesh\"\n        }\n    }\n...\n\n--------------------------------------------------------------------------------\n\n**sync**\n\nThis is used to force synchronization between nodes. It will try to sync with neighbors but you can also specify a specific host to try to sync to.\nIn order to get the most accurate and fresh info from a node you must force the publisher of the data type to be executed and then sync your info with that node.   \n\nExample:\n\n--------------------------------------------------------------------------------\n\n    shared-state-async sync bat-hots 8.8.8.8\n\n--------------------------------------------------------------------------------\n\n\n**peer**\n\nShared state is basically only one binary that has to be called first with the \"peer\" argument in order to lunch the daemon. Then the same binary can be used as a tool to interact with the daemon.\n\n    shared-state-async peer\n\n\n**discover**  \n\nDiscover the nodes able to parte in the Shared State network.\n\n\n   shared-state-async discover\n\n\n**register**\n\nRegister a new data type or node in the Shared State system.\n\n\n    shared-state-async register DATA-TYPE TYPE-SCOPE UPDATE-INTERVAL BLEACH-TTL\n\n\n\n== Ubus Wrapper\n\nShared State also supports using ubus for remote procedure calls (RPC) to interact with the system. Get method returns shared-state \"get\" json data or reported error in case no json is found. Errors are bubbled up as they come from shared-state inside a json structure with the name \"error\".\n\nAvailable commands are:\n\n[source,json]\n----\n{ \n    \"sync\": { \"data_type\": \"str\", \"peers_ip\": \"str\" }, \n    \"get\": { \"data_type\": \"str\" },  \n    \"publish\": { \"data_type\": \"str\" },\n    \"publish_all\": { },\n    \"insert\": { \"data_type\": \"str\", \"json\": \"str\" } \n}\n----\n\n=== Get \n\nGet bat-hosts\n\n--------------------------------------------------------------------------------\n\n# ubus -S call shared-state-async get \"{'data_type': 'bat-hosts'}\"\n\n{\"a8:40:41:1f:73:ab\":\"lrsegundo_eth1_2\",\"02:95:39:1f:73:aa\":\"lrsegundo_eth0_250\",\"a8:40:41:1c:85:c3\":\"lrsegundo_wlan2_mesh\",\"a8:40:41:1c:85:16\":\"lrsegundo_wlan1_mesh\",\"02:bb:ed:1f:73:aa\":\"lrsegundo_eth1_250\",\"a8:40:41:1f:73:a8\":\"lrsegundo_wlan0_ap\",\"aa:40:41:1f:73:a8\":\"lrsegundo_wlan0_apname\",\"02:db:d6:1f:73:aa\":\"lrsegundo_eth0_1_250\",\"02:29:0f:1f:73:aa\":\"lrsegundo_eth1_2_250\",\"c2:10:20:5e:7f:b3\":\"lrsegundo_bat0\",\"a8:40:41:1f:73:aa\":\"lrsegundo_eth0\"}\n\n--------------------------------------------------------------------------------\n\nGet an invalid data type\n\n--------------------------------------------------------------------------------\n\n# ubus -S call shared-state-async get \"{'data_type': 'bat-hosss'}\"\n\n{\"error\":53248}\n\n--------------------------------------------------------------------------------\n\n=== Sync \nSync valid data type\n\n--------------------------------------------------------------------------------\n\n# ubus -S call shared-state-async sync \"{'data_type': 'bat-hosts'}\"\n\n{\"error\":0}\n\n--------------------------------------------------------------------------------\n\nSync invalid data type\n\n--------------------------------------------------------------------------------\n\nubus -S call shared-state-async sync \"{'data_type': 'bat-hoss' }\"\n\n{\"error\":53248}\n\n--------------------------------------------------------------------------------\n\nSync valid data type with unreachable ipv4 addresses\n\n--------------------------------------------------------------------------------\n\n# ubus -S call shared-state-async sync \"{'data_type': 'bat-hosts' ,'peers_ip':['10.0.0.1','10.0.0.2']}'\"\n\n{\"error\":32768}\n\n--------------------------------------------------------------------------------\n\nSync valid data type with invalid ipv4 address\n\n--------------------------------------------------------------------------------\n\n# ubus -S call shared-state-async sync \"{'data_type': 'bat-hosts' ,'peers_ip':['10.0.0.1','10.0.2']}'\"\n\n{\"error\":61952}\n\n--------------------------------------------------------------------------------\n\nSync invalid data type with specified ipv4 address\n\n--------------------------------------------------------------------------------\n\nubus -S call shared-state-async sync \"{'data_type': 'bat-hosts' ,'peers_ip':['127.0.0.1','127.0.0.1']}'\"\n\n{\"error\":53248}\n\n--------------------------------------------------------------------------------\n\nSync valid data type with reachable ipv4 addresses\n\n--------------------------------------------------------------------------------\n\n# ubus -S call shared-state-async sync \"{'data_type': 'bat-hosts' ,'peers_ip':['127.0.0.1','127.0.0.1']}'\"\n\n{\"error\":0}\n\n--------------------------------------------------------------------------------\n\n== Data types\nEach data type in Shared State consists of at least two key components:\n\n1. **Definition**: Specifies the structure and properties of the data type.\n2. **Publisher**: Responsible for generating and updating the data.\n3. **Hook(optional)**: optionally a data type can implement a third component that is a hook. These executes custom actions when the data type is updated or accessed.\n\nall data types are in a separate package in LibreMesh and are named \"shared-state-**dataType**\". A good example of a package is https://github.com/LibreMesh/lime-packages/tree/08784318f4e9fd4269675bd9dbc8ebf6962ce5da/packages/shared-state-bat_hosts[bat-hosts]\n\n=== Available data types \n\nShared State uses data types to support various functions. Each data types is responsible for handling a specific information, ensuring seamless integration and management of that data within the mesh network.\n\nThe some of the currently supported data types include:\n\n- **bat-hosts**: Handles information about hosts in the network and helps resolving node's domain name.\n\n- **wifi_links_info**: Handles information about Wi-Fi link status and metrics.\n\n- **node_info**: Manages metadata about individual nodes.\n\n- **babel_links_info**: babel routing protocol-specific link data.\n\n- **bat_links_info**: Manages link information for BATMAN-adv networks.\n\n- **Reference State**: One application of Shared State is maintaining a reference state for troubleshooting, diagnostics, and disaster recovery in mesh networks. Refer to the detailed documentation in https://github.com/LibreMesh/lime-packages/blob/08784318f4e9fd4269675bd9dbc8ebf6962ce5da/packages/shared-state-ref_state_commons/README.md[README.md] for more on Reference State.\n\n=== Data types registration\n\nTo add support for a new data type, you can develop a custom new data type tailored to your requirements. Data types must be registered into shared-state-async by using a config file. UCI infrastructure is preferred and here is a sample\n\n[source,bash]\n--------------------------------------------------------------------------------\nmSc=\"plugin_name\"\n\nuci set shared-state.${mSc}=dataType\nuci set shared-state.${mSc}.name='data_type_name'\nuci set shared-state.${mSc}.scope='community'\nuci set shared-state.${mSc}.ttl='1200'\nuci set shared-state.${mSc}.update_interval='120'\nuci commit shared-state\n--------------------------------------------------------------------------------\n\n'name' and 'ttl' are the most important attributes.'name' is the name of the data type and 'ttl' parameter stands for \"time to live\" and will decrease every second until 0.\n\n=== Datatype publishers\n\nIn Shared State, **publishers** are responsible for producing and updating data. Each publisher acts as a source for specific data types, feeding information into the system that is then distributed and replicated across the network.\n\nPublishers must be located at +/usr/share/shared-state/publishers+ \nAll Publishers will be called periodically using shared-state-async-publish-all, this can also be invoked manually.\n\nSync is called automatically by shared-state daemon every 15s\n\"ttl\" parameter stands for \"time to live\" and will decrease every second until 0.\nData contents will be erased if \"ttl\" reaches 0. So calling publishers has to be done periodically before that happens.\n\n=== Datatype hooks \n\n**Datatype hooks** allow custom behavior to be triggered when specific data types are updated or accessed. These hooks enable developers to extend the functionality of Shared State by defining actions that respond to changes in the data.\n\nExamples of hooks in action can be found in the `shared-state-mesh-upgrade` package. This package demonstrates how hooks can be utilized to enhance mesh network functionalities.\n\n=== Adding Hooks\n\nHooks can be added by defining callback script tied to specific data types. \n\nhooks scripts must be placed in /usr/share/shared-state/hooks/dataType folder and must read std input as \n\n[source,lua]\n--------------------------------------------------------------------------------\nlocal indata = io.stdin:read(\"*all\")\nutils.printJson(JSON.parse(indata))\n--------------------------------------------------------------------------------\n\n\n== Debugging \nBy default shared state async is already installed in LibreMesh, but if you want to debug you can compile the binary with debug flag enabled.\nFirst you must have a clone of openWRT with LibreMesh feeds installed. Please refer to LibreMesh docs to achieve this.\n\n.Build with debugging enabled\n--------------------------------------------------------------------------------\nmake package/feeds/libremesh/shared-state-async/clean package/feeds/libremesh/shared-state-async/compile -j$(nproc) CONFIG_DEBUG=y\n--------------------------------------------------------------------------------\n\n.Copy on verde e blu\n--------------------------------------------------------------------------------\nscp -O bin/packages/mips_24kc/libremesh/shared-state-async_*.ipk root@[fe80::ea94:f6ff:fe68:3364%usbe1]:/tmp/\nscp -O bin/packages/mips_24kc/libremesh/shared-state-async_*.ipk root@[fe80::6670:2ff:fede:c51e%usbe1]:/tmp/\n--------------------------------------------------------------------------------\n\n.Install\n--------------------------------------------------------------------------------\nopkg install --force-reinstall /tmp/shared-state-async_*.ipk\n--------------------------------------------------------------------------------\n\n.Run with gdb\n--------------------------------------------------------------------------------\ngdbserver :9000 shared-state-async\n--------------------------------------------------------------------------------\n\n.Attach with remote OpenWrt gdb\n--------------------------------------------------------------------------------\nscripts/remote-gdb [fe80::ea94:f6ff:fe68:3364%usbe0]:9000 ./build_dir/target-mips_24kc_musl/shared-state-async-*/shared-state-async\n\nscripts/remote-gdb [fe80::6670:2ff:fede:c51e%usbe0]:9000 ./build_dir/target-mips_24kc_musl/shared-state-async-*/shared-state-async\nbreak shared-state-async.cc:55\nrun listen\nrun sync bat-hosts fe80::ea94:f6ff:fe68:3364%br-lan\nrun sync bat-hosts fe80::d237:45ff:fefc:3cdd%br-lan\n--------------------------------------------------------------------------------\n\n.Stressing the server\n--------------------------------------------------------------------------------\nwhile Builds/build-lime-shared-state-async-node-Desktop-Debug/shared-state-async sync bat-hosts fe80::ea94:f6ff:fe68:3364%usbeth0; do echo ------------------------------------------------------------------- ;done\n\nwhile shared-state-async sync bat-hosts fe80::ea94:f6ff:fe68:3364%br-lan; do echo ------------------------------------------------------------------- ;done\n\n--------------------------------------------------------------------------------\n=== Interesting Readings\n\nhttps://openwrt.org/docs/guide-developer/gdb\n\nVoCore2: Develop for OpenWrt on Qt Creator\nhttps://vonger.cn/?p=14657\n\n== Contributing\n\nWe welcome contributions to improve Shared State and its applications. Feel free to open issues or submit pull requests on the [GitHub repository](https://github.com/LibreMesh/lime-packages) \n____\n\n== Makefile\n[,make]\n----\n# Shared State\n#\n# Copyright (C) 2023-2024  Gioacchino Mazzurco \n# Copyright (c) 2023  Javier Jorge \n# Copyright (c) 2023  Instituto Nacional de Tecnología Industrial\n# Copyright (C) 2023-2024  Asociación Civil Altermundi \n#\n# This program is free software: you can redistribute it and/or modify it under\n# the terms of the GNU Affero General Public License as published by the\n# Free Software Foundation, version 3.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE.\n# See the GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see \n#\n# SPDX-License-Identifier: AGPL-3.0-only\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=shared-state-async\n\nPKG_SOURCE_PROTO:=git\nPKG_SOURCE_URL:=https://github.com/libremesh/shared-state-async.git\nPKG_SOURCE_DATE:=2024-05-13\nPKG_SOURCE_VERSION:=db58e3d16e8658417956f9bb42e7e87f6aadcd4d\nPKG_MAINTAINER:=Asociación Civil Altermundi \nPKG_LICENSE:=AGPL-3.0\n\n# tar.xz or tar.zst\nPKG_XZ=$(shell top=\"$(TOPDIR)\" && grep -q openwrt-23.05 $${top}/feeds.conf.default && echo true)\nifeq ($(PKG_XZ),true)\nPKG_MIRROR_HASH:=35884a57e26058c6534b25c50b9aef14df81da501be1d153a9bb7923a47154dd\nelse\nPKG_MIRROR_HASH:=649c977e5d32fe232c8d0cb617ec04c6e4bd767dfac40ebcdb1630ab990fcd8f\nendif\n\nGIT_COMMIT_DATE:=$(shell psd=\"$(PKG_SOURCE_DATE)\" && echo $${psd} | sed 's|-|.|g' )\nGIT_COMMIT_SHORTHASH:=$(shell psv=\"$(PKG_SOURCE_VERSION)\" && echo $${psv:0:7} )\nPKG_VERSION:=$(GIT_COMMIT_DATE)~$(GIT_COMMIT_SHORTHASH)\nPKG_RELEASE:=1\n\nHOST_BUILD_PREFIX:=$(STAGING_DIR_HOST)\n\ninclude $(INCLUDE_DIR)/package.mk\ninclude $(INCLUDE_DIR)/cmake.mk\ninclude $(INCLUDE_DIR)/host-build.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=shared-state C++ async re-implementation\n\tCATEGORY:=LibreMesh\n\t# TODO: Statically linking libstdcpp instead of depending on it and then\n\t# stripping unused symbols might reduce space usage, until this is the\n\t# only package to use it\n\tDEPENDS:=+libstdcpp\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tshared-state re-written in C++20 and corotuines to handle information exchange between network nodes more efficiently.\nendef\n\n# Otherwise OpenWrt's CPPFLAGS are ignored\nTARGET_CFLAGS += $(TARGET_CPPFLAGS)\n\nCMAKE_OPTIONS += -DCMAKE_VERBOSE_MAKEFILE=ON\n\n# Disable Cpptrace as it depends on zlib and doesn't seems to work anyway on\n# OpenWrt even with CONFIG_DEBUG=y it prints out\n# Stack trace (most recent call first):\n# #0 0x00000000\n# #1 0x00000000\n# #2 0x00000000\nCMAKE_OPTIONS += -DSS_CPPTRACE_STACKTRACE=OFF\n\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/usr/bin\n\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/shared-state-async $(1)/usr/bin/\n\t$(CP) ./files/* $(1)/\n\n\t# TODO: Remove this line once discovery is reimplemented in C++\n\t$(CP) ../shared-state/files/usr/bin/shared-state-get_candidates_neigh $(1)/usr/bin/shared-state-async-discover\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-babel_links_info.html",
"lang": "en",
"title": "shared-state-babel_links_info",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (c) 2023  Javier Jorge \n# Copyright (c) 2023  Instituto Nacional de Tecnología Industrial\n# Copyright (C) 2023  Asociación Civil Altermundi \n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tCATEGORY:=LibreMesh\n\tTITLE:=Babel links module for shared-state\n\tMAINTAINER:=Asociación Civil Altermundi \n\tDEPENDS:=+lua +luci-lib-jsonc +ubus-lime-utils \\\n\t\t+libubus-lua +shared-state-ref_state_commons shared-state-async   \n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSynchronize Babel links information beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-babeld_hosts.html",
"lang": "en",
"title": "shared-state-babeld_hosts",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=babeld-hosts module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+hotplug-initd-services \\\n\t\t+lua +luci-lib-jsonc shared-state\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tMaintain a shared babel_id-hostname translation table, provides also\n\tbab2host and host2bab commands.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-bat_hosts.html",
"lang": "en",
"title": "shared-state-bat_hosts",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019-2024 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=bat-hosts module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Asociación Civil Altermundi \n\tURL:=http://libremesh.org\n\tDEPENDS:=+libubus-lua +lime-system +lua +luci-lib-jsonc +luci-lib-nixio \\\n\t         +shared-state-async\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize bat-hosts beween nodes, provides also mac2bat and bat2mac.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-bat_links_info.html",
"lang": "en",
"title": "shared-state-bat_links_info",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2023 Javier Jorge \n# Copyright (c) 2023  Instituto Nacional de Tecnología Industrial\n# Copyright (C) 2023  Asociación Civil Altermundi \n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tSECTION:=lime\n\tCATEGORY:=LibreMesh\n\tTITLE:=Batman protocol links information module for shared-state\n\tMAINTAINER:= Javier \n\tDEPENDS:=+lua +luci-lib-jsonc +ubus-lime-utils \\\n\t\t+lime-system +batctl-default +shared-state-ref_state_commons shared-state-async   \n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize batman protocol links information beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-dnsmasq_hosts.html",
"lang": "en",
"title": "shared-state-dnsmasq_hosts",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=dnsmasq hosts module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc \\\n\t\tshared-state\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize dnsmasq hosts beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-dnsmasq_leases.html",
"lang": "en",
"title": "shared-state-dnsmasq_leases",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=dnsmasq leases module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+libuci-lua +lua \\\n\t\t+luci-lib-jsonc shared-state +shared-state-dnsmasq_hosts \\\n\t\t+luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize dnsmasq leases beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-dnsmasq_servers.html",
"lang": "en",
"title": "shared-state-dnsmasq_servers",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2020 Gui iribarren \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Mesh DNS module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gui iribarren \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc \\\n\t\tshared-state\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tGenerates 'server' lines in dnsmasq config, so that domain zones published\n\tby other nodes in the mesh can be resolved transparently.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-network_nodes.html",
"lang": "en",
"title": "shared-state-network_nodes",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2020-2023 Asociacion Civil Altermundi \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=$(PKG_NAME) provides data-type for network nodes marked as reliable by user\n  MAINTAINER:=Asociacion Civil Altermundi \n  DEPENDS:=+shared-state +shared-state-nodes_and_links +lime-system +luci-lib-jsonc \\\n\t   +libubus-lua\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tProvides data-type for network nodes marked as reliable by user via lime-app\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-node_info.html",
"lang": "en",
"title": "shared-state-node_info",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2023 Javier Jorge \n# Copyright (C) 2023  Asociación Civil Altermundi \n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tSECTION:=lime\n\tCATEGORY:=LibreMesh\n\tTITLE:=Node information module for shared-state\n\tMAINTAINER:= Javier \n\tDEPENDS:=+lua +luci-lib-jsonc +ubus-lime-utils \\\n\t\t+lime-system +ubus-lime-location +shared-state-ref_state_commons shared-state-async   \n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize node information beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-nodes_and_links.html",
"lang": "en",
"title": "shared-state-nodes_and_links",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=nodes_and_links module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Nicolas Pace \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc \\\n\t\tshared-state +ubus-lime-location\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize nodes_and_links beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-persist.html",
"lang": "en",
"title": "shared-state-persist",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Marcos Gutierrez \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Persists shared-state in usb devices\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Marcos Gutierrez \n\tURL:=http://libremesh.org\n\tDEPENDS:=+block-mount +kmod-usb-storage +kmod-fs-vfat\\\n\t\tshared-state +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tDetects block-mount storage devices and configures shared-state so that status persists on those devices.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-pirania.html",
"lang": "en",
"title": "shared-state-pirania",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Marcos Gutierrez \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Pirania vaucher module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Asociación Civil AlterMundi \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc shared-state\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize valid pirania vauchers beween nodes\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-ref_state_commons.html",
"lang": "en",
"title": "shared-state-ref_state_commons",
"content": "== Readme\n____\n# Reference State\n\nShared-state has modules with information about the node, each\ninformation data type like wifi_links_info may have a reference type called\nwifi_links_info_ref.\n\nReference state is designed to contain information about the node that will\npersist and that is not changed to often. This is because it is stored in the\ndevice persistent memory and to many consequent write operations may damage the persistent memory. \n\nOne thing that is important to note is that no node stores the whole status of\nthe network. Every node stores his own information about him and his links. \nYo can see the information of the whole network as long as every node makes its\npart. \n\n## Possible use cases\nThe reference state has many implications and possible uses :\n\n* Troubleshooting and Diagnostics:\nThe reference state provides a baseline for the network's expected\nbehavior and performance. By comparing the current state of the network\nto the reference state, you can identify and diagnose issues more\neffectively.\nThis information can help pinpoint the source of problems, such as\nconnectivity issues, performance degradation, or configuration changes\nthat have caused the network to deviate from its expected state.\n\t\t\n* Disaster Recovery:\nThe reference state can be used as a starting point for restoring the network in\nthe event of a disaster or system failure. By having reference state, you can\nmore quickly and accurately rebuild the network to its known, functional state.\nThis can help minimize downtime and ensure a faster recovery. \n\n* Define a list of nodes that have certain privileges: \nSetting a list of nodes as the reference state may enable bandwidth allocation\npolicies or enable certain type of traffic between the nodes that are in the list\nof nodes from the reference state.\n\n## Usage \nFor example lets say that you have just configured your mesh network and\neverything works as expected.You may want to keep all the information about\nthe network and define the \"perfect\" status, because this information may be useful\nto detect deviations from the perfect status and easily identify and fix the\nproblem. \n\nYou can get the information about the wifi links using this command \n\n```bash\nshared-state-async get wifi_links_info\n``` \nor using the rpcd ubus wraper \n\n```bash\nubus -S call shared-state-async get  '{\"data_type\":  \"wifi_links_info\" }' \n\n```\nThe output of this command obtained from a node called cheche is shown below ...\nas you can see this command has information about all the nodes in the network.\n\n```JSON\n{\"data\":{\"cheche\":{\"src_loc\":{\"long\":\"-64.4228178\",\"lat\":\"-31.8019512\"},\"links\":{\"ae40411f73a8c64a00fc3abe\":{\"freq\":2462,\"iface\":\"wlan0-mesh\",\"tx_rate\":144400,\"dst_mac\":\"c6:4a:00:fc:3a:be\",\"channel\":11,\"chains\":[-40,-35],\"signal\":-34,\"rx_rate\":144400,\"src_mac\":\"ae:40:41:1f:73:a8\"},\"ae40411c85c3ae40411df934\":{\"freq\":5785,\"iface\":\"wlan2-mesh\",\"tx_rate\":300000,\"dst_mac\":\"ae:40:41:1d:f9:34\",\"dst_loc\":{\"long\":\"-64.42868\",\"lat\":\"-31.71538\"},\"channel\":157,\"chains\":[-37,-39],\"signal\":-35,\"rx_rate\":270000,\"src_mac\":\"ae:40:41:1c:85:c3\"},\"ae40411c8516ae40411df935\":{\"freq\":5240,\"iface\":\"wlan1-mesh\",\"tx_rate\":240000,\"dst_mac\":\"ae:40:41:1d:f9:35\",\"dst_loc\":{\"long\":\"-64.42868\",\"lat\":\"-31.71538\"},\"channel\":48,\"chains\":[-65,-64],\"signal\":-61,\"rx_rate\":162000,\"src_mac\":\"ae:40:41:1c:85:16\"},\"ae40411c8516c64a00fc3abf\":{\"freq\":5240,\"iface\":\"wlan1-mesh\",\"tx_rate\":104000,\"dst_mac\":\"c6:4a:00:fc:3a:bf\",\"channel\":48,\"chains\":[-77,-82],\"signal\":-74,\"rx_rate\":60000,\"src_mac\":\"ae:40:41:1c:85:16\"}}},\"graciela\":{\"src_loc\":{\"long\":\"-64.42868\",\"lat\":\"-31.71538\"},\"links\":{\"ae40411c85c3ae40411df934\":{\"freq\":5785,\"iface\":\"wlan2-mesh\",\"tx_rate\":270000,\"dst_mac\":\"ae:40:41:1c:85:c3\",\"dst_loc\":{\"long\":\"-64.4228178\",\"lat\":\"-31.8019512\"},\"channel\":157,\"chains\":[-49,-32],\"signal\":-32,\"rx_rate\":300000,\"src_mac\":\"ae:40:41:1d:f9:34\"},\"ae40411df935c64a00fc3abf\":{\"freq\":5240,\"iface\":\"wlan1-mesh\",\"tx_rate\":300000,\"dst_mac\":\"c6:4a:00:fc:3a:bf\",\"channel\":48,\"chains\":[-64,-61],\"signal\":-59,\"rx_rate\":162000,\"src_mac\":\"ae:40:41:1d:f9:35\"},\"ae40411c8516ae40411df935\":{\"freq\":5240,\"iface\":\"wlan1-mesh\",\"tx_rate\":216000,\"dst_mac\":\"ae:40:41:1c:85:16\",\"dst_loc\":{\"long\":\"-64.4228178\",\"lat\":\"-31.8019512\"},\"channel\":48,\"chains\":[-64,-59],\"signal\":-58,\"rx_rate\":243000,\"src_mac\":\"ae:40:41:1d:f9:35\"}}},\"tito\":{\"ae40411f73a8c64a00fc3abe\":{\"freq\":2462,\"iface\":\"wlan0-mesh\",\"tx_rate\":144400,\"dst_mac\":\"ae:40:41:1f:73:a8\",\"channel\":11,\"chains\":[-33,-34],\"signal\":-30,\"rx_rate\":144400,\"src_mac\":\"c6:4a:00:fc:3a:be\"},\"ae40411c8516c64a00fc3abf\":{\"freq\":5240,\"iface\":\"wlan1-mesh\",\"tx_rate\":60000,\"dst_mac\":\"ae:40:41:1c:85:16\",\"channel\":48,\"chains\":[-69,-64],\"signal\":-63,\"rx_rate\":104000,\"src_mac\":\"c6:4a:00:fc:3a:bf\"},\"ae40411df935c64a00fc3abf\":{\"freq\":5240,\"iface\":\"wlan1-mesh\",\"tx_rate\":240000,\"dst_mac\":\"ae:40:41:1d:f9:35\",\"channel\":48,\"chains\":[-46,-53],\"signal\":-45,\"rx_rate\":300000,\"src_mac\":\"c6:4a:00:fc:3a:bf\"}}},\"error\":0} \n```\n\nIf this information about cheche or part of it is relevant you may want to use\nit as the reference state. This will stablish a \"permanent\" or \"stable\" \nwifi_links_info called wifi_links_info_ref\n\n\nTo insert a reference state just put the json part related to this node into\nshared state async.\n\n```bash\necho '{\"cheche\":{\"src_loc\":{\"long\":\"-64.4228178\",\"lat\":\"-31.8019512\"},\"links\":{\"ae40411f73a8c64a00fc3abe\":{\"freq\":2462,\"iface\":\"wlan0-mesh\",\"tx_rate\":144400,\"dst_mac\":\"c6:4a:00:fc:3a:be\",\"channel\":11,\"chains\":[-40,-35],\"signal\":-34,\"rx_rate\":144400,\"src_mac\":\"ae:40:41:1f:73:a8\"}}}}'| shared-state-async insert wifi_links_info_ref\n```\nafter this you can always view this node reference state in a json file located\nin /etc/shared-state/ref_state/wifi_links_info_ref.json or more generically\n/etc/shared-state/ref_state/.json where datatype has to be one of the\ndeclared shared state types. Also you can get the reference state using shared\nstate.  \n\n```bash\nshared-state-async get wifi_links_info_ref\n``` \nor using the rpcd ubus wraper \n\n```bash\n ubus -S call shared-state-async get  '{\"data_type\":  \"wifi_links_info_ref\" }' \n```\n```JSON\n{\"data\":{\"cheche\":{\"src_loc\":{\"long\":\"-64.4228178\",\"lat\":\"-31.8019512\"},\"links\":{\"ae40411f73a8c64a00fc3abe\":{\"freq\":2462,\"iface\":\"wlan0-mesh\",\"tx_rate\":144,\"dst_mac\":\"c6:4a:00:fc:3a:be\",\"channel\":11,\"chains\":[-40,-35],\"signal\":-34,\"rx_rate\":144400,\"src_mac\":\"ae:40:41:1f:73:a8\"}}},\"graciela\":[]},\"error\":0}\n```\n## Default initialization \nFiles are in default state as an empty json object... \"{}\" \nUbus call to get method will return empty array \"[]\". That is a limitation of the\nlibrary. \n\n```bash\nubus -S call shared-state-async get  '{\"data_type\":  \"wifi_links_info_ref\" }' \n{\"data\":{\"cheche\":[],\"graciela\":[],\"tito\":[]},\"error\":0}\n```\n## Available datatypes\nData types must be declared. Available datatypes are babel_links_info_ref,\nbat_links_info_ref, wifi_links_info_ref and node_info_ref\n____\n\n== Makefile\n[,make]\n----\n#\n# Copyright (C) 2023 Javier Jorge \n# Copyright (c) 2023  Instituto Nacional de Tecnología Industrial\n# Copyright (C) 2023  Asociación Civil Altermundi \n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tSECTION:=lime\n\tCATEGORY:=LibreMesh\n\tTITLE:=Common components for reference satate datypes\n\tMAINTAINER:= Javier \n\tDEPENDS:=+lua +luci-lib-jsonc +ubus-lime-utils \\\n\t\t+lime-system shared-state-async   \n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tCommon components for reference satate datypes\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-wifi_links_info.html",
"lang": "en",
"title": "shared-state-wifi_links_info",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=WiFI links information module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Asociación Civil Altermundi \n\tDEPENDS:=+lua +luci-lib-jsonc +ubus-lime-utils \\\n\t\t+lime-system +libiwinfo-lua +shared-state-ref_state_commons shared-state-async \n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize links information beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state.html",
"lang": "en",
"title": "shared-state",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019-2020 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Very minimal state sharing betwen nodes\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+libuci-lua +lime-system +lua +luci-lib-jsonc +luci-lib-nixio \\\n\t\t+iputils-ping +uclient-fetch\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tLiMe style minimal unsecured CRDT to share light state between nodes\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/soporteremoto.html",
"lang": "en",
"title": "soporteremoto",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) allows AlterMundi to provide remote support through SSH root access\n  MAINTAINER:=Gui Iribarren \n  DEPENDS:= +zerotier +auto-usb-wwan +kmod-ath9k-htc +ath9k-htc-firmware\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Installs auto-usb-wwan to provide a zero-configuration WWAN via USB dongle\n  zerotier to provide VPN transport\n  and installs a predefined set of ssh authorized_keys of AlterMundi members\n  that will be granted root access\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/sprunge.html",
"lang": "en",
"title": "sprunge",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=sprunge.us and ix.io pastebin\n  SECTION:=utils\n  CATEGORY:=Utilities\n  MAINTAINER:=Ilario Gelmetti \n  URL:=http://ix.io\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tsprunge.us and ix.io command line pastebin\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-batman-adv.html",
"lang": "en",
"title": "ubus-lime-batman-adv",
"content": "== Readme\n____\n# B.A.T.M.A.N-Adv ubus status module\n\n|Path     |Procedure     |Signature     |Description\n|---  |---  |---  |---\n|luci2.batman-adv |interfaces     |{}     | Get the list of intefaces\n|luci2.batman-adv |gateways     |{}     | Get the list of gateways\n|luci2.batman-adv |originators    |{}       | Ghet the list of originators\n\n## Examples\n\n### ubus -v list luci2.batman-adv\n```\n'luci2.batman-adv' @1ae4c0f9\n  \"interfaces\":{}\n  \"gateways\":{}\n  \"originators\":{}\n```\n\n\n### ubus call luci2.batman-adv interfaces\n```json\n{\n  \"interfaces\": [\n    \"dummy0\",\n    \"wlan1-adhoc_177\",\n    \"wlan0-adhoc_177\"\n  ]\n}\n```\n### ubus call luci2.batman-adv gateways\n```json\n{\n  \"gateways\": [\n\n  ]\n}\n\n```\n\n### ubus call luci2.batman-adv originators\n```json\n{\n  \"originators\": [\n    [\n      \"QL-fc6565_dummy0\",\n      960,\n      99,\n      \"marisa_wlan1-adhoc\",\n      \"wlan1-adhoc_177\"\n    ],\n        [\n      \"QL-fc6543_dummy0\",\n      410,\n      93,\n      \"marisa_wlan1-adhoc\",\n      \"wlan1-adhoc_177\"\n    ]\n  ]\n}\n\n```\n____\n\n== Makefile\n[,make]\n----\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=B.A.T.M.A.N.-Adv ubus status module\n  DEPENDS:= +batctl +lua +libubox-lua +libubus-lua +luci-lib-nixio +lime-system +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-groundrouting.html",
"lang": "en",
"title": "ubus-lime-groundrouting",
"content": "== Readme\n____\n# Ubus mod - Lime ground routing\n\nGSOC 2018 - Marcos Gutierrez\n____\n\n== Makefile\n[,make]\n----\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=Libremap ubus ground routing module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libuci-lua +lime-system +luci-lib-jsonc +luci-compat\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-location.html",
"lang": "en",
"title": "ubus-lime-location",
"content": "== Readme\n____\n# Location (Libremap) ubus status module\n\n| Path           | Procedure | Signature                | Description          |\n| -------------- | --------- | ------------------------ | -------------------- |\n| luci2.location | get       | {}                       | Get current location |\n| luci2.location | set       | {lon:STRING, lat:STRING} | Set new location     |\n\n## Examples\n\n### ubus -v list luci2.location\n\nIf the location was never established, return the location of the community\n\n```\n'luci2.location' @8a28f605\n\t\"set\":{\"lon\":\"String\",\"lat\":\"String\"}\n\t\"get\":{}\n```\n\n### ubus call luci2.location get\n\n```json\n{\n  \"location\": {\n    \"lon\": \"-64.43289933588837\",\n    \"lat\": \"-31.800211834083036\"\n  },\n  \"default\": true // (is community location or custom location)\n}\n```\n\n### ubus call luci2.location set '{\"lon\":\"-64.13289933588837\",\"lat\":\"-31.000211834083036\"}'\n\n```json\n{\n  \"lon\": \"-64.13289933588837\",\n  \"lat\": \"-31.000211834083036\"\n}\n```\n____\n\n== Makefile\n[,make]\n----\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=Libremap ubus status module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libuci-lua +lime-system +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-metrics.html",
"lang": "en",
"title": "ubus-lime-metrics",
"content": "== Makefile\n[,make]\n----\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Santiago Piccinini \n  SUBMENU:=3. Applications\n  TITLE:=Metrics ubus module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +luci-lib-jsonc +netperf +mtr +check-internet +lime-system +ubus-lime-utils\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-openairview.html",
"lang": "en",
"title": "ubus-lime-openairview",
"content": "== Readme\n____\n# Openairview (Align / Spectrun scan) ubus status module\n\n| Path             | Procedure          | Signature                          | Description                                                                                                                                |\n| ---------------- | ------------------ | ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| lime-openairview | spectral_scan      | {device:STRING, spectrum:STRING}   | Get the fft-eval scan results. specturm can by: 2ghz, 5ghz or current. \"current\" means scan only the channel on which the interface is set. This will work only if fft-eval is installed |\n\n## Examples\n\n### ubus -v list lime-openairview\n\nIf the openairview was never established, return the openairview of the community\n\n```\n'lime-openairview' @4bd5f4f5\n\t\"spectral_scan\":{\"device\":\"String\",\"spectrum\":\"String\"}\n```\n____\n\n== Makefile\n[,make]\n----\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=Openairview ubus module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libiwinfo-lua +luci-lib-nixio +luci-lib-jsonc +lime-system\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-utils.html",
"lang": "en",
"title": "ubus-lime-utils",
"content": "== Readme\n____\n# Utils Libremesh ubus status module\n\nProcedure | Signature | Description |\n --------------- | ----------------|------------------ |\n| get_cloud_nodes | {} | Get cloud nodes |\n| safe_reboot     | { \"action\": \"status\" } | Get safe-reboot status|\n| safe_reboot     | { \"action\": \"start\", \"value\": {\"wait\": TIME, \"fallback\": TIME } } | After backing up /overlay/upper/etc, wait for TIME (value.wait) before reboot (Default: 5min). After boot, wait for TIME (value.fallback) before reverting /overlay/upper/etc from backup found in /overlay/upper/.etc.last-good.tgz (Default: 10min). _TIME examples: 1hour 60min 60m 3600sec 3600 (all of them are equivalent)_ |\n| safe_reboot     | { \"action\": \"now\" }                                               | Do not make /overlay/upper/etc backup; instead check that there's one already in place (/overlay/upper/.etc.last-good.tgz,then reboot and wait for fallback timeout.                                                                                                                                                                  |\n| safe_reboot     | { \"action\": \"cancel\" }| Remove /overlay/upper/.etc.last-good.tgz (useful after a successful reboot)|\n| safe_reboot     | { \"action\": \"discard\" } | Restores /overlay/upper/etc from /overlay/upper/.etc.last-good.tgz (useful to discard changes)|\n| get_community_settings     | {} | Returns custom values for the community, this is useful for limeApp|\n| get_config     | {} | Returns wifi and netwrok configuration from /etc/config/lime |\n| set_notes     | {\"text\":\"String\"} | Write notes to /etc/banner |\n| get_notes     | {} | Get notes fom /etc/banner |\n| change_config     | {\"name\":\"String\",\"ip\":\"String\"} | Change the name of the router and the ipv4 |\n| get_node_status | {} | Returns the state of the node (uptime, ipv4 and ipv6 addresses, most active link, etc) |\n\n## Examples\n\n### ubus -v list lime-utils\n\n```\n'lime-utils' @fb3a2ef0\n\t\"get_cloud_nodes\":{\"no_params\":\"Integer\"}\n\t\"get_community_settings\":{\"no_params\":\"Integer\"}\n\t\"get_config\":{\"no_params\":\"Integer\"}\n\t\"set_notes\":{\"text\":\"String\"}\n\t\"change_config\":{\"name\":\"String\",\"ip\":\"String\"}\n\t\"safe_reboot\":{\"action\":\"String\",\"value\":\"String\"}\n\t\"get_notes\":{\"no_params\":\"Integer\"}\n\t\"get_node_status\":{\"no_params\":\"Integer\"}\n```\n____\n\n== Makefile\n[,make]\n----\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Santiago Piccinini \n  SUBMENU:=3. Applications\n  TITLE:=LIbremesh ubus utils module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libuci +lime-system +libiwinfo-lua +cgi-io +rpcd-mod-file \\\n\t    +luci-lib-jsonc\n\n  PKGARCH:=all\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-tmate.html",
"lang": "en",
"title": "ubus-tmate",
"content": "== Readme\n____\n# tmate ubus module\n\nThis session uses the /tmp/tmate.sock socket.\nIf you want to locally connect to the running session you can run `tmate -S /tmp/tmate.sock attach`.\n\n| Path  | Procedure     |  Description                     |\n| ----- | ------------- | -------------------------------- |\n| tmate | get_session   | Get the current session (if any) |\n| tmate | open_session  | Open a new session               |\n| tmate | close_session | Close the current session        |\n\n### ubus -v list tmate\n\n```\n'tmate' @5df79c49\n\t\"get_session\":{\"no_params\":\"Integer\"}\n\t\"open_session\":{\"no_params\":\"Integer\"}\n\t\"close_session\":{\"no_params\":\"Integer\"}\n```\n____\n\n== Makefile\n[,make]\n----\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=net\n  CATEGORY:=Network\n  SUBMENU:=SSH\n  MAINTAINER:=Nicolas Pace \n  TITLE:=tmate.io ubus bindings\n  DEPENDS:=+tmate +lime-system +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tIt allows to create remote sessions over tmate through ubus.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/watchping.html",
"lang": "en",
"title": "watchping",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Ping a host and run customizable actions (hooks) on timeout/recovery.\n  MAINTAINER:=Gui Iribarren \n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Checks reachability of given host(s) through particular interface(s) (e.g. 8.8.8.8 on WAN).\n  Action hooks are run from /etc/watchping/*.d/\n  Configuration is done in /etc/config/system.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/wifi-unstuck-wa.html",
"lang": "en",
"title": "wifi-unstuck-wa",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Santiago Piccinini \n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides workarounds for radio bugs\n  MAINTAINER:=Santiago Piccinini \n  DEPENDS:=+lua +lime-system +luci-lib-nixio\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis $(PKG_NAME) is a collection of workarounds to radio and/or\n\tradio driver bugs.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}

]}
  